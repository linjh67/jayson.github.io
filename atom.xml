<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jayson</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-12-05T16:03:28.901Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>jayson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>考研</title>
    <link href="http://example.com/2020/12/05/%E8%80%83%E7%A0%94/"/>
    <id>http://example.com/2020/12/05/%E8%80%83%E7%A0%94/</id>
    <published>2020-12-05T13:46:09.000Z</published>
    <updated>2020-12-05T16:03:28.901Z</updated>
    
    <content type="html"><![CDATA[<hr><p>现在是2020.12.5，准备要开始考研的准备啦，因为我的基础其实没有很好，所以得好好地努力一把，加油！</p><h1 id="考研"><a href="#考研" class="headerlink" title="考研"></a>考研</h1><h2 id="考研时间线"><a href="#考研时间线" class="headerlink" title="考研时间线"></a>考研时间线</h2><h3 id="12-5-12-20"><a href="#12-5-12-20" class="headerlink" title="12.5-12.20"></a>12.5-12.20</h3><ol><li>总结考研的注意事项以及一些上岸人的心得与体会</li><li>总结各个学校的信息，确定要考的科目以及学校</li><li>买好所有教材</li></ol><h3 id="12-21-大三上学期期末结束"><a href="#12-21-大三上学期期末结束" class="headerlink" title="12.21-大三上学期期末结束"></a>12.21-大三上学期期末结束</h3><p>开始起步的复习，相当于第一轮复习的开头吧</p><h3 id="寒假-6月份"><a href="#寒假-6月份" class="headerlink" title="寒假-6月份"></a>寒假-6月份</h3><p>第一轮复习结束，基础篇</p><h3 id="7月份到九月份"><a href="#7月份到九月份" class="headerlink" title="7月份到九月份"></a>7月份到九月份</h3><p>提高篇</p><h3 id="十月份到十一月份"><a href="#十月份到十一月份" class="headerlink" title="十月份到十一月份"></a>十月份到十一月份</h3><p>冲刺篇</p><h2 id="考研信息"><a href="#考研信息" class="headerlink" title="考研信息"></a>考研信息</h2><h3 id="了解通道"><a href="#了解通道" class="headerlink" title="了解通道"></a>了解通道</h3><ol><li>研招网</li><li>目标院校的研究生官网</li><li>考研论坛<a href="http://bbs.kaoyan.com/">考研论坛_考研人的精神家园！ (kaoyan.com)</a></li><li>学信网</li><li>中国考研网</li><li>小木虫</li><li>考研帮</li></ol><h2 id="考研学校分析"><a href="#考研学校分析" class="headerlink" title="考研学校分析"></a>考研学校分析</h2><ol><li>复旦大学</li></ol><p>招262</p><p>数二，英二，408</p><ol><li>华中科技大学</li></ol><p>招120</p><p>数一，英二，834（数据结构，计网）</p><ol><li>中山大学</li></ol><p>招60</p><p>数二，英二，408</p><ol><li>浙江大学</li></ol><p>招149</p><p>数一，英一，408</p><ol><li>武汉大学</li></ol><p>招45</p><p>数二，英二，408</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;现在是2020.12.5，准备要开始考研的准备啦，因为我的基础其实没有很好，所以得好好地努力一把，加油！&lt;/p&gt;
&lt;h1 id=&quot;考研&quot;&gt;&lt;a href=&quot;#考研&quot; class=&quot;headerlink&quot; title=&quot;考研&quot;&gt;&lt;/a&gt;考研&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>数值微分</title>
    <link href="http://example.com/2020/12/05/%E6%95%B0%E5%80%BC%E5%BE%AE%E5%88%86/"/>
    <id>http://example.com/2020/12/05/%E6%95%B0%E5%80%BC%E5%BE%AE%E5%88%86/</id>
    <published>2020-12-05T02:19:43.000Z</published>
    <updated>2020-12-05T06:39:56.360Z</updated>
    
    <content type="html"><![CDATA[<p>d</p><hr><p>总结了数值积分，接下来就是数值微分了，好吧我再说废话。</p><h3 id="两点前向差分公式"><a href="#两点前向差分公式" class="headerlink" title="两点前向差分公式"></a>两点前向差分公式</h3><script type="math/tex; mode=display">f(x+h)=f(x)+hf^{'}(x)+\frac{h^2}{2}f^{''(c)}</script><script type="math/tex; mode=display">f^{'}(x)=\frac{f(x+h)-f(x)}{h}-\frac{h}{2}f^{''}(c)</script><script type="math/tex; mode=display">f^{'}(x)\approx\frac{f(x+h)-f(x)}{h}</script><p>c是在区间$[x,x+h]$之间的,误差即$\frac{h}{2}f^{‘’}(c)$</p><h3 id="三点中心差分公式"><a href="#三点中心差分公式" class="headerlink" title="三点中心差分公式"></a>三点中心差分公式</h3><script type="math/tex; mode=display">f(x+h)=f(x)+hf^{'}(x)+\frac{h^2}{2}f^{''(x)}+\frac{h^3}{6}f^{'''}(c1)</script><script type="math/tex; mode=display">f(x-h)=f(x)+hf^{'}(x)-\frac{h^2}{2}f^{''(x)}-\frac{h^3}{6}f^{'''}(c2)</script><script type="math/tex; mode=display">f^{'}(x)=\frac{f(x+h)-f(x-h)}{2h}+\frac{f^{'''}(c_h)}{6}h^2</script><script type="math/tex; mode=display">f^{'}(x)\approx\frac{f(x+h)-f(x)}{h}</script><h3 id="二阶导"><a href="#二阶导" class="headerlink" title="二阶导"></a>二阶导</h3><script type="math/tex; mode=display">f^{''}(x)=\frac{f(x+h)-2f(x)+f(x+h)}{h^2}+\frac{h^2}{12}f^{(4)}(c)</script><h3 id="n阶到n-1阶"><a href="#n阶到n-1阶" class="headerlink" title="n阶到n+1阶"></a>n阶到n+1阶</h3><h3 id="一般中值定理"><a href="#一般中值定理" class="headerlink" title="一般中值定理"></a>一般中值定理</h3><p>存在$c\in[a,b]$,使得</p><script type="math/tex; mode=display">(a1+...+a_n)f(c)=a_1f(x_1)+...+a_nf(x_n)</script><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;d&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;总结了数值积分，接下来就是数值微分了，好吧我再说废话。&lt;/p&gt;
&lt;h3 id=&quot;两点前向差分公式&quot;&gt;&lt;a href=&quot;#两点前向差分公式&quot; class=&quot;headerlink&quot; title=&quot;两点前向差分公式&quot;&gt;&lt;/a&gt;两点前向差分公式&lt;/h3&gt;</summary>
      
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="数值计算" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>信号与系统第复习</title>
    <link href="http://example.com/2020/12/03/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2020/12/03/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-12-03T11:00:29.000Z</published>
    <updated>2020-12-06T06:38:20.772Z</updated>
    
    <content type="html"><![CDATA[<hr><p>开始复习信号与系统，按照章节来复习，记录重点，并且会总结题型。</p><h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h3 id="1-信号分解"><a href="#1-信号分解" class="headerlink" title="1. 信号分解"></a>1. 信号分解</h3><p>任何信号都可以分解成一个偶信号和一个奇信号之和</p><script type="math/tex; mode=display">x(t)=x_e(t)+x_o(t)</script><script type="math/tex; mode=display">x_e(t)=\frac{1}{2}[x(t)+x(-t)]</script><script type="math/tex; mode=display">x_ot(t)=\frac{1}{2}[x(t)-x(-t)]</script><h3 id="复指数信号"><a href="#复指数信号" class="headerlink" title="复指数信号"></a>复指数信号</h3><h4 id="1-连续的情况"><a href="#1-连续的情况" class="headerlink" title="1 连续的情况"></a>1 连续的情况</h4><p>$x(t)=Ce^{at}$,C,a都是复数，这里不讨论C，a是实数的情况</p><script type="math/tex; mode=display">x(t)=e^{jw_0t}</script><script type="math/tex; mode=display">a=jw_0</script><script type="math/tex; mode=display">x(t)=e^{jw_0t}=cosw_ot+jsinw_0t</script><p>一般情况下的正弦函数(不太懂？？？？)：</p><script type="math/tex; mode=display">x(t)=Acos(w_0t+\phi)=\frac{A}{2}e^{j\phi}e^{jw_0t}+\frac{A}{2}e^{-j\phi}e^{-jw_0t}</script><p>一般情况下复指数：</p><script type="math/tex; mode=display">x(t)=Ce^{at},C=|C|e^{j\theta},a=r+jw_0</script><script type="math/tex; mode=display">x(t)=|C|e^{j\theta}e^{rt}e^{jw_0t}</script><h4 id="2-离散的情况"><a href="#2-离散的情况" class="headerlink" title="2 离散的情况"></a>2 离散的情况</h4><script type="math/tex; mode=display">x(n)=e^{jw_0n}=cosw_0t+jsinw_0t</script><script type="math/tex; mode=display">x(n)=C\alpha ^n,\space C=|C|e^{j\theta},\alpha=|\alpha|e^{jw_0}</script><script type="math/tex; mode=display">x(n=)|C||\alpha|^ne^{j(w_0n+\theta)}=|C||\alpha|^n*[cos(w_0n+\theta)+jsin(w_0n+\theta)]</script><h3 id="单位脉冲和单位阶跃序列"><a href="#单位脉冲和单位阶跃序列" class="headerlink" title="单位脉冲和单位阶跃序列"></a>单位脉冲和单位阶跃序列</h3><h4 id="1-离散情况"><a href="#1-离散情况" class="headerlink" title="1 离散情况"></a>1 离散情况</h4><script type="math/tex; mode=display">\delta(n)=\begin{cases}1,n=0\\0,n\neq0\end{cases}</script><script type="math/tex; mode=display">u(n)=\begin{cases}1,n\geq0\\0,n<0\end{cases}</script><script type="math/tex; mode=display">\delta(n)=u(n)-u(n-1)</script><script type="math/tex; mode=display">u(n)=\sum_{k=-\infty}^n\delta(k)=\sum_{k=0}^\infty \delta(n-k)</script><h4 id="2-连续情况"><a href="#2-连续情况" class="headerlink" title="2 连续情况"></a>2 连续情况</h4><script type="math/tex; mode=display">u(t)=\begin{cases}1,t>0\\0,t<0\end{cases}</script><script type="math/tex; mode=display">\delta(t)=\frac{du(t)}{dt},u(t)=\int_{-\infty}^t\delta(\tau)d\tau</script><h1 id="delta-t-可以看作一个面积始终为1的矩形-矩形面积为冲激强度"><a href="#delta-t-可以看作一个面积始终为1的矩形-矩形面积为冲激强度" class="headerlink" title="$\delta(t)$可以看作一个面积始终为1的矩形,矩形面积为冲激强度"></a>$\delta(t)$可以看作一个面积始终为1的矩形,矩形面积为<em>冲激强度</em></h1><script type="math/tex; mode=display">u(t)=\int_{-\infty}^t\delta(\tau)d\tau =\int_0^\infty \delta(t-\tau)d\tau</script><h3 id="无记忆系统"><a href="#无记忆系统" class="headerlink" title="无记忆系统"></a>无记忆系统</h3><p>输出只与当前的输入有关</p><h3 id="可逆性"><a href="#可逆性" class="headerlink" title="可逆性"></a>可逆性</h3><p>输入与输出是一一对应的就是可逆系统</p><h3 id="因果性"><a href="#因果性" class="headerlink" title="因果性"></a>因果性</h3><p>输出只与此时以及之前的输入有关而与之后的输入无关</p><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>输入有界，产生的输出也是有界的</p><h3 id="时不变系统"><a href="#时不变系统" class="headerlink" title="时不变系统"></a>时不变系统</h3><p>$若x(t)\rightarrow y(t),x(t-t_0)\rightarrow y(t-t_0)$</p><p>检查时不变的步骤：</p><ol><li>输入为$x_1(t)$,输出为$y_1(t)$</li><li>输入为$x_2(t)$,输出为$y_2(t)$</li><li>令$x_2(t)=x_1(t-t_0)$，检验$y_1(t-t_0)$是否等于$y_2(t)$</li></ol><h3 id="线性"><a href="#线性" class="headerlink" title="线性"></a>线性</h3><p>令$x_1(t)\rightarrow y_1(t),x_2(t)\rightarrow y_2(t)$</p><p>$ax_1(t)+bx_2(t)\rightarrow ay_1(t)+by_2(t)$</p><h1 id="Chapter-2-线性时不变系统"><a href="#Chapter-2-线性时不变系统" class="headerlink" title="Chapter 2 线性时不变系统"></a>Chapter 2 线性时不变系统</h1><script type="math/tex; mode=display">x(n)=\sum_{k=-\infty}^{\infty}x(k)\delta(n-k)</script><h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><h4 id="离散时间卷积和"><a href="#离散时间卷积和" class="headerlink" title="离散时间卷积和"></a>离散时间卷积和</h4><p>令$\delta (n-k)$的响应是$h_k(n)$，若是时不变性，所以$\delta(n-k)\rightarrow h(n-k)$</p><p>卷积和：</p><script type="math/tex; mode=display">y(n)=x(n)*h(n)=\sum_{j=-\infty}^{\infty}x(j)h_k(n)=\sum_{j=-\infty}^{\infty}x(j)h(n-k)</script><h4 id="连续时间卷积积分"><a href="#连续时间卷积积分" class="headerlink" title="连续时间卷积积分"></a>连续时间卷积积分</h4><p>任何的连续时间信号可以分解成移位加权的单位冲激信号的线性组合</p><script type="math/tex; mode=display">x(t)=\int_{-\infty}^{\infty}x(\tau)\delta(t-\tau)d\tau</script><p>$\delta(t-\tau)$的响应是$h_\tau (t)$,卷积积分</p><script type="math/tex; mode=display">y(t)=\int_{-\infty}^{\infty}x(\tau)h_\tau (t)d\tau</script><p>系统时不变，卷积积分</p><script type="math/tex; mode=display">y(t)=\int_{-\infty}^{\infty}x(\tau)h(t-\tau)d\tau =x(t)*h(t)</script><p>卷积积分步骤：</p><ol><li>变量置换：将$x(t),h(t)$变为$x(\tau),h(\tau)$ ，以$\tau$为积分变量 </li><li>反褶：将h($\tau$)变为$h(-\tau)$； </li><li>平移：将$h(-\tau)$平移$t$，变为$h[-(\tau -t)]$</li><li>相乘：将$x(\tau)$和$h(t-\tau)$相乘； </li><li>积分：求$x(\tau)$金和$h(t-\tau)$乘积下的面积。</li></ol><h3 id="卷积积分和卷积和性质"><a href="#卷积积分和卷积和性质" class="headerlink" title="卷积积分和卷积和性质"></a>卷积积分和卷积和性质</h3><p>前提是：</p><ul><li><p>系统是LTI系统</p></li><li><p>涉及到的卷积运算收敛</p></li></ul><h4 id="1-交换律"><a href="#1-交换律" class="headerlink" title="1.交换律"></a>1.交换律</h4><h4 id="2-分配律"><a href="#2-分配律" class="headerlink" title="2.分配律"></a>2.分配律</h4><h4 id="3-结合律"><a href="#3-结合律" class="headerlink" title="3.结合律"></a>3.结合律</h4><h4 id="4-微分，积分，时移-卷积积分"><a href="#4-微分，积分，时移-卷积积分" class="headerlink" title="4.微分，积分，时移(卷积积分)"></a>4.微分，积分，时移(卷积积分)</h4><h4 id="5-差分，求和，时移-卷积和"><a href="#5-差分，求和，时移-卷积和" class="headerlink" title="5.差分，求和，时移(卷积和)"></a>5.差分，求和，时移(卷积和)</h4><h3 id="LTI系统的性质"><a href="#LTI系统的性质" class="headerlink" title="LTI系统的性质"></a>LTI系统的性质</h3><p>因为LTI系统是由单位冲激/脉冲响应来表示的，所以LTI的性质也会在位冲激/脉冲响应中体现出来。</p><h4 id="1-记忆性"><a href="#1-记忆性" class="headerlink" title="1.记忆性"></a>1.记忆性</h4><script type="math/tex; mode=display">y(n)=\sum_{k=-\infty}^{\infty}x(k)h(n-k)</script><p>无记忆性即$y(n)$只能与n时刻的的输入有关，所以:</p><script type="math/tex; mode=display">h(n-k)=0,n\neq k</script><p>所以，</p><script type="math/tex; mode=display">h(n)=k\delta(n),h(t)=k\delta(t)</script><script type="math/tex; mode=display">x(n)*h(n)=kx(n),x(t)*h(t)=kx(t)</script><p>否则，则系统时记忆的</p><h4 id="2-可逆性"><a href="#2-可逆性" class="headerlink" title="2.可逆性"></a>2.可逆性</h4><h4 id="3-因果性"><a href="#3-因果性" class="headerlink" title="3.因果性"></a>3.因果性</h4><p>$y(n)$对任何时刻的n,值只取决于n以及n时刻之前的输入，所以$k&gt;n$的项为零即：</p><script type="math/tex; mode=display">h(n-k)=0,k>n</script><h4 id="4-稳定性"><a href="#4-稳定性" class="headerlink" title="4.稳定性"></a>4.稳定性</h4><p>$x(n)$有界，$y(n)$有界</p><h4 id="5-LTI系统的单位阶跃响应"><a href="#5-LTI系统的单位阶跃响应" class="headerlink" title="5.LTI系统的单位阶跃响应"></a>5.LTI系统的单位阶跃响应</h4><hr><p>Chapter 2还没整理完的</p><h1 id="Chapter-3-周期信号的傅里叶级数表示"><a href="#Chapter-3-周期信号的傅里叶级数表示" class="headerlink" title="Chapter 3 周期信号的傅里叶级数表示"></a>Chapter 3 周期信号的傅里叶级数表示</h1><h3 id="傅里叶的作用"><a href="#傅里叶的作用" class="headerlink" title="傅里叶的作用"></a>傅里叶的作用</h3><ol><li>滤波</li><li>求解微分方程</li></ol><p>频域中：</p><p>$’1’:\omega _0$</p><p>$’0’:cos(0t)$</p><h3 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h3><h4 id="三角函数系"><a href="#三角函数系" class="headerlink" title="三角函数系"></a>三角函数系</h4><script type="math/tex; mode=display">{0,1,sinx,cosx,sin2x,cos2x,...,sinnx,cosnx}</script><h4 id="三角函数的正交性"><a href="#三角函数的正交性" class="headerlink" title="三角函数的正交性:"></a>三角函数的正交性:</h4><p>任取两个三角函数系不同的三角函数作积分值都为0</p><script type="math/tex; mode=display">\int_{-\pi}^{\pi}sinnx*cosmxdx=0</script><script type="math/tex; mode=display">\int_{-\pi}^{\pi}cosnx*cosmxdx=0,n\neq m</script><script type="math/tex; mode=display">\int_{-\pi}^{\pi}sinnx*cosmxdx=0,n\neq m</script><h4 id="周期为-2-pi-的函数展开为傅里叶级数"><a href="#周期为-2-pi-的函数展开为傅里叶级数" class="headerlink" title="周期为$2\pi$的函数展开为傅里叶级数"></a>周期为$2\pi$的函数展开为傅里叶级数</h4><script type="math/tex; mode=display">f(x)=f(x+2\pi)</script><script type="math/tex; mode=display">f(x)=\sum_0^\infty a_ncosnx+\sum_0^\infty b_nsinnx,或</script><script type="math/tex; mode=display">f(x)=\frac{a_0}{2}+\sum_1^\infty a_ncosnx+\sum_1^\infty b_nsinnx</script><p>等式两边积分，通过三角函数的正交性可以求得，</p><script type="math/tex; mode=display">a_0=\frac{1}{\pi}\int_{-\pi}^\pi f(x)dx</script><p>找$a_n$</p><p>等式两边乘以$cosmx$,然后等式两边积分:</p><script type="math/tex; mode=display">a_n=\frac{1}{\pi}f(x)cosnxdx</script><p>同理，找$b_n$</p><p>等式两边乘以$sinmx$,然后等式两边积分:</p><script type="math/tex; mode=display">b_n=\frac{1}{\pi}f(x)sinnxdx</script><h4 id="周期为2L的函数傅里叶级数表示"><a href="#周期为2L的函数傅里叶级数表示" class="headerlink" title="周期为2L的函数傅里叶级数表示"></a>周期为2L的函数傅里叶级数表示</h4><script type="math/tex; mode=display">f(t)=f(t+2L)</script><script type="math/tex; mode=display">x=\frac{\pi}{L}t,t=\frac{L}{\pi}x</script><script type="math/tex; mode=display">f(t)=f(\frac{L}{\pi}x)=g(x)</script><script type="math/tex; mode=display">g(x)=\frac{a_0}{2}+\sum_1^\infty a_ncosnx+\sum_1^\infty b_nsinnx</script><p>代入，得</p><p>表达式1：</p><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum_1^\infty a_ncos\frac{n\pi}{L}t+\sum_1^\infty b_nsin\frac{n\pi}{L}t</script><script type="math/tex; mode=display">a_0=\frac{1}{L}\int _{-L}^{L}f(t)dt</script><script type="math/tex; mode=display">a_n=\frac{1}{L}\int _{-L}^{L}f(t)cos\frac{n\pi}Ltdt</script><script type="math/tex; mode=display">b_n=\frac{1}{L}\int _{-L}^{L}f(t)sin\frac{n\pi}Ltdt</script><p>表达式2：</p><script type="math/tex; mode=display">T=2L,\omega=\frac{\pi}{L}</script><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum_1^\infty a_ncosnwt+\sum_1^\infty b_nsinnwt</script><script type="math/tex; mode=display">a_0=\frac{2}{T}\int_0^Tf(t)dt</script><script type="math/tex; mode=display">a_n=\frac{2}{T}\int_0^Tf(t)cosn\omega dt</script><script type="math/tex; mode=display">b_n=\frac{2}{T}\int_0^Tf(t)sinn\omega dt</script><h4 id="傅里叶级数的复数形式"><a href="#傅里叶级数的复数形式" class="headerlink" title="傅里叶级数的复数形式"></a>傅里叶级数的复数形式</h4><p>可以把$a_0,a_n,b_n$用用一种形式表达出来</p><p>欧拉公式</p><script type="math/tex; mode=display">e^{i\theta}=cos\theta+isin\theta</script><script type="math/tex; mode=display">cos\theta=\frac{1}{2}(e^{i\theta}+e^{-i\theta})</script><script type="math/tex; mode=display">sin\theta =-\frac{1}{2i}(e^{i\theta}-e^{-i\theta})</script><p>代入$f(t)$里,</p><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum_{n=1}^\infty \frac{a_n-ib_n}{2}e^{in\omega t}+\sum_{n=1}^\infty \frac{a_n+ib_n}{2}e^{-in\omega t}</script><script type="math/tex; mode=display">f(t)=\sum_{n=0}^0\frac{a_0}{2}e^{in\omega t}+\sum_{n=1}^\infty \frac{a_n-ib_n}{2}e^{in\omega t}+\sum_{n=-\infty}^{-1} \frac{a_{-n}+ib_{-n}}{2}e^{in\omega t}</script><script type="math/tex; mode=display">f(t)=\sum_\infty ^\infty C_ne^{in\omega t}</script><p>$C_n$代入并通过欧拉公式求得，</p><script type="math/tex; mode=display">C_n=\begin{cases}\frac{1}{T}\int_0^T f(t)dt,n=0\\\frac{1}{T}\int_0^T f(t)e^{-in\omega t}dt,n=1,2,3...\\\frac{1}{T}\int_0^T f(t)e^{-in\omega t}dt,n=-1,-2,-3...\end{cases}</script><p>所以，最后:</p><script type="math/tex; mode=display">f(t)=f(t+T)</script><script type="math/tex; mode=display">f(t)=\sum_{-\infty} ^\infty C_ne^{in\omega_0 t},\omega_0=\frac{2\pi}{T}</script><script type="math/tex; mode=display">C_n=\frac{1}{T}\int_0^T f(t)e^{-in\omega_0 t}dt</script><h4 id="收敛性"><a href="#收敛性" class="headerlink" title="收敛性"></a>收敛性</h4><p>两组条件都是充分条件</p><ol><li>平方可积条件：</li></ol><p>若，$\int_T|x(t)|^2dt&lt;\infty$,则$a_k$必存在</p><ol><li>Dirchlet条件：<ol><li>$x(t)$绝对可积，即$\int_T|x(t)|dt&lt;\infty$</li><li>任何有限区间，只有有限个极值点，且极值为有限值</li><li>任何有限区间，只有有限个间断点，且间断点函数值有限</li></ol></li></ol><h3 id="离散时间傅里叶级数"><a href="#离散时间傅里叶级数" class="headerlink" title="离散时间傅里叶级数"></a>离散时间傅里叶级数</h3><p>$N$为周期</p><script type="math/tex; mode=display">x(n)=\sum_{k=<N>}a_ke^{j\frac{2\pi}{N}kn}</script><script type="math/tex; mode=display">a_k=\frac{1}{N}\sum_{n=<N>}x(n)e^{-j\frac{2\pi}{N}kn}</script><h3 id="傅里叶级数与LTI系统"><a href="#傅里叶级数与LTI系统" class="headerlink" title="傅里叶级数与LTI系统"></a>傅里叶级数与LTI系统</h3><p>连续：</p><script type="math/tex; mode=display">x(t)=\sum_{k=-\infty} ^\infty a_ke^{jk\omega_0 t}\rightarrow y(t)=\sum_{k=-\infty}^\infty a_kH(jk\omega_0)e^{jk\omega_0t}</script><p>频率响应：</p><script type="math/tex; mode=display">H(j\omega)=\int_{-\infty}^\infty h(t)e^{-j\omega t}dt</script><p>离散：</p><script type="math/tex; mode=display">x(n)=\sum_{k=<N>}a_ke^{j\frac{2\pi}{N}kn}\rightarrow y(t)=\sum_{k=-<N>} a_kH(e^{j\frac{2\pi}{N}k})e^{j\frac{2\pi}{N}kn}</script><p>频率响应：</p><script type="math/tex; mode=display">H(e^{j\omega})=\sum_{-\infty}^{\infty}h(n)e^{-j\omega n}</script><h1 id="第四章连续时间傅里叶变换"><a href="#第四章连续时间傅里叶变换" class="headerlink" title="第四章连续时间傅里叶变换"></a>第四章连续时间傅里叶变换</h1><p>时域表达：$t\rightarrow f(t)$</p><p>频域表达:$n\omega_0\rightarrow C_n$    </p><p>非周期:$T\rightarrow \infty $</p><h5 id="离散到连续的变换"><a href="#离散到连续的变换" class="headerlink" title="离散到连续的变换"></a>离散到连续的变换</h5><script type="math/tex; mode=display">\Delta \omega=(n+1)\omega_0-n\omega_0=\omega_0=\frac{2\pi}{T}</script><p>T无穷，$\Delta \omega$趋近于零，所以频谱从离散到连续 </p><h5 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h5><script type="math/tex; mode=display">T\rightarrow \infty,\int_{-\frac{T}{2}}^{\frac{T}{2}}dt\rightarrow \int_{-\infty}^\infty dt</script><script type="math/tex; mode=display">n\omega_0\rightarrow \omega</script><script type="math/tex; mode=display">\frac{1}{T}=\frac{\Delta \omega}{2\pi}</script><script type="math/tex; mode=display">\sum_{n=-\infty}^{\infty}\Delta \omega \rightarrow \int_{-\infty}^\infty d\omega</script><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}f(t)e^{-i\omega t}dte^{i\omega t}d\omega</script><p>傅里叶变换：</p><script type="math/tex; mode=display">F(\omega)=\int_{-\infty}^\infty f(t)e^{-i\omega t}dt</script><p>逆变换:</p><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\int_{-\infty}^\infty F(\omega)e^{i\omega t}d\omega</script><h3 id="收敛性-1"><a href="#收敛性-1" class="headerlink" title="收敛性"></a>收敛性</h3><p>和傅里叶级数的情况是一样的</p><ol><li>平方可积条件：</li></ol><p>若，$\int_{-\infty}^\infty|x(t)|^2dt&lt;\infty$,则$X(j\omega)$必存在,</p><p>这表明能量有限的信号其傅里叶变换一定存在。</p><ol><li>Dirchlet条件：<ol><li>$x(t)$绝对可积，即$\int_{-\infty}^{\infty}|x(t)|dt&lt;\infty$</li><li>任何有限区间，只有有限个极值点，且极值为有限值</li><li>任何有限区间，只有有限个间断点，且间断点函数值有限</li></ol></li></ol><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><h4 id="1-线性"><a href="#1-线性" class="headerlink" title="1.线性"></a>1.线性</h4><script type="math/tex; mode=display">ax(t)+by(t)=aX(j\omega)+bY(j\omega)</script><h4 id="2-时移"><a href="#2-时移" class="headerlink" title="2.时移"></a>2.时移</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则x(t-t0)\leftrightarrow X(j\omega)e^{j\omega t_0}</script><h4 id="3-共轭以及共轭对称性"><a href="#3-共轭以及共轭对称性" class="headerlink" title="3.共轭以及共轭对称性"></a>3.共轭以及共轭对称性</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则x^*(t)\leftrightarrow X^*(-j\omega),则</script><h4 id="4-时域微分与积分"><a href="#4-时域微分与积分" class="headerlink" title="4. 时域微分与积分"></a>4. 时域微分与积分</h4><h4 id="5-时域和频域的尺度变换"><a href="#5-时域和频域的尺度变换" class="headerlink" title="5.时域和频域的尺度变换"></a>5.时域和频域的尺度变换</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则x(at)\leftrightarrow \frac{1}{|a|}X(j\frac{\omega}{a})</script><h4 id="6-对偶性"><a href="#6-对偶性" class="headerlink" title="6.对偶性"></a>6.对偶性</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则X(jt)\leftrightarrow 2\pi x(-\omega)</script><h4 id="7-Parseval定理"><a href="#7-Parseval定理" class="headerlink" title="7.Parseval定理"></a>7.Parseval定理</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则</script><script type="math/tex; mode=display">\int_{-\infty}^\infty |x(t)|^2dt=\frac{1}{2\pi}\int_{-\infty}^\infty |X(j\omega)|^2d\omega</script><h4 id="卷积特性"><a href="#卷积特性" class="headerlink" title="卷积特性"></a>卷积特性</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),h(t)\leftrightarrow H(j\omega)</script><p>则，</p><script type="math/tex; mode=display">x(t)*h(t)\leftrightarrow X(j\omega)H(j\omega)</script><h1 id="第五章离散时间傅里叶变换"><a href="#第五章离散时间傅里叶变换" class="headerlink" title="第五章离散时间傅里叶变换"></a>第五章离散时间傅里叶变换</h1><script type="math/tex; mode=display">X(e^{j\omega})=\sum_{-\infty}^\infty x(n)e^{-j\omega n}</script><script type="math/tex; mode=display">x(n)=\frac{1}{2\pi}{\int}_{2\pi}X(e^{j\omega}e^{j\omega n})d\omega</script><h3 id="1-周期性"><a href="#1-周期性" class="headerlink" title="1.周期性"></a>1.周期性</h3><script type="math/tex; mode=display">x(n)\leftrightarrow X(e^{j\omega}),则X(e^{j（\omega +2\pi)})=X(e^{j\omega})</script><h3 id="2-线性"><a href="#2-线性" class="headerlink" title="2.线性"></a>2.线性</h3><h3 id="3-时移与频移"><a href="#3-时移与频移" class="headerlink" title="3.时移与频移"></a>3.时移与频移</h3><h3 id="4-时域反转"><a href="#4-时域反转" class="headerlink" title="4. 时域反转"></a>4. 时域反转</h3><h3 id="5-共轭对成性"><a href="#5-共轭对成性" class="headerlink" title="5.共轭对成性"></a>5.共轭对成性</h3><h3 id="6-差分与求和"><a href="#6-差分与求和" class="headerlink" title="6.差分与求和"></a>6.差分与求和</h3><h3 id="7-时域内插"><a href="#7-时域内插" class="headerlink" title="7. 时域内插"></a>7. 时域内插</h3><h3 id="8-频域微分"><a href="#8-频域微分" class="headerlink" title="8.频域微分"></a>8.频域微分</h3><h3 id="9-Parseva"><a href="#9-Parseva" class="headerlink" title="9.Parseva"></a>9.Parseva</h3><h1 id="信号与系统的时域和频域特性"><a href="#信号与系统的时域和频域特性" class="headerlink" title="信号与系统的时域和频域特性"></a>信号与系统的时域和频域特性</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;开始复习信号与系统，按照章节来复习，记录重点，并且会总结题型。&lt;/p&gt;
&lt;h1 id=&quot;Chapter-1&quot;&gt;&lt;a href=&quot;#Chapter-1&quot; class=&quot;headerlink&quot; title=&quot;Chapter 1&quot;&gt;&lt;/a&gt;Chapter 1&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="信号与系统" scheme="http://example.com/categories/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="信号与系统" scheme="http://example.com/tags/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>demo1</title>
    <link href="http://example.com/2020/12/02/demo1/"/>
    <id>http://example.com/2020/12/02/demo1/</id>
    <published>2020-12-01T17:33:35.000Z</published>
    <updated>2020-12-01T17:34:42.982Z</updated>
    
    <content type="html"><![CDATA[<hr><p>(FREE) Old Town</p><p>世俗蒙蔽了眼睛 无法分辨真假</p><p>有人不懂 有人确实在装疯卖傻</p><p>何必再去相信 那些他人的言语</p><p>bitch 太多 我不是傻白甜别来占我便宜</p><p>我嫌弃的不是你 是这个社会</p><p>所谓的君子太多 让我不禁撤退</p><p>那些表面一套 背后一套的人让我作呕</p><p>我要化身为魔 我偏要和社会作对；</p><p>招数太多 没有包袱 脸皮都不要</p><p>耍着阴招 达到新高 穿肠的毒药</p><p>那些虚假的fake 得到了虚假的位置</p><p>看不清楚几两几斤 尽然觉得自己对</p><p>bitch 是否还能看得见</p><p>bitch 不然继续犯着贱</p><p>bitch 还在对我放着电~</p><p>mother fxxker,早就看得厌</p><p>马戏团 跳梁小丑 笑着 跳着舞</p><p>太一般  弱的loser 叫了 笑着哭</p><p>太极端 专研 停止 不止三年 形势</p><p>早就被拉开差距 实力悬殊</p><p>射手专注 化身艾希 点了战争热诚</p><p>实力过人 提起加特林 嘟嘟嘟嘟嘟</p><p>地不停地输出 刺痛你的神经让你疼 </p><p>成王败寇 成为夺冠热门</p><p>J to the N 开始代表时代的声音</p><p>从地狱到天堂 180的高度</p><p>J to the N 开始代表时代的声音</p><p>从地狱到天堂 十八般的招数</p><p>bitch 是否还能看得见</p><p>bitch 不然继续在这里犯着贱</p><p>bitch 还在对我放着电</p><p>mother fxxker,早就看得厌    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;(FREE) Old Town&lt;/p&gt;
&lt;p&gt;世俗蒙蔽了眼睛 无法分辨真假&lt;/p&gt;
&lt;p&gt;有人不懂 有人确实在装疯卖傻&lt;/p&gt;
&lt;p&gt;何必再去相信 那些他人的言语&lt;/p&gt;
&lt;p&gt;bitch 太多 我不是傻白甜别来占我便宜&lt;/p&gt;
&lt;p&gt;我嫌弃的不是你 是这个社会&lt;</summary>
      
    
    
    
    <category term="饶舌" scheme="http://example.com/categories/%E9%A5%B6%E8%88%8C/"/>
    
    
    <category term="饶舌" scheme="http://example.com/tags/%E9%A5%B6%E8%88%8C/"/>
    
  </entry>
  
  <entry>
    <title>离散对数问题</title>
    <link href="http://example.com/2020/12/02/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/12/02/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2020-12-01T17:01:34.000Z</published>
    <updated>2020-12-01T17:31:56.317Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><p>离散对数问题可以表达成一下形式：</p><script type="math/tex; mode=display">\beta\in<\alpha>,找出唯一指数a，0\leq a\leq n-1,使得\alpha ^a=\beta</script><h3 id="Shanks算法"><a href="#Shanks算法" class="headerlink" title="Shanks算法"></a>Shanks算法</h3><h3 id="Pollard-rho-算法"><a href="#Pollard-rho-算法" class="headerlink" title="Pollard $\rho$算法"></a>Pollard $\rho$算法</h3><h3 id="Pohlig-Hellman算法"><a href="#Pohlig-Hellman算法" class="headerlink" title="Pohlig-Hellman算法"></a>Pohlig-Hellman算法</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;离散对数问题可以表达成一下形式：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\beta\in&lt;\alpha&gt;,找出唯一指数a，0\leq a\leq n-1,使得\alpha ^a=\beta&lt;/scr</summary>
      
    
    
    
    <category term="密码学" scheme="http://example.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="http://example.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>数值积分</title>
    <link href="http://example.com/2020/11/30/%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86/"/>
    <id>http://example.com/2020/11/30/%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86/</id>
    <published>2020-11-30T15:54:33.000Z</published>
    <updated>2020-12-01T14:23:19.153Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="数值积分"><a href="#数值积分" class="headerlink" title="数值积分"></a>数值积分</h1><p>当遇到无法解析求解的定积分，可以使用数值积分来计算</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>从公式：</p><script type="math/tex; mode=display">I=\int_a^bf(x)dx=(b-a)f(\xi)</script><p>开始，可以看到$f(\xi)$平均高度是个关键点，从这里着手，提供一种近似算法将其取代</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>取适当的节点$x_k$并用$f(x_k)$的加权平均值座作为$f(\xi)$的近似值</p><script type="math/tex; mode=display">I=\int_a^bf(x)dx\approx \sum_{k=0}^nA_kf(x_k)=I_n</script><p>$x_k$：求积节点</p><p>$A_k$：求积系数，$A_k$仅与$X_k$有关</p><p>$R(f)=I-I_n$  ：求积余项</p><h4 id="m次代数精度"><a href="#m次代数精度" class="headerlink" title="m次代数精度"></a>m次代数精度</h4><p>精度准确即是$\int_a^bf(x)dx$ 与 $\sum_{k=0}^nA_kf(x_k)$相等，代数精度越高，求积公式则越好</p><ol><li>对所有次数不超过m的多项式都精确成立</li><li>至少对一个m+1次多项式不精确成立</li></ol><h5 id="充要条件"><a href="#充要条件" class="headerlink" title="充要条件"></a>充要条件</h5><p>求积公式具有m次代数精度充要条件是该求积公式：</p><ol><li>对$x^k(k=0,1,2,…,m)$精确成立</li><li>对$x^{m+1}$不精确成立</li></ol><h3 id="插值型积分"><a href="#插值型积分" class="headerlink" title="插值型积分"></a>插值型积分</h3><p>插值型积分也就是能够确定$A_k$的值，实际上应该是任意一种不同类型的数值积分都是可以确定$A_k$的值的，$A_k$的值将在下面给出推导：</p><ol><li>先取n+1个在$[a,b]$的节点$x_i$,则可以求得$f(x)$的拉格朗日插值多项式</li></ol><script type="math/tex; mode=display">L_n(X)=\sum_{k=0}^nf(x_k)l_k(x)   ,f(x)\approx L_n(x)</script><ol><li><script type="math/tex; mode=display">I=\int_a^bf(x)dx=\int_a^b\sum_{k=0}^nf(x_k)l_k(x)=\sum_{k=0}^nA_kf(x_k)</script></li><li><p>所以有，</p></li></ol><script type="math/tex; mode=display">A_k=\int_a^bl_k(x)</script><p>还有一些$R(f)$,插值型求积公式充要条件，收敛性，稳定性就不总结了，应该不会考</p><h4 id="牛顿-科特斯公式"><a href="#牛顿-科特斯公式" class="headerlink" title="牛顿-科特斯公式"></a>牛顿-科特斯公式</h4><p>即是插值型积分，特别的就是取的$x_k$的值是取将$[a,b]$划为n等分取的,特斯拉系数是比较好求的多项式积分，并且与[a,b]无关，再者有个特斯拉系数表表格</p><script type="math/tex; mode=display">h=\frac{b-a}{n},x_k=a+kh</script><script type="math/tex; mode=display">A_k=\int_a^bl_k(x)dx=\int_a^b\prod_{j\neq k}\frac{x-x_j}{x_k-x_j}dx,(k=0,1...,n)</script><p>科特斯系数$C_k^{(n)}$:</p><script type="math/tex; mode=display">C_k^{(n)}=\frac{(-1)^{n-k}}{nk!(n-k)!}\int_0^n \prod_{j\neq k}^n(t-j)dt,(k=0,1...,n)</script><script type="math/tex; mode=display">A_k=(b-a)C_k^{(n)}</script><script type="math/tex; mode=display">I=\sum_{k=0}^nA_kf(x_k)</script><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201201213532822.png" alt="image-20201201213532822" style="zoom: 67%;" /></p><h5 id="复合Simpson公式"><a href="#复合Simpson公式" class="headerlink" title="复合Simpson公式"></a>复合Simpson公式</h5><script type="math/tex; mode=display">h=(b-a)/n</script><script type="math/tex; mode=display">\int_a^bf(x)dx=\frac{h}{6}[f(a)+4*\sum_{k=0}^{n-1}f(x_k+\frac{h}{2})+2*\sum_{k=1}^{n-1}f(x_k)+f(b)]</script>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;数值积分&quot;&gt;&lt;a href=&quot;#数值积分&quot; class=&quot;headerlink&quot; title=&quot;数值积分&quot;&gt;&lt;/a&gt;数值积分&lt;/h1&gt;&lt;p&gt;当遇到无法解析求解的定积分，可以使用数值积分来计算&lt;/p&gt;
&lt;h3 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; c</summary>
      
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="数值计算" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>插值</title>
    <link href="http://example.com/2020/11/29/%E6%8F%92%E5%80%BC/"/>
    <id>http://example.com/2020/11/29/%E6%8F%92%E5%80%BC/</id>
    <published>2020-11-28T17:30:30.000Z</published>
    <updated>2020-12-01T09:44:18.095Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数值计算学习中有学到插值，总结一下插值，和拟合的区别是拟合是找到总体上来说离给出的已知点最近的曲线，插值则是求得的曲线是满足都经过已知点的，就很牛逼。</p><h1 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h1><h3 id="一些定义以及性质"><a href="#一些定义以及性质" class="headerlink" title="一些定义以及性质"></a>一些定义以及性质</h3><ol><li><p>插值函数g(x):</p><script type="math/tex; mode=display">g(x_i)=f(x_i),i=0,1,....,n</script></li><li><p>插值节点：上面的{$x_i$}</p></li><li><p>定理：n+1个$x_i$不相同节点的n次插值多项式存在且唯一</p></li></ol><h3 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h3><h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><p>朗日朗日插值它的插值多项式在非它的插值节点$x_i$的$l(x_j)$都取0</p><p>缺点：节点变化的时候拉格朗日插值需要重新构造</p><h5 id="插值函数"><a href="#插值函数" class="headerlink" title="插值函数"></a>插值函数</h5><script type="math/tex; mode=display">g(x)=f(x_0)l_0(x)+f(x_1)l_1(x)+...+f(x_n)l_n(x)</script><p>​                                                               #$l_i(x)$是次数不超过n次的多项式</p><script type="math/tex; mode=display">对于g(x_i),l_i(x)=1，l_j(x)=0,j\neq i</script><p>Lagrange基函数：</p><script type="math/tex; mode=display">l_i(x)=\frac{(x-x_0)(x-x_{i-1})(x-x_{i+1})(x-x_n)}{(x_i-x_0)(x_i-x_{i-1})(x_i-x_{i+1})(x_i-x_n)}</script><p>Lagrange插值：</p><script type="math/tex; mode=display">L_n(x)=f(x_0)l_0(x)+f(x_1)l_1(x)+...+f(x_n)l)n(x)</script><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201129212906862.png" alt="image-20201129212906862"></p><h4 id="分段拉格朗日插值"><a href="#分段拉格朗日插值" class="headerlink" title="分段拉格朗日插值"></a>分段拉格朗日插值</h4><h5 id="分段线性拉格朗日插值"><a href="#分段线性拉格朗日插值" class="headerlink" title="分段线性拉格朗日插值"></a>分段线性拉格朗日插值</h5><p>差不多就是两两相邻的节点形成一个拉格朗日插值，x在哪个区间就使用哪个拉格朗日插值</p><script type="math/tex; mode=display">L^{(k)}(x)=y_kl_k(x)+y_{k+1}l_{k+1}(x),k=0,1,2...n-1</script><script type="math/tex; mode=display">=y_k\frac{x-x_{k+1}}{x_k-x_{k+1}}+y_{k+1}\frac{x-x_{k}}{x_{x+1}-x_{k}}</script><p>L(x)=$L^{(k)}(x)$                  ，        当$x_k\leqslant x&lt;x_{k+1}$</p><p>内插：插在里面 ………………</p><p>外插：$x^*\notin[x_0,x_n]$</p><h5 id="分段二次插值"><a href="#分段二次插值" class="headerlink" title="分段二次插值"></a>分段二次插值</h5><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201129230549180.png" alt="image-20201129230549180" style="zoom:80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;数值计算学习中有学到插值，总结一下插值，和拟合的区别是拟合是找到总体上来说离给出的已知点最近的曲线，插值则是求得的曲线是满足都经过已知点的，就很牛逼。&lt;/p&gt;
&lt;h1 id=&quot;插值&quot;&gt;&lt;a href=&quot;#插值&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="数值计算" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>python下函数与图像的显示</title>
    <link href="http://example.com/2020/11/28/python%E4%B8%8B%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%BE%E5%83%8F%E7%9A%84%E6%98%BE%E7%A4%BA/"/>
    <id>http://example.com/2020/11/28/python%E4%B8%8B%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%BE%E5%83%8F%E7%9A%84%E6%98%BE%E7%A4%BA/</id>
    <published>2020-11-27T16:57:10.000Z</published>
    <updated>2020-12-01T09:46:46.404Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数值计算里为了显示函数的图像，总结一下python里相关的知识。</p><hr><h4 id="调库"><a href="#调库" class="headerlink" title="调库"></a>调库</h4><p>matplotlib.pyplot和MATLAB很相似，之中各种状态通过函数调用保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h5 id="np-arange"><a href="#np-arange" class="headerlink" title="np.arange()"></a>np.arange()</h5><p>np.arange(a,b,step) #step是步长</p><p>函数返回一个有终点和起点的固定步长的排列，如[1,2,3,4,5]，起点是1，终点是6，步长为1。</p><h5 id="plt-plot"><a href="#plt-plot" class="headerlink" title="plt.plot()"></a>plt.plot()</h5><p>plt.plot(x,y,format_string,**kwargs)</p><p>函数用来确定x,y，以及图像的一些颜色之类的特征</p><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">X轴数据，列表或数组，可选</td></tr><tr><td style="text-align:center"><code>y</code></td><td style="text-align:center">Y轴数据，列表或数组</td></tr><tr><td style="text-align:center"><code>format_string</code></td><td style="text-align:center">控制曲线的格式字符串，可选</td></tr><tr><td style="text-align:center"><code>**kwargs</code></td><td style="text-align:center">第二组或更多(x,y,format_string)，可画多条曲线</td></tr></tbody></table></div><p>format_string 由颜色字符、风格字符、标记字符组成</p><ul><li><p>颜色字符</p><ol><li><p><code>&#39;b&#39;</code> 蓝色  <code>&#39;m&#39;</code> 洋红色 magenta</p></li><li><p><code>&#39;g&#39;</code> 绿色   <code>&#39;y&#39;</code>  黄色</p></li><li><p><code>&#39;r&#39;</code> 红色   <code>&#39;k&#39;</code> 黑色</p></li><li><p><code>&#39;w&#39;</code> 白色      <code>&#39;c&#39;</code> 青绿色 cyan</p></li><li><p><code>&#39;#008000&#39;</code> RGB某颜色 <code>&#39;0.8&#39;</code> 灰度值字符串</p></li><li><p>多条曲线不指定颜色时，会自动选择不同颜色</p></li></ol></li><li><p>风格字符</p><ol><li><p><code>&#39;‐&#39;</code> 实线</p></li><li><p><code>&#39;‐‐&#39;</code> 破折线</p></li><li><p><code>&#39;‐.&#39;</code> 点划线</p></li><li><p><code>&#39;:&#39;</code> 虚线</p></li><li><p><code>&#39;&#39; &#39; &#39;</code> 无线条</p></li></ol></li><li><p>标记字符</p><ol><li><p><code>&#39;.&#39;</code> 点标记</p></li><li><p><code>&#39;,&#39;</code> 像素标记(极小点)</p></li><li><p><code>&#39;o&#39;</code> 实心圈标记</p></li><li><p><code>&#39;v&#39;</code> 倒三角标记</p></li><li><p><code>&#39;^&#39;</code> 上三角标记</p></li><li><p><code>&#39;&gt;&#39;</code> 右三角标记</p></li><li><p><code>&#39;0&lt;&#39;</code> 左三角标记…等等</p></li></ol></li></ul><h5 id="plt-show"><a href="#plt-show" class="headerlink" title="plt.show()"></a>plt.show()</h5><p>显示图像</p><h5 id="plt-figure"><a href="#plt-figure" class="headerlink" title="plt.figure()"></a>plt.figure()</h5><p>要显示的图像的名字</p><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(<span class="string">&quot;my_pic&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="plt-subplot"><a href="#plt-subplot" class="headerlink" title="plt.subplot()"></a>plt.subplot()</h5><p>把多张图显示到一个显示界面上。</p><p>plt.subplot(row,col,code)#生成row行，col列，code是编号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">t=np.arange(<span class="number">0.0</span>,<span class="number">2.0</span>,<span class="number">0.1</span>)</span><br><span class="line">s=np.sin(t*np.pi)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">#要生成两行两列，这是第一个图plt.subplot(&#x27;行&#x27;,&#x27;列&#x27;,&#x27;编号&#x27;)</span></span><br><span class="line">plt.plot(t,s,<span class="string">&#x27;b--&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y1&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>) <span class="comment">#两行两列,这是第二个图</span></span><br><span class="line">plt.plot(<span class="number">2</span>*t,s,<span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y2&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">#两行两列,这是第三个图</span></span><br><span class="line">plt.plot(<span class="number">3</span>*t,s,<span class="string">&#x27;m--&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)<span class="comment">#两行两列,这是第四个图</span></span><br><span class="line">plt.plot(<span class="number">4</span>*t,s,<span class="string">&#x27;k--&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201128014751120.png" alt="image-20201128014751120" style="zoom:50%;" /></p><h5 id="y-cos-x-图像"><a href="#y-cos-x-图像" class="headerlink" title="y=cos(x)图像"></a>y=cos(x)图像</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x=np.arange(<span class="number">-5.0</span>,<span class="number">5.0</span>,<span class="number">0.01</span>)</span><br><span class="line">y1=np.cos(x)</span><br><span class="line">print(y1.shape[<span class="number">0</span>])</span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(x,y1,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;数值计算里为了显示函数的图像，总结一下python里相关的知识。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;调库&quot;&gt;&lt;a href=&quot;#调库&quot; class=&quot;headerlink&quot; title=&quot;调库&quot;&gt;&lt;/a&gt;调库&lt;/h4&gt;&lt;p&gt;matplotlib.pyplot和MA</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>拟合</title>
    <link href="http://example.com/2020/11/26/%E6%8B%9F%E5%90%88/"/>
    <id>http://example.com/2020/11/26/%E6%8B%9F%E5%90%88/</id>
    <published>2020-11-26T09:09:47.000Z</published>
    <updated>2020-12-01T09:47:27.542Z</updated>
    
    <content type="html"><![CDATA[<hr><p>拟合，插值，逼近是数学分析的三大基础工具，在这里总结一下拟合</p><p>拟合：已知点列，整体靠近它们</p><p>插值：已知点列并且完全经过点列</p><p>逼近：已知曲线，或者点列，通过逼近使得构造的函数无限靠近它们</p><h2 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h2><h3 id="拟合定义"><a href="#拟合定义" class="headerlink" title="拟合定义"></a>拟合定义</h3><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201126171847274.png" alt="image-20201126171847274"></p><h3 id="最小二乘问题"><a href="#最小二乘问题" class="headerlink" title="最小二乘问题"></a>最小二乘问题</h3><p>最小二乘即f(X)-g(X)的范数是2-范数，这种问题就是最小二乘问题。</p><p>所以，即找g(x)使得</p><script type="math/tex; mode=display">||f(x)-g(x)||_2=\sqrt{\sum_{i=0}^n(f(x_i)-g(x_i))^2}</script><p>取到最小值，记为评价函数$L(a_1,a_2…..a_n)$</p><p>欲取得评价函数最小值，则要对每个变量$a_i$的偏导等于零，即：</p><script type="math/tex; mode=display">\frac{\partial L}{\partial a_i}=0 ,i\in(1,n)</script><ol><li>线性拟合</li></ol><script type="math/tex; mode=display">f(x)=ax+b</script><ol><li><p>低次多项式拟合</p><script type="math/tex; mode=display">f(x)=ax^3+bx^2+cx+d</script></li><li><p>指数拟合</p></li></ol><script type="math/tex; mode=display">f(x)=e^{ax+b}</script><script type="math/tex; mode=display">\downarrow</script><script type="math/tex; mode=display">\ln{f(x)}=ax+b</script><p>将$\ln{f(x)}$记为y,则变成了线性拟合y=ax+b</p><h4 id="线性角度的最小二乘"><a href="#线性角度的最小二乘" class="headerlink" title="线性角度的最小二乘"></a>线性角度的最小二乘</h4><p>从微积分的视角来看，最小二乘法相当于求解约等方程组，那么最小二乘法的线性代数视角又是什么呢？</p><p>　　先来看向量的投影：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPnlp40wlWiaF6MX6SxTLDDALmlC9QeZtRGibMgoiaiaGamtibGmd9QiaHVV6A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　b,p,e 是3个向量，其中p是b 在平面上的投影， e是b和p 的误差向量，e=b-p 。平面可以看作二维向量张成的向量空间，p 在该空间上。将向量投影到向量空间有什么意义呢？这要从方程 Ax=b 说起。</p><p>　　小明根据测量结果得到了一个方程组，并将它进一步化简为矩阵的形式：</p><p><strong><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPdyBcocsPVXL7cicHAnr7UJdNSUM4djqdsU83ibSqEhTp37xJTBThGQicw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></strong></p><p>　　对于小明的数据来说， Ax=b无解，实际上大多数这种类型的方程都无解。A的列空间的含义是方程组有解时b 的取值空间，当b 不在 A的列空间时，方程无解。具体来说，当A 是行数大于列数的长方矩阵时，意味着方程组中的方程数大于未知数的个数，此时肯定无解。</p><p>　　虽然方程无解，但我们还是希望能够运算下去，这就需要换个思路——不追求可解，转而寻找最能接近问题的解。对于无解方程Ax=b 来说，Ax 总是在列空间上（因为列空间本来就是由 Ax确定的，和b 无关），而 b就不一定了，所以需要微调 ，将p 调整至列空间中最接近它的一个，此时Ax=b 变成了：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPuCiazYlBdVFVViaChicAibEFyiaCgXHPy0rNRDDC5XtFA8Sv3zYjSkT3noQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　p就是 b在 A的列空间上的投影， x上加一个小帽子表示x 的估计值。当然，因为方程无解，所以本来也不可能有 Ax=b。此时问题转换为寻找最好的估计值 ，使它尽可能满足原方程：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPz4vxUcGPRefVxjyrhttFQujAZrh3griatq4iaTgBgvV5Ie3SmveOz0Pw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　在上图中，A的秩是2，平面表示A的列空间，平面上的向量有无数个，其中最接近b 的当然是b 在平面上的投影，因为只有在这时 b-p 才能产生模最小的误差向量。</p><p>　　如何求得估计值呢？</p><p>　　在小明的测量数据中，A的列空间是一个超平面，A的两个列向量都在这个超平面上，b和p 的误差向量e垂直于超平面，因此e也垂直于超平面上的所有向量，这意味着e 和 A的两个列向量的点积为0。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPia1KCT5K8lr8RjPxtDhqMic956cLdwVb4HKibnVObWJdAsKCl0pwAicFGA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　将二者归纳为一个矩阵方程：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPrDKeQWNCuWDgdvT2kAoTqYuv5zbQPyHvYKPc2ELgBsvCZ8ODgG5Z5g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　矩阵方程已经去掉了关于 的信息，通过该方程可进一步求得估计值：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAP7bYbzPdedicTubQN92WosnDicchkzV5KTG8PYtjGNmIIBibXedZ6RTDIw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　这就是最终结果了，它是由矩阵方程推导而来的，所以这个结果叫做“正规方程”。</p><p>　　还有一种更简单的方式可以得到正规方程。Ax=b无解的原因是因为 A 是一个长方矩阵，只要在等式两侧同时乘以 AT，就可以把长方矩阵转换成方阵，进而求解。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPzictPfPWnG6TfoqBOW8b9oYQV0V3riccBfcIn7qFFuLwDMzoJF94kpTQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h5 id="多项式的非线性拟合y-cosx"><a href="#多项式的非线性拟合y-cosx" class="headerlink" title="多项式的非线性拟合y=cosx"></a>多项式的非线性拟合y=cosx</h5><p>求出A，b,然后套公式就行了：</p><script type="math/tex; mode=display">x=(A^TA)^{-1}A^Tb</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_squres</span>(<span class="params">n</span>):</span></span><br><span class="line">    b=np.zeros(<span class="number">9</span>)<span class="comment">#测试数据为8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        b[i]=cos(-pi+(<span class="number">6</span>/<span class="number">8</span>)*i)</span><br><span class="line">    A=np.zeros([<span class="number">9</span>,n+<span class="number">1</span>])</span><br><span class="line">    <span class="comment">#n次方,则有n+1个c_i</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">            A[i][j]=(-pi+(<span class="number">6</span>/<span class="number">8</span>)*i)**j</span><br><span class="line">    <span class="comment">#x=np.zeros(n+1)</span></span><br><span class="line">    x=np.dot(np.linalg.inv((np.dot(A.T,A))),np.dot(A.T,b))</span><br><span class="line">    print(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201129011908811.png" alt="image-20201129011908811" style="zoom:50%;" /></p><h1 id="一共有5个曲线，蓝色和绿色分别是n-2和n-3的时候，红色，黑色，白色分别是n-4-n-6-y-cosx的时候，可以看到n-2-3时候与y-cosx有一定差别-而用n-4-6的多项式拟合y-cosx与原图基本是重合的。"><a href="#一共有5个曲线，蓝色和绿色分别是n-2和n-3的时候，红色，黑色，白色分别是n-4-n-6-y-cosx的时候，可以看到n-2-3时候与y-cosx有一定差别-而用n-4-6的多项式拟合y-cosx与原图基本是重合的。" class="headerlink" title="一共有5个曲线，蓝色和绿色分别是n=2和n=3的时候，红色，黑色，白色分别是n=4,n=6,y=cosx的时候，可以看到n=2,3时候与y=cosx有一定差别,而用n=4,6的多项式拟合y=cosx与原图基本是重合的。"></a>一共有5个曲线，蓝色和绿色分别是n=2和n=3的时候，红色，黑色，白色分别是n=4,n=6,y=cosx的时候，可以看到n=2,3时候与y=cosx有一定差别,而用n=4,6的多项式拟合y=cosx与原图基本是重合的。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;拟合，插值，逼近是数学分析的三大基础工具，在这里总结一下拟合&lt;/p&gt;
&lt;p&gt;拟合：已知点列，整体靠近它们&lt;/p&gt;
&lt;p&gt;插值：已知点列并且完全经过点列&lt;/p&gt;
&lt;p&gt;逼近：已知曲线，或者点列，通过逼近使得构造的函数无限靠近它们&lt;/p&gt;
&lt;h2 id=&quot;拟合&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="数值计算" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://example.com/2020/11/24/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2020/11/24/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-11-24T12:53:16.000Z</published>
    <updated>2020-12-01T09:47:23.053Z</updated>
    
    <content type="html"><![CDATA[<hr><p>复习数据结构，然后总结一下数据结构的排序算法，并再用python全都实现一次。</p><hr><p><img src="https://pic2.zhimg.com/80/v2-2586b672d2b78f583c29f6a6cfa10545_1440w.jpg" alt="img"  /></p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h3 id="比较排序"><a href="#比较排序" class="headerlink" title="比较排序"></a>比较排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序是最基本的排序算法，比较相邻的元素，将大（小）的放到后面。每一躺循环，将最大（最小）的交换到最后面。</p><h5 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>第一躺循环，从arr[0]到arr[N-1]，两两比较，若arr[x]&gt;arr[x+1]，则进行交换，从而使得最后在arr[N-1]的是最大的数</li><li>下一趟循环，则变成从arr[0]到arr[N-2]</li><li>重复直到完成最后一趟循环即arr[0]到arr[1]的比较</li></ol><h5 id="算法评价"><a href="#算法评价" class="headerlink" title="算法评价"></a>算法评价</h5><p>一共进行了N-1次循环，确定了N-1次要确定的最大数</p><p>稳定，平均时间复杂度为$o(n^2)$</p><h5 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bubble_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    length=<span class="built_in">len</span>(arr)</span><br><span class="line">    j=length<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(j):</span><br><span class="line">            <span class="keyword">if</span> arr[x]&gt;arr[x+<span class="number">1</span>]:</span><br><span class="line">                temp=arr[x]</span><br><span class="line">                arr[x]=arr[x+<span class="number">1</span>]</span><br><span class="line">                arr[x+<span class="number">1</span>]=temp</span><br><span class="line">        j-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>顾名思义，插入排序(Insertion Sort)就是将一个元素插入到已经排序好的序列中，这里是arr[x]插入到已经排序好的(arr[0]~arr[x-1])中</p><h5 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>index左边是有序的，右边是待插入的，index是从1开始，N-1结束</li><li>两种选择：</li></ol><ul><li>从右往左一个个两两交换，直到遇到比arr[index]小的数停止</li><li>把arr[index]用temp保存，找到要插入的位置insert_index，即是最后一个比temp大的数的位置，将arr[insert_index]到arr[index-1]全都往后移一位，然后再插入</li></ul><h5 id="算法代码-1"><a href="#算法代码-1" class="headerlink" title="算法代码"></a>算法代码</h5><ol><li>第一种</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Insertion_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[j<span class="number">-1</span>]:</span><br><span class="line">                temp=arr[j]</span><br><span class="line">                arr[j]=arr[j<span class="number">-1</span>]</span><br><span class="line">                arr[j<span class="number">-1</span>]=temp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Insertion_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">        temp=arr[i]</span><br><span class="line">        j=i<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span> <span class="keyword">and</span> arr[j]&gt;temp:</span><br><span class="line">            arr[j+<span class="number">1</span>]=arr[j]</span><br><span class="line">            j=j<span class="number">-1</span></span><br><span class="line">        arr[j+<span class="number">1</span>]=temp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure></li></ol><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序就是每次在待选择的序列里选择一个最小的到最前面，感觉比前面两种垃圾一点。</p><h5 id="算法流程-2"><a href="#算法流程-2" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>找到列表中最小的元素将其与列表第一个元素交换</li><li>其次，将剩下的待排序的元素中找到最小的元素将其与第二个元素交换</li><li>重复，完成N-1躺排序</li></ol><p>时间复杂度：$o(n^2)$</p><h5 id="算法代码-2"><a href="#算法代码-2" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Selection_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        min_index=i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[min_index]:</span><br><span class="line">                min_index=j</span><br><span class="line">        <span class="keyword">if</span> min_index!=i:</span><br><span class="line">            temp=arr[i]</span><br><span class="line">            arr[i]=arr[min_index]</span><br><span class="line">            arr[min_index]=temp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序有动态规划，递归的思想，将大的慢慢地分成小的，即分治法，然后还有挖坑填数。</p><p>时间复杂度</p><ol><li>最好：o(nlogn)</li><li>最坏：$o(n^2)$</li></ol><h5 id="算法流程-3"><a href="#算法流程-3" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>把数组的第一个数当作基准线</li><li>通过一躺排序将数据分成两部分，左边是比基准线pivot小的，有部分是比基准线大的。（这里用的是挖坑法）下面介绍</li><li>递归，左边在分成两部分，右边也分成两部分一直递归成一个数就是完成了排序</li></ol><h5 id="挖坑法（如下例子）"><a href="#挖坑法（如下例子）" class="headerlink" title="挖坑法（如下例子）"></a>挖坑法（如下例子）</h5><p>表格中<strong>红色</strong>的字体为需要填的坑，<strong>绿色</strong>的字体为已经移动过的数据。</p><p><img src="https://pic3.zhimg.com/80/v2-956317f6dd542f4af77e97a7df554c9e_1440w.jpg" alt="img"></p><p>1.刚开始，i 和 j 分别指向数组头和数组尾，即 i = 0，j = 9，基准数取第一个数，即index = array[i] = array[0] = 23。</p><p>此时，array[0]的值已经存在了index，因此array[0]的位置就好像被挖了个坑，可以填充一个数。</p><p>因此，我们从位置 j 开始向左寻找比index小的数，当 j = 8 时，符合条件，于是我们将array[8]的值填到array[0] ，即将9填入array[0]，并将 i 向右移动一个位置，即 i++。从位置 j 向左寻找比index小的数，并在寻找到后填入坑中，用代码表示如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; array[j] &gt;= index) &#123; <span class="comment">// 向左寻找第一个小于index的数</span></span><br><span class="line">    j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">    array[i++] = array[j]; <span class="comment">// 将array[j]填入array[i]，并将i向右移动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，array数组如下图。</p><p><img src="https://pic3.zhimg.com/80/v2-e9cc5a1482c5c92fef056109ae4c77ba_1440w.jpg" alt="img"></p><p>2.因为array[0]的坑被array[8]填了，于是array[8]的位置又成了一个新的坑。此时我们从位置 i 开始向右寻找比index大的数，当 i = 2 时符合条件，于是我们将array[2]的值填到array[8] ，即将37填入array[8]，并将 j 向左移动一个位置，即 j—。从位置 i 向右寻找比index大的数，并在寻找到后填入坑中，用代码表示如下（跟上面相似）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] &lt; index) &#123;<span class="comment">// 向右寻找第一个大于index的数</span></span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">    array[j--] = array[i]; <span class="comment">// 将array[i]填入array[j]，并将j向左移动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，array数组如下图。</p><p><img src="https://pic2.zhimg.com/80/v2-a1e2a86ba05d0386d64fe80269bb8e0d_1440w.jpg" alt="img"></p><p>3.同样的，array[8]的坑被array[2]填了，于是array[2]的位置又成了一个新的坑。此时我们从位置 j 开始向左寻找比index小的数，当 j = 5 时符合条件，于是我们将array[5]的值填到array[2] ，即将21填入array[2]，并将 i 向右移动一个位置，即 i++，此时array数组如下图。</p><p><img src="https://pic4.zhimg.com/80/v2-cd105e804f80f8627724d9391a1d95bf_1440w.jpg" alt="img"></p><p>4.同样的，array[2]的坑被array[5]填了，于是array[5]的位置又成了一个新的坑。此时我们从位置 i 开始向右寻找比index大的数，当 i = 3 时符合条件，于是我们将array[3]的值填到array[5] ，即将89填入array[5]，并将 j 向左移动一个位置，即 j—，此时array数组如下图。</p><p><img src="https://pic4.zhimg.com/80/v2-102a01c56f6ee964a82946812b814d57_1440w.jpg" alt="img"></p><p>5.同样的，array[5]的坑被array[3]填了，于是array[3]的位置又成了一个新的坑。此时我们从位置 j 开始向左寻找比index小的数，当 j = 4 时符合条件，于是我们将array[4]的值填到array[3] ，即将2填入array[3]，并将 i 向右移动一个位置，即 i++，此时array数组如下图。</p><p><img src="https://pic3.zhimg.com/80/v2-1891cb980464e954422d28b4a4732e16_1440w.jpg" alt="img"></p><p>6.此时，我们发现 i = j，结束遍历，并将index填入array[4]，即将23填入array[4]，此时array数组如下图。此时，array[4]左边的数据全比array[4]小，而array[4]右边的数据全比array[4]大。</p><p><img src="https://pic2.zhimg.com/80/v2-e145dc8be04dcb3f7963057927322839_1440w.jpg" alt="img"></p><p>7.接下去，我们只需要对array[4]两边的数据分别在进行上面的操作即可（分治法），如下图。</p><p><img src="https://pic2.zhimg.com/80/v2-c6dfc70cfd7bfa13fe7bfbe07f41a81d_1440w.jpg" alt="img"></p><p>分治的代码可以写成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quickSort(array, low, i - <span class="number">1</span>); <span class="comment">// 递归调用，分治</span></span><br><span class="line">quickSort(array, i + <span class="number">1</span>, high);     <span class="comment">// 递归调用，分治</span></span><br></pre></td></tr></table></figure><h5 id="算法代码-3"><a href="#算法代码-3" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Quick_Sort</span>(<span class="params">arr,first,last</span>):</span></span><br><span class="line">    <span class="keyword">if</span> first&gt;=last:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    pivot=arr[first]</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="comment">#count为0的时候就是从右往左选比temp小的数</span></span><br><span class="line">    <span class="comment">#count为1的时候就是从左往右选比temp大的数</span></span><br><span class="line">    i=first</span><br><span class="line">    j=last<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> i!=j:</span><br><span class="line">        <span class="keyword">if</span> count==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;pivot:</span><br><span class="line">                arr[i]=arr[j]</span><br><span class="line">                count=<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> arr[i]&gt;=pivot:</span><br><span class="line">                arr[j]=arr[i]</span><br><span class="line">                count=<span class="number">0</span></span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">    arr[i]=pivot</span><br><span class="line">    Quick_Sort(arr,first,i)</span><br><span class="line">    Quick_Sort(arr,i+<span class="number">1</span>,last)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>归并排序的思想是分治法，将一个待排序的数组分成两半，不断地分直到数组中只有一个数，然后再返回去，从底向上的去排序</p><h5 id="算法流程-4"><a href="#算法流程-4" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>将一个数组一切为二分成两半</li><li>递归地切，结束条件是数组长度为1</li><li>底层的向上开始排序，方法为新建一个空数组temp，因为对于每一个数组切的一个组来说，它的两个子组其实都是已经排好序的了，所以只要比较两个子组的第一个数，一直将小的那个压进temp里即可</li></ol><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p><img src="https://img-blog.csdn.net/20180530172505241?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>当我们要排序这样一个数组的时候，归并排序法首先将这个数组分成一半。如图：</p><p><img src="https://img-blog.csdn.net/20180530172514606?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>然后想办法把左边的数组给排序，右边的数组给排序，之后呢再将它们归并起来。当然了当我们对左边的数组和右边的素组进行排序的时候，再分别将左边的数组和右边的数组分成一半，然后对每一个部分先排序，再归并。如图：</p><p><img src="https://img-blog.csdn.net/20180530172527805?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><strong>对于上面的每一个部分呢，我们依然是先将他们分半，再归并，如图：</strong></p><p><img src="https://img-blog.csdn.net/20180530172534847?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>分到一定细度的时候，每一个部分就只有一个元素了，那么我们此时不用排序，对他们进行一次简单的归并就好了。如图：</p><p><img src="https://img-blog.csdn.net/20180530172545305?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>归并到上一个层级之后继续归并，归并到更高的层级，如图：</p><p><img src="https://img-blog.csdn.net/20180530172551477?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>直至最后归并完成。</p><p><img src="https://img-blog.csdn.net/2018053017255916?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>只不过现在计算机中时间的效率要比空间的效率重要的多。无论是内存也好还是硬盘也好可以存储的数据越来越多，所以设计一个算法，时间复杂度是要优先考虑的。整体来讲我们要使用三个索引来在数组内进行追踪。</p><p><strong><em>\</em><img src="https://img-blog.csdn.net/20180530173456808?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">**</strong></p><p>蓝色的箭头表示最终选择的位置，而红色的箭头表示两个数组当前要比较的元素，比如当前是2与1比较，1比2小，所以1放到蓝色的箭头中，**蓝色的箭头后移，1的箭头后移。</p><p><img src="https://img-blog.csdn.net/20180530173627602?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>然后2与4比较，2比4小那么2到蓝色的箭头中，蓝色箭头后移，2后移，继续比较…….</p><p><strong><em>\</em><img src="https://img-blog.csdn.net/20180530173953848?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">**</strong></p><h5 id="算法代码-4"><a href="#算法代码-4" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ef Merge_Sort(arr):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a=Merge_Sort(arr[:<span class="built_in">int</span>(<span class="built_in">len</span>(arr)/<span class="number">2</span>)])</span><br><span class="line">        b=Merge_Sort(arr[<span class="built_in">int</span>(<span class="built_in">len</span>(arr)/<span class="number">2</span>):])</span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(a)!=<span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(b)!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">0</span>:</span><br><span class="line">            temp.append(b.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(b)==<span class="number">0</span>:</span><br><span class="line">            temp.append(a.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>]:</span><br><span class="line">                temp.append(a.pop(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp.append(b.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>希尔排序可以说是高级版的插入排序，还挺牛逼的，原理大概就是先将待排序的数组大致做一个排序，然后这个数组宏观上看起来就是顺序的，所以最后到最细致的插入排序的时候其实基本就不用怎么交换。</p><h5 id="算法流程-5"><a href="#算法流程-5" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>确定分组，取length为数组长度的一半，然后以arr[x],arr[x+length]为一组，并每一组进行插入排序</li><li>length减半，同样以arr[x],arr[x+length]……,arr[x+klength]为一组，每一组进行插入排序</li><li>循环，直到length=0循环停止</li></ol><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><p><img src="https://images2015.cnblogs.com/blog/1024555/201611/1024555-20161128110416068-1421707828.png" alt="img"></p><h5 id="算法代码-5"><a href="#算法代码-5" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Shell_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    length=<span class="built_in">int</span>((<span class="built_in">len</span>(arr))/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> length!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+length,<span class="built_in">len</span>(arr),length):</span><br><span class="line">                temp=arr[j]</span><br><span class="line">                x=j-length</span><br><span class="line">                <span class="keyword">while</span> x&gt;=<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> arr[x]&gt;temp:</span><br><span class="line">                        arr[x+length]=arr[x]</span><br><span class="line">                        x=x-length</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                arr[x+length]=temp</span><br><span class="line">        print(arr)</span><br><span class="line">        print(length)</span><br><span class="line">        length=<span class="built_in">int</span>(length/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;复习数据结构，然后总结一下数据结构的排序算法，并再用python全都实现一次。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-2586b672d2b78f583c29f6a6cfa10545_1440w.jp</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关于考研2</title>
    <link href="http://example.com/2020/11/24/%E5%85%B3%E4%BA%8E%E8%80%83%E7%A0%942/"/>
    <id>http://example.com/2020/11/24/%E5%85%B3%E4%BA%8E%E8%80%83%E7%A0%942/</id>
    <published>2020-11-24T05:16:33.000Z</published>
    <updated>2020-11-24T05:30:43.101Z</updated>
    
    <content type="html"><![CDATA[<hr><p>几天前的话，回了家一趟，和我姐姐聊了一下，我姐姐现在大四，还有一个月就要考研初试了，她和我讲了很多关于考研的事情，我基本也是确定了之后就是要考研了。</p><hr><p>剑指2021 12月份~</p><hr><h3 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h3><h5 id="寒假前"><a href="#寒假前" class="headerlink" title="寒假前"></a>寒假前</h5><ol><li>先确定好自己要考研的院校</li><li>那些要考的专业科目开始看，但不是刷题很深地看，就是过一下，总结到blog，然后再自己敲代码去实现</li><li>开始背单词？好久没有学习英语了</li><li>还有这学期地课也不要落下了，开始准备复习</li></ol><h5 id="寒假后"><a href="#寒假后" class="headerlink" title="寒假后"></a>寒假后</h5><p>按照那个时间表跟着规划去做题，刷题，听课！</p><p>感觉就是和高考差不都，一轮复习，又一轮复习的</p><hr><h4 id="考研科目"><a href="#考研科目" class="headerlink" title="考研科目"></a>考研科目</h4><h5 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h5><p>100分</p><h5 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h5><p>150分</p><h6 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h6><p>100分 </p><h6 id="专业课："><a href="#专业课：" class="headerlink" title="专业课："></a>专业课：</h6><p>150分</p><p>数据结构45分，计算机组成原理45分，操作系统35分，计算机网络25分；</p><p>试卷题型结构：单项选择题，80分（40小题，每小题2分）；综合题，70分；</p><hr><p>加油~愿韶华不负</p><p>​                                                                      JAYSON</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;几天前的话，回了家一趟，和我姐姐聊了一下，我姐姐现在大四，还有一个月就要考研初试了，她和我讲了很多关于考研的事情，我基本也是确定了之后就是要考研了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;剑指2021 12月份~&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;时间安排&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="未来方向" scheme="http://example.com/categories/%E6%9C%AA%E6%9D%A5%E6%96%B9%E5%90%91/"/>
    
    
    <category term="未来方向" scheme="http://example.com/tags/%E6%9C%AA%E6%9D%A5%E6%96%B9%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://example.com/2020/11/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://example.com/2020/11/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-11-23T16:45:26.000Z</published>
    <updated>2020-12-01T09:47:01.139Z</updated>
    
    <content type="html"><![CDATA[<hr><p>动态规划算法，一个感觉和递归很像的东西。</p><p>递归：自上到下，慢慢到底部，不会记录每个问题的结果，内存消耗相对小，但会冲股份计算相同的问题，耗时多。</p><p>动态规划：自下到上，会记录每一个问题的结果，内存消耗相对比较大，但不会计算相同的问题，时间消耗较小。</p><h4 id="动态规划解决问题的特点"><a href="#动态规划解决问题的特点" class="headerlink" title="动态规划解决问题的特点"></a>动态规划解决问题的特点</h4><ol><li>最优化：即一个问题的子问题的解也是最优的</li><li>无后效性：即一个状态与之后的决策无关，如找零钱问题amount[5]与amount[5+x]无关</li><li>有重叠子问题：子问题之间不是独立的，可能子问题之间存在子问题调用关系</li></ol><p>tips：有重叠子问题不是必要条件，但这是动态规划算法相比其他算法的优势</p><h4 id="动态规划算法步骤"><a href="#动态规划算法步骤" class="headerlink" title="动态规划算法步骤"></a>动态规划算法步骤</h4><ol><li>创建一个存放保存子问题状态的空间</li><li>找到每个状态之间的之间的关系</li><li>返回需要求的值</li></ol><h4 id="找零钱问题"><a href="#找零钱问题" class="headerlink" title="找零钱问题"></a>找零钱问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span>(<span class="params">self, coins, amount: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        coins.sort()</span><br><span class="line">        dp=&#123;&#125;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,amount+<span class="number">1</span>):</span><br><span class="line">            dp[i]=amount+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,amount+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> coins:</span><br><span class="line">                <span class="keyword">if</span> i&gt;=j:</span><br><span class="line">                    dp[i]=<span class="built_in">min</span>(dp[i],(dp[i-j]+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> dp[amount]&lt;amount:</span><br><span class="line">            <span class="keyword">return</span> dp[amount]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;动态规划算法，一个感觉和递归很像的东西。&lt;/p&gt;
&lt;p&gt;递归：自上到下，慢慢到底部，不会记录每个问题的结果，内存消耗相对小，但会冲股份计算相同的问题，耗时多。&lt;/p&gt;
&lt;p&gt;动态规划：自下到上，会记录每一个问题的结果，内存消耗相对比较大，但不会计算相同的问题，时间</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PCA降维以及图片重构</title>
    <link href="http://example.com/2020/11/22/PCA%E9%99%8D%E7%BB%B4%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E9%87%8D%E6%9E%84/"/>
    <id>http://example.com/2020/11/22/PCA%E9%99%8D%E7%BB%B4%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E9%87%8D%E6%9E%84/</id>
    <published>2020-11-22T08:50:34.000Z</published>
    <updated>2020-12-01T09:46:14.263Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数值计算中有一个大作业是关于PCA的降维以及重构的，这里就总结一下，感觉还是蛮实用的。</p><h4 id="PCA概念"><a href="#PCA概念" class="headerlink" title="PCA概念"></a>PCA概念</h4><p>PCA即主成分分析方法，是一种使用最广泛的数据降维算法。PCA的主要思想是将n维特征映射到k维上，这k维是全新的正交特征也被称为主成分，是在原有n维特征的基础上重新构造出来的k维特征。</p><h4 id="PCA思想"><a href="#PCA思想" class="headerlink" title="PCA思想"></a>PCA思想</h4><ol><li>数据中的信息是分布不均匀的，有些地方数据多，有些地方数据少</li><li>所以将一些少的信息去掉，对于原始数据是没有很大影响的，即抓住主要矛盾，忽略次要矛盾</li><li>经过推导可以知道协方差矩阵的特征值代表了数据包含的信息量，所以可以取大的特征值，舍弃掉小的从而完成降维</li></ol><h4 id="PCA降维步骤"><a href="#PCA降维步骤" class="headerlink" title="PCA降维步骤"></a>PCA降维步骤</h4><ol><li>去平均值(即去中心化)，即每一位特征减去各自的平均值。</li><li>计算协方差矩阵$\frac{1}{n}XX^T$</li><li>求协方差矩阵$\frac{1}{n}XX^T$的特征值和特征向量</li><li>对特征值从大到小排序，选择其中最大的k个。然后将其对应的k个特征向量分别作为行向量组成特征向量矩阵P。</li><li>将数据转换到k个特征向量构建的新空间中，即Y=PX。</li></ol><h4 id="图像重构"><a href="#图像重构" class="headerlink" title="图像重构"></a>图像重构</h4><p>将上面的Y乘上P.T加上去中心化减去的值得到重构的图像</p><p>即：</p><script type="math/tex; mode=display">reconstruction=Y*P'+meanvalue</script><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><ol><li>读取训练集图像，每一个人脸图像以一个列向量的形式存在，所以需要将每个图像重构成列向量</li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:img_num <span class="comment">%逐一读取图像</span></span><br><span class="line">    image_name = img_path_list(<span class="built_in">j</span>).name;<span class="comment">%图像名</span></span><br><span class="line">    img = imread(strcat(file_path,image_name));              </span><br><span class="line">    img = imresize(img, <span class="number">0.2</span>, <span class="string">&#x27;nearest&#x27;</span>);</span><br><span class="line">     [irow,icol] = <span class="built_in">size</span>(img);<span class="comment">%得到图片大小</span></span><br><span class="line">    temp = <span class="built_in">reshape</span>(img,irow*icol,<span class="number">1</span>);<span class="comment">%将二维图片转为一维向量</span></span><br><span class="line">    <span class="comment">% 每张图片的信息做为V的一列  </span></span><br><span class="line">    Q(:,<span class="built_in">j</span>)=temp;</span><br><span class="line">    imgTrain=[imgTrain,temp];</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol><li>读取完人脸数据后，将数据零均值化，即人脸向量减去平均值脸向量。然后求出这组数据的协方差矩阵的特征值向量和特征值向量,这些单位特征向量可以形成一个特征空间，然后把原图像向量向这个特征空间中投影，就可以得到特征脸</li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">mean</span>(imgTrain,<span class="number">2</span>); <span class="comment">% 平均图像/行平均</span></span><br><span class="line">Train_Number = <span class="built_in">size</span>(imgTrain,<span class="number">2</span>);<span class="comment">%列数</span></span><br><span class="line"><span class="comment">%计算机每一张图片到均值图像的方差</span></span><br><span class="line">A = [];  </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : Train_Number<span class="comment">%对每一列</span></span><br><span class="line">    temp = double(imgTrain(:,<span class="built_in">i</span>))-m; <span class="comment">%每一张图与均值的差异</span></span><br><span class="line">    A = [A temp]; <span class="comment">%差矩阵</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%得到A的协方差矩阵并转置得到L</span></span><br><span class="line">L = A&#x27;*A; <span class="comment">% L是协方差矩阵C=A*A&#x27;的转置</span></span><br><span class="line"><span class="comment">%得到特征值与特征向量</span></span><br><span class="line">[V,D] = eig(L); <span class="comment">%对角线上的元素是L|C的特征值.V:以特征向量为列的满秩矩阵，D：特征值对角矩阵。即L*V = V*D.</span></span><br><span class="line">L_eig_vec = [];<span class="comment">%特征值向量</span></span><br><span class="line"><span class="built_in">max</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">size</span>(V,<span class="number">2</span>)<span class="comment">%对每个特征向量   </span></span><br><span class="line">   <span class="built_in">max</span>=<span class="built_in">max</span>+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">size</span>(V,<span class="number">2</span>):<span class="number">-1</span>:<span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-2</span><span class="comment">%对每个特征向量      </span></span><br><span class="line">    L_eig_vec = [L_eig_vec V(:,<span class="built_in">i</span>)]*<span class="number">0</span>;<span class="comment">%集中对应的特征向量</span></span><br><span class="line">    sum=sum+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-3</span>:<span class="number">-1</span>:<span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-9</span><span class="comment">%对每个特征向量      </span></span><br><span class="line">    L_eig_vec = [L_eig_vec V(:,<span class="built_in">i</span>)]*<span class="number">0.05</span>;<span class="comment">%集中对应的特征向量</span></span><br><span class="line">    sum=sum+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-10</span>:<span class="number">-1</span>:<span class="number">1</span><span class="comment">%对每个特征向量      </span></span><br><span class="line">    L_eig_vec = [L_eig_vec V(:,<span class="built_in">i</span>)];<span class="comment">%集中对应的特征向量</span></span><br><span class="line">    sum=sum+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">if</span>(sum/<span class="built_in">max</span>&gt;<span class="number">0.99</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Eigenfaces = A * L_eig_vec; <span class="comment">% 计算机协方差矩阵C的特征向量，</span></span><br><span class="line">                            <span class="comment">%得到降维了的特征,A为每一张图像与均值图像的差构成的矩阵，</span></span><br><span class="line">TrainProjectedImages = [];<span class="comment">%映射图像</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : img_num<span class="comment">%对于每一个训练特征</span></span><br><span class="line">    temp = Eigenfaces&#x27;*double(Q(:,<span class="built_in">i</span>));</span><br><span class="line">    TrainProjectedImages = [TrainProjectedImages temp];  <span class="comment">%得到 L_eig_vec;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol><li>人脸重建</li></ol><p>人脸重建实验的目的是为了测试特征脸所携带的人脸信息。由于特征值的大小代表了其所对应的特征向量所携带的信息量，通过将最大的一些特征值对应的特征向量叠加就可以获得原图像中的大部分信息量，也就是所谓的主成分。这里先将所有特征值按从大到小的顺序排列。通过叠加特征向量的方式，就可以得到一组对原人脸的逼近特征脸。而将特征值加起来，正是总的信息量，也可以求出重构误差。</p><ol><li>人脸识别</li></ol><p>人脸识别即给出一个待识别的在测试集中的图像，计算该图像与已经有的人脸即训练集中的人脸的距离，距离最小的则认为该图片的人脸。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:Testcols</span><br><span class="line">    mImgTestCur = TestProjectedImages(:,<span class="built_in">i</span>);</span><br><span class="line">    vDisMin = <span class="number">9999999999999</span>;</span><br><span class="line">    vClassMin = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:Traincols</span><br><span class="line">        mImgTrainCur = TrainProjectedImages(:,<span class="built_in">j</span>);</span><br><span class="line">        mDis = mImgTestCur-mImgTrainCur;</span><br><span class="line">        mDis = mDis.^<span class="number">2</span>;</span><br><span class="line">        vDis = <span class="built_in">sqrt</span>(sum(mDis));</span><br><span class="line">        <span class="keyword">if</span> vDis&lt;vDisMin</span><br><span class="line">            vDisMin = vDis;</span><br><span class="line">    m=<span class="built_in">j</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    name1=img_path_list_train(m).name;</span><br><span class="line">   name1 =name1(<span class="number">6</span>:<span class="number">7</span>);<span class="comment">%取名字的6-7位置的字符</span></span><br><span class="line">    name2=img_path_list_test(<span class="built_in">i</span>).name;</span><br><span class="line">     name2 =name2(<span class="number">6</span>:<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> name2==name1</span><br><span class="line">count=count+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><p>未完待续…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;数值计算中有一个大作业是关于PCA的降维以及重构的，这里就总结一下，感觉还是蛮实用的。&lt;/p&gt;
&lt;h4 id=&quot;PCA概念&quot;&gt;&lt;a href=&quot;#PCA概念&quot; class=&quot;headerlink&quot; title=&quot;PCA概念&quot;&gt;&lt;/a&gt;PCA概念&lt;/h4&gt;&lt;p&gt;PC</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="matlab" scheme="http://example.com/tags/matlab/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深度优先dfs</title>
    <link href="http://example.com/2020/11/22/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88dfs/"/>
    <id>http://example.com/2020/11/22/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88dfs/</id>
    <published>2020-11-21T16:57:02.000Z</published>
    <updated>2020-12-01T09:47:18.700Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><p>之所以总结一下dfs，是因为刷python题目时候遇到一个题，单词搜索问题，类似于dfs思想的题目，不太会做，然后就总结一下</p><h2 id="什么是DFS"><a href="#什么是DFS" class="headerlink" title="什么是DFS"></a>什么是DFS</h2><p>Depth First Search英文的缩写，翻译过来就是“深度优先搜索”。</p><p>深度优先遍历的主要思想就是：首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点；当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问。</p><p>沿着某条路径遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有的顶点都被访问过为止。</p><p>即：不撞南墙不回头</p><h3 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h3><ol><li>任意选择一个起点v，访问该顶点</li><li>沿深度方向，依次遍历未访问邻节点</li></ol><p>tips：每次访问后都要将访问的vist[]变成1</p><h5 id="递归伪代码"><a href="#递归伪代码" class="headerlink" title="递归伪代码"></a>递归伪代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DFS(dep,、、、）        &#x2F;&#x2F;dep代表目前DFS的深度</span><br><span class="line">&#123;</span><br><span class="line">    if(找到解 || 走不下去)&#123;</span><br><span class="line">        、、、     &#x2F;&#x2F;在此处进行相应的操作</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    枚举下一种情况，DFS（dep+1,、、、）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="非递归伪代码"><a href="#非递归伪代码" class="headerlink" title="非递归伪代码"></a>非递归伪代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bool visited[MAXNODE];      &#x2F;&#x2F;顶点的访问标识数组</span><br><span class="line">void DFSInit(Graph G)&#123;</span><br><span class="line">    for(i&#x3D;0; i&lt;G.VertexNum; i++)&#123;</span><br><span class="line">        visited[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void DFS(Graph G,int v)&#123;  &#x2F;&#x2F;v:顶点数组中的序号</span><br><span class="line">    Visit[v];  visited[v]&#x3D;true;</span><br><span class="line">    w &#x3D; FirstAdj(G,v);    &#x2F;&#x2F;返回：v的第一个邻接点，0表示无邻接点</span><br><span class="line">    while(w!&#x3D;0)&#123;   </span><br><span class="line">        if(!visited[w]&#123;</span><br><span class="line">            DFS(G,w);   &#x2F;&#x2F;参数传递w-&gt;v</span><br><span class="line">        &#125;</span><br><span class="line">        w &#x3D; NextAdj(G,v,w);   &#x2F;&#x2F;返回：v的在邻接点w后的邻接点，0表示不存在</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180327185247135?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5zYW53YQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>其中一种DFS序列：DFS(G,v1) = (v1,v2,v3,v6,v5,v7,v4,v8,v9)</li></ul><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>dfs即找准了一条路，如果满足判定成功条件或者失败条件（撞南墙）就返回上一个节点，再从这个节点继续找下一个，再撞再回溯。</p><h5 id="单词搜索问题"><a href="#单词搜索问题" class="headerlink" title="单词搜索问题"></a>单词搜索问题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self,i,j,cmap,word</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(word)==<span class="number">0</span>:</span><br><span class="line">            <span class="comment">#撞南墙</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment">#撞南墙</span></span><br><span class="line">        <span class="keyword">elif</span> i&gt;=<span class="built_in">len</span>(cmap) <span class="keyword">or</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> j&lt;<span class="number">0</span> <span class="keyword">or</span> j&gt;=<span class="built_in">len</span>(cmap[<span class="number">0</span>]) <span class="keyword">or</span> word[<span class="number">0</span>]!=cmap[i][j]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        temp=cmap[i][j]</span><br><span class="line">        cmap[i][j]=<span class="string">&#x27;#&#x27;</span></span><br><span class="line">        res =self.dfs(i+<span class="number">1</span>,j,cmap,word[<span class="number">1</span>:]) <span class="keyword">or</span> self.dfs(i<span class="number">-1</span>, j, cmap, word[<span class="number">1</span>:]) <span class="keyword">or</span> self.dfs(i, j+<span class="number">1</span>, cmap, word[<span class="number">1</span>:]) <span class="keyword">or</span> self.dfs(i, j<span class="number">-1</span>, cmap, word[<span class="number">1</span>:])</span><br><span class="line">        <span class="comment">#四种方向，其中有一种return True那这个节点即return True</span></span><br><span class="line">        cmap[i][j]=temp</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><hr><hr><p>未完待续……………………………….</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;之所以总结一下dfs，是因为刷python题目时候遇到一个题，单词搜索问题，类似于dfs思想的题目，不太会做，然后就总结一下&lt;/p&gt;
&lt;h2 id=&quot;什么是DFS&quot;&gt;&lt;a href=&quot;#什么是DFS&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于考研</title>
    <link href="http://example.com/2020/11/19/postdsa/"/>
    <id>http://example.com/2020/11/19/postdsa/</id>
    <published>2020-11-19T07:24:48.000Z</published>
    <updated>2020-12-01T09:46:36.040Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><p>现在是2020.11.19，距离大四毕业还有一年半的时间，还有半年我就要面临考研以及还是就业的选择，说实话，我现在是十分犹豫的。</p><hr><p>我之所以想考研其实很大部分原因是因为感觉自己其实并没有准备好直接就进入职场经历那雨打风吹，而且读完研究生的薪资待遇确实是和本科生不同，可能是为了“钱途”吧，本来打算保不了研就直接从业的我产生了读研的想法。</p><hr><h4 id="关于之后这大半年"><a href="#关于之后这大半年" class="headerlink" title="关于之后这大半年"></a>关于之后这大半年</h4><p>其实计算机这门学科，只要你肯花时间去专研，琢磨，总结，深入，不停写码肯定可以收获不小的成功，哪怕不能做到最最最顶尖，但肯定是高于水准线之上很多的。我的想法是：</p><ol><li>不断地刷题，刷leetcode，现在我把matrix上字节跳动的题目刷完就去刷leetcode了</li><li>总结，将知识点分类，或者觉得有用的东西弄到我的blog上，并且不断地美化自己的blog。</li><li>总结计网，计组，操作系统，计网的知识点到blog上，并且深入地做一些相关地研究或者实验去加深巩固，而且因为这学期是有计网2这个科目的，所以计网是放在第一优先级的</li><li>做一些实际的项目练手</li></ol><h4 id="考研科目"><a href="#考研科目" class="headerlink" title="考研科目"></a>考研科目</h4><h5 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h5><p>100分</p><h5 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h5><p>150分</p><h6 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h6><p>100分 </p><h6 id="专业课："><a href="#专业课：" class="headerlink" title="专业课："></a>专业课：</h6><p>150分</p><p>数据结构45分，计算机组成原理45分，操作系统35分，计算机网络25分；</p><p>试卷题型结构：单项选择题，80分（40小题，每小题2分）；综合题，70分；</p><hr><p>加油~愿韶华不负</p><p>​                                                                   JAYSON</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;现在是2020.11.19，距离大四毕业还有一年半的时间，还有半年我就要面临考研以及还是就业的选择，说实话，我现在是十分犹豫的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我之所以想考研其实很大部分原因是因为感觉自己其实并没有准备好直接就进入职场经历那雨打风吹，而</summary>
      
    
    
    
    <category term="未来方向" scheme="http://example.com/categories/%E6%9C%AA%E6%9D%A5%E6%96%B9%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>关于考研</title>
    <link href="http://example.com/2020/11/19/%E5%85%B3%E4%BA%8E%E8%80%83%E7%A0%94/"/>
    <id>http://example.com/2020/11/19/%E5%85%B3%E4%BA%8E%E8%80%83%E7%A0%94/</id>
    <published>2020-11-19T07:24:48.000Z</published>
    <updated>2020-11-19T07:43:46.425Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><p>现在是2020.11.19，距离大四毕业还有一年半的时间，还有半年我就要面临考研以及还是就业的选择，说实话，我现在是十分犹豫的。</p><hr><p>我之所以想考研其实很大部分原因是因为感觉自己其实并没有准备好直接就进入职场经历那雨打风吹，而且读完研究生的薪资待遇确实是和本科生不同，可能是为了“钱途”吧，本来打算保不了研就直接从业的我产生了读研的想法。</p><hr><h4 id="关于之后这大半年"><a href="#关于之后这大半年" class="headerlink" title="关于之后这大半年"></a>关于之后这大半年</h4><p>其实计算机这门学科，只要你肯花时间去专研，琢磨，总结，深入，不停写码肯定可以收获不小的成功，哪怕不能做到最最最顶尖，但肯定是高于水准线之上很多的。我的想法是：</p><ol><li>不断地刷题，刷leetcode，现在我把matrix上字节跳动的题目刷完就去刷leetcode了</li><li>总结，将知识点分类，或者觉得有用的东西弄到我的blog上，并且不断地美化自己的blog。</li><li>总结计网，计组，操作系统，计网的知识点到blog上，并且深入地做一些相关地研究或者实验去加深巩固，而且因为这学期是有计网2这个科目的，所以计网是放在第一优先级的</li><li>做一些实际的项目练手</li></ol><h4 id="考研科目"><a href="#考研科目" class="headerlink" title="考研科目"></a>考研科目</h4><h5 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h5><p>100分</p><h5 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h5><p>150分</p><h6 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h6><p>100分 </p><h6 id="专业课："><a href="#专业课：" class="headerlink" title="专业课："></a>专业课：</h6><p>150分</p><p>数据结构45分，计算机组成原理45分，操作系统35分，计算机网络25分；</p><p>试卷题型结构：单项选择题，80分（40小题，每小题2分）；综合题，70分；</p><hr><p>加油~愿韶华不负</p><p>​                                                                   JAYSON</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;现在是2020.11.19，距离大四毕业还有一年半的时间，还有半年我就要面临考研以及还是就业的选择，说实话，我现在是十分犹豫的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我之所以想考研其实很大部分原因是因为感觉自己其实并没有准备好直接就进入职场经历那雨打风吹，而</summary>
      
    
    
    
    <category term="未来方向" scheme="http://example.com/categories/%E6%9C%AA%E6%9D%A5%E6%96%B9%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>链表in python</title>
    <link href="http://example.com/2020/11/19/%E9%93%BE%E8%A1%A8in-python/"/>
    <id>http://example.com/2020/11/19/%E9%93%BE%E8%A1%A8in-python/</id>
    <published>2020-11-18T18:09:45.000Z</published>
    <updated>2020-12-01T09:47:44.190Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>链表是python中特别重要且实用的数据结构，c++中的链表实现是分为指针和静态的，但因为python中没有指针结构，所以是只有静态的实现</p><h3 id="链表节点的定义"><a href="#链表节点的定义" class="headerlink" title="链表节点的定义"></a>链表节点的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>节点有两个内置变量，一个是val即储存的值。另一个是next，即指向的下一个节点。</p><h3 id="链表的构建"><a href="#链表的构建" class="headerlink" title="链表的构建"></a>链表的构建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">head= ListNode(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">    node = ListNode(i)</span><br><span class="line">    cur = head.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">if</span> cur== <span class="literal">None</span>:</span><br><span class="line">        head.<span class="built_in">next</span> = node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> cur.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span> = node</span><br></pre></td></tr></table></figure><p>理解：头head是指向一个一般不动的，所以你要在头后面加数的话，得先建一个temp=head，然后改变temp在链表的位置使其指向最后一个数，再temp.next=node</p><h3 id="链表求和"><a href="#链表求和" class="headerlink" title="链表求和"></a>链表求和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">elif</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        head1=reverse(l1)</span><br><span class="line">        head2=reverse(l2)</span><br><span class="line">        head=<span class="literal">None</span></span><br><span class="line">        flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> head1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> head2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                node=ListNode(<span class="number">0</span>)</span><br><span class="line">                head1=node</span><br><span class="line">            <span class="keyword">elif</span> head2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                node = ListNode(<span class="number">0</span>)</span><br><span class="line">                head2 = node</span><br><span class="line">            sum_num=head1.val+head2.val+flag</span><br><span class="line">            <span class="keyword">if</span> sum_num&gt;=<span class="number">10</span>:</span><br><span class="line">                flag=<span class="number">1</span></span><br><span class="line">                sum_num=sum_num%<span class="number">10</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">            temp=ListNode(sum_num)</span><br><span class="line">            <span class="keyword">if</span> head==<span class="literal">None</span>:</span><br><span class="line">                head=temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur=head</span><br><span class="line">                <span class="keyword">while</span> cur.<span class="built_in">next</span>!=<span class="literal">None</span>:</span><br><span class="line">                    cur=cur.<span class="built_in">next</span></span><br><span class="line">                cur.<span class="built_in">next</span>=temp</span><br><span class="line">            head1=head1.<span class="built_in">next</span></span><br><span class="line">            head2=head2.<span class="built_in">next</span></span><br><span class="line">        temp=head</span><br><span class="line">        <span class="keyword">if</span> flag==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">while</span> temp.<span class="built_in">next</span>!=<span class="literal">None</span>:</span><br><span class="line">                temp=temp.<span class="built_in">next</span></span><br><span class="line">            temp.<span class="built_in">next</span>=ListNode(<span class="number">1</span>)</span><br><span class="line">        head=reverse(head)</span><br><span class="line">        <span class="keyword">if</span> head.val==<span class="number">0</span>:</span><br><span class="line">            head=head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h3 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span>(<span class="params">self, head: ListNode</span>) -&gt; bool:</span></span><br><span class="line">        slow_list = head</span><br><span class="line">        fast_list = head</span><br><span class="line">        <span class="keyword">while</span> slow_list.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> fast_list.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> fast_list.<span class="built_in">next</span>.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            slow_list=slow_list.<span class="built_in">next</span></span><br><span class="line">            fast_list=fast_list.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> slow_list.val==fast_list.val:</span><br><span class="line">                print(<span class="string">&quot;True&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        print(<span class="string">&quot;False&quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;p&gt;链表是python中特别重要且实用的数据结构，c++中的链表实现是分为指针和静态的，但因为python中没有指针结构，所以是只有静</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>基础数据结构list</title>
    <link href="http://example.com/2020/11/16/lilst/"/>
    <id>http://example.com/2020/11/16/lilst/</id>
    <published>2020-11-16T09:32:51.000Z</published>
    <updated>2020-12-01T09:45:55.803Z</updated>
    
    <content type="html"><![CDATA[<hr><p>List数据类型是python中最为常用的数据类型，在这里总结一下对list的理解</p><p>列表数据类型是python中最为常用的数据类型，在这里总结一下对list的理解，以及常用的操作</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h4 id="数据类型的理解"><a href="#数据类型的理解" class="headerlink" title="数据类型的理解"></a>数据类型的理解</h4><p>列表类型与c++的数组和STL的vector十分像，且列表中的元素类型不是固定的，十分有意思。与字符串的索引一样，列表索引从0开始。列表可以进行截取、组合等。</p><h3 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h3><p>list=[]//创建空列表</p><p>list = [‘physics’, ‘chemistry’, 1997, 2000]</p><p>list=list(range())</p><h3 id="列表的基本操作"><a href="#列表的基本操作" class="headerlink" title="列表的基本操作"></a>列表的基本操作</h3><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>在列表的最后一位添加元素</p><p>list.append(obj)</p><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p>list.insert(index,obj)</p><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><p>移除列表中一个元素，并返回列表的值，默认是最后一位</p><p>list.pop([index=-1])</p><h4 id="列表取反"><a href="#列表取反" class="headerlink" title="列表取反"></a>列表取反</h4><p>list.reverse()</p><h4 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h4><p>该方法没有返回值，但是会对列表的对象进行排序。</p><p>list.sort(cmp=None, key=None, reverse=False)</p><h5 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h5><p>vowels.sort(reverse=True)</p><h5 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h5><p>升序是默认的即：list.sort()</p><p>vowels.sort(reverse=False)</p><h4 id="链表切片"><a href="#链表切片" class="headerlink" title="链表切片"></a>链表切片</h4><p>切片操作确实还是蛮方便的，python中可以很轻易地实现对列表的切割</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list2=list1[a:b]</span><br></pre></td></tr></table></figure><ol><li>左闭右开即取a不取b</li><li>[a:],[:b] #只取一边</li></ol><h3 id="其他列表操作"><a href="#其他列表操作" class="headerlink" title="其他列表操作"></a>其他列表操作</h3><ol><li>cmp(list1,list2)</li><li>len(list)</li><li>max(list)</li><li>min(list)</li><li>list(seq)//将元组转换为列表</li><li>list.count(obj)//统计某个元素在列表中出现的次数</li><li>list.index(obj)//从列表中找出某个值第一个匹配项的索引位置</li><li>list.remove(obj)//移除列表中某个值的第一个匹配项</li></ol><h3 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h3><ol><li>for i,j in list:</li><li>for i in range(n):</li></ol><hr><p>以上是一些列表的基本操作，一般其实用不到特别复杂的操作，未完待续………</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;List数据类型是python中最为常用的数据类型，在这里总结一下对list的理解&lt;/p&gt;
&lt;p&gt;列表数据类型是python中最为常用的数据类型，在这里总结一下对list的理解，以及常用的操作&lt;/p&gt;
&lt;h2 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; c</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://example.com/2020/11/15/numpy/"/>
    <id>http://example.com/2020/11/15/numpy/</id>
    <published>2020-11-15T14:32:51.000Z</published>
    <updated>2020-12-01T09:46:04.260Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>在数值计算中numpy特别使用，所以做一下关于numpy用法的记录</p><h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><p>import numpy as np</p><h4 id="ARRAY的创建"><a href="#ARRAY的创建" class="headerlink" title="ARRAY的创建"></a>ARRAY的创建</h4><h5 id="np-array"><a href="#np-array" class="headerlink" title="np.array()"></a>np.array()</h5><p>e.g. np.array([[1,1,1],</p><p>​                        [[1,1,1])</p><h5 id="np-zeros"><a href="#np-zeros" class="headerlink" title="np.zeros()"></a>np.zeros()</h5><h1 id="全零的矩阵"><a href="#全零的矩阵" class="headerlink" title="全零的矩阵"></a>全零的矩阵</h1><p>e.g. np.zeros([3,3])</p><h5 id="np-ones"><a href="#np-ones" class="headerlink" title="np.ones()"></a>np.ones()</h5><h1 id="全1的矩阵"><a href="#全1的矩阵" class="headerlink" title="全1的矩阵"></a>全1的矩阵</h1><p>e.g. np.ones([3,3])</p><h5 id="np-empty"><a href="#np-empty" class="headerlink" title="np.empty()"></a>np.empty()</h5><h1 id="空"><a href="#空" class="headerlink" title="空"></a>空</h1><p>e.g. np.empty([3,3])</p><h5 id="np-full"><a href="#np-full" class="headerlink" title="np.full()"></a>np.full()</h5><p>e.g. array=np.full([3,3],6) #全是6的3*3矩阵</p><h3 id="ARRAY的属性"><a href="#ARRAY的属性" class="headerlink" title="ARRAY的属性"></a>ARRAY的属性</h3><h5 id="array-shape"><a href="#array-shape" class="headerlink" title="array.shape"></a>array.shape</h5><h1 id="几行几列"><a href="#几行几列" class="headerlink" title="几行几列"></a>几行几列</h1><p>对于图像来说：</p><p>​    img.shape[0]：图像的垂直尺寸（高度）</p><p>​    img.shape[1]：图像的水平尺寸（宽度）</p><p>​    img.shape[2]：图像的通道数</p><p>而对于矩阵来说：</p><p>​    shape[0]：表示矩阵的行数</p><p>​    shape[1]：表示矩阵的列数</p><h5 id="array-size"><a href="#array-size" class="headerlink" title="array.size"></a>array.size</h5><h1 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h1><h5 id="array-T"><a href="#array-T" class="headerlink" title="array.T"></a>array.T</h5><h1 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h1><h5 id="array-real"><a href="#array-real" class="headerlink" title="array.real"></a>array.real</h5><h1 id="虚数的实部"><a href="#虚数的实部" class="headerlink" title="虚数的实部"></a>虚数的实部</h1><h5 id="array-imag"><a href="#array-imag" class="headerlink" title="array.imag"></a>array.imag</h5><h1 id="实数的虚部"><a href="#实数的虚部" class="headerlink" title="实数的虚部"></a>实数的虚部</h1><h3 id="ARRAY的操作"><a href="#ARRAY的操作" class="headerlink" title="ARRAY的操作"></a>ARRAY的操作</h3><h5 id="np-mean"><a href="#np-mean" class="headerlink" title="np.mean()"></a>np.mean()</h5><p>np.mean(arr) #求所有值的均值</p><p>np.mean(arr,axis=0)#按列求均值</p><p>np.mean(arr,axis=1)#按行求均值</p><h5 id="array-copy"><a href="#array-copy" class="headerlink" title="array.copy ()"></a>array.copy ()</h5><h1 id="复制拷贝"><a href="#复制拷贝" class="headerlink" title="复制拷贝"></a>复制拷贝</h1><p>e.g. cc=array.copy()</p><p>！！！cc=array 这个是浅拷贝，cc改变array也会改变</p><h5 id="array-reshape"><a href="#array-reshape" class="headerlink" title="array.reshape()"></a>array.reshape()</h5><p>array.reshape(2,8)</p><h1 id="重塑形状，改变数组的行和列"><a href="#重塑形状，改变数组的行和列" class="headerlink" title="重塑形状，改变数组的行和列"></a>重塑形状，改变数组的行和列</h1><h5 id="array-resize"><a href="#array-resize" class="headerlink" title="array.resize()"></a>array.resize()</h5><h1 id="resize-和reshape-的区别是前者数组自身会改变，后者不会"><a href="#resize-和reshape-的区别是前者数组自身会改变，后者不会" class="headerlink" title="resize()和reshape()的区别是前者数组自身会改变，后者不会"></a>resize()和reshape()的区别是前者数组自身会改变，后者不会</h1><h5 id="array-flatten"><a href="#array-flatten" class="headerlink" title="array.flatten"></a>array.flatten</h5><h1 id="直接将数组拉平编程一维的"><a href="#直接将数组拉平编程一维的" class="headerlink" title="直接将数组拉平编程一维的"></a>直接将数组拉平编程一维的</h1><h5 id="array-max"><a href="#array-max" class="headerlink" title="array.max()"></a>array.max()</h5><h1 id="最大值"><a href="#最大值" class="headerlink" title="最大值"></a>最大值</h1><h5 id="np-matmul-a-b"><a href="#np-matmul-a-b" class="headerlink" title="np.matmul(a,b)"></a>np.matmul(a,b)</h5><p>矩阵乘法</p><h5 id="np-tile"><a href="#np-tile" class="headerlink" title="np.tile()"></a>np.tile()</h5><h1 id="将数组沿y或x扩大倍数"><a href="#将数组沿y或x扩大倍数" class="headerlink" title="将数组沿y或x扩大倍数"></a>将数组沿y或x扩大倍数</h1><p>np.(a,(2,1))//第一个是y，第二个是x轴</p><h3 id="ARRAY的索引"><a href="#ARRAY的索引" class="headerlink" title="ARRAY的索引"></a>ARRAY的索引</h3><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>array[1:3,1:3]#变成1，2行列的数组</p><h1 id="python索引是前面闭括号，后面开括号"><a href="#python索引是前面闭括号，后面开括号" class="headerlink" title="python索引是前面闭括号，后面开括号"></a>python索引是前面闭括号，后面开括号</h1><h5 id="键对索引"><a href="#键对索引" class="headerlink" title="键对索引"></a>键对索引</h5><p>array[[row1,row2],[col1,col2]]</p><h1 id="一一对应"><a href="#一一对应" class="headerlink" title="一一对应"></a>一一对应</h1><p>e.g. array[[0,2],[1,3]]</p><h5 id="np-nditer-迭代器"><a href="#np-nditer-迭代器" class="headerlink" title="np.nditer 迭代器"></a>np.nditer 迭代器</h5><p>e.g. for i in np.nditer(array):</p><p>​         print(i)</p><h3 id="ARRAY的拼接拆分"><a href="#ARRAY的拼接拆分" class="headerlink" title="ARRAY的拼接拆分"></a>ARRAY的拼接拆分</h3><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><h5 id="vstack"><a href="#vstack" class="headerlink" title="vstack"></a>vstack</h5><h1 id="上下"><a href="#上下" class="headerlink" title="上下"></a>上下</h1><p>np.vstack([array1,array2])</p><h5 id="hstack"><a href="#hstack" class="headerlink" title="hstack"></a>hstack</h5><h1 id="左右"><a href="#左右" class="headerlink" title="左右"></a>左右</h1><p>np.hstack([array1,array2])</p><h5 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h5><h1 id="维度"><a href="#维度" class="headerlink" title="维度"></a>维度</h1><p>np.stack([array1,array2])</p><h4 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h4><h5 id="vsplit"><a href="#vsplit" class="headerlink" title="vsplit"></a>vsplit</h5><h5 id="hsplit"><a href="#hsplit" class="headerlink" title="hsplit"></a>hsplit</h5><h5 id="split"><a href="#split" class="headerlink" title="split"></a>split</h5><h2 id="图像的读取"><a href="#图像的读取" class="headerlink" title="图像的读取"></a>图像的读取</h2><h4 id="库"><a href="#库" class="headerlink" title="库"></a>库</h4><p>import matplotlib.pyplot as plt </p><p>import matplotlib.image as mpimg</p><p>import numpy as np</p><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><p>img=mpimg.imread(‘cat.jpg’)</p><h1 id="此时-img-就已经是一个-np-array-了，可以对它进行任意处理"><a href="#此时-img-就已经是一个-np-array-了，可以对它进行任意处理" class="headerlink" title="此时 img 就已经是一个 np.array 了，可以对它进行任意处理"></a>此时 img 就已经是一个 np.array 了，可以对它进行任意处理</h1><h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><p>plt.imshow(img) <em># 显示图片</em></p><p>plt.axis(‘off’) <em># 不显示坐标轴</em></p><p>plt.show()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;在数值计算中numpy特别使用，所以做一下关于numpy用法的记录&lt;/p&gt;
&lt;h3 id=&quot;numpy&quot;&gt;&lt;a href=&quot;#numpy&quot; class=&quot;headerlink&quot; title=&quot;numpy&quot;&gt;&lt;/a&gt;numpy&lt;/h3&gt;&lt;p&gt;impo</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>first_article</title>
    <link href="http://example.com/2020/10/26/first-article/"/>
    <id>http://example.com/2020/10/26/first-article/</id>
    <published>2020-10-25T16:15:37.000Z</published>
    <updated>2020-10-26T04:38:59.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="first"><a href="#first" class="headerlink" title="first"></a>first</h1><p>第一个blog_text</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;first&quot;&gt;&lt;a href=&quot;#first&quot; class=&quot;headerlink&quot; title=&quot;first&quot;&gt;&lt;/a&gt;first&lt;/h1&gt;&lt;p&gt;第一个blog_text&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
