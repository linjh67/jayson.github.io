<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jayson</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-07T15:00:54.495Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>jayson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数值计算复习</title>
    <link href="http://example.com/2021/01/07/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2021/01/07/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-01-07T14:52:09.000Z</published>
    <updated>2021-01-07T15:00:54.495Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>误差</p><p>有效位数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h1&gt;&lt;p&gt;误差&lt;/p&gt;
&lt;p&gt;有效位数&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="数值计算" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>密码学复习</title>
    <link href="http://example.com/2021/01/03/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2021/01/03/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-01-02T16:53:31.000Z</published>
    <updated>2021-01-07T16:31:55.082Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><p>开始密码学的复习。</p><h1 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h1><ul><li>信息安全的基本要求</li></ul><p>保密性</p><p>完整性</p><p>认证性</p><p>可用性</p><ul><li>密码体制</li></ul><p>$(P,C,K,E,D)$</p><p>P表示明文空间</p><p>C表示密文空间</p><p>K表示密钥空间</p><p>E：加密</p><p>D：解密</p><ul><li>密码分析的方法</li></ul><ol><li>唯密文攻击</li><li>已知明文攻击</li><li>选择明文攻击</li><li>选择密文攻击</li><li>自适应选择密文攻击</li></ol><h3 id="密码体制的分类"><a href="#密码体制的分类" class="headerlink" title="密码体制的分类"></a>密码体制的分类</h3><p>对密码体制的分类方法有多种，常用的分类方法有以下三种。</p><h4 id="1、密钥数量"><a href="#1、密钥数量" class="headerlink" title="1、密钥数量"></a>1、密钥数量</h4><p><strong><em>对称密码体制</em></strong>，：相同加/解密钥或可以轻易推导出另一个。<br><strong><em>非对称密码体制</em></strong>：加/解密算法分别用两个不同的密钥实现，并且由加密密钥不能推导出解密密钥/<br>一个是可以公开的，称为公开密钥，简称公钥；另一个由用户自己秘密保存，称为私有密钥，简称私钥。</p><p><strong>对称密码体制</strong>的主要<strong>优势</strong>是：<br>加密、解密运算的处理速度块，效率高，算法安全性高。<br><strong>对称密码体制</strong>存在的<strong>局限性或不足</strong>：<br>（1）对称密码算法的密钥分发过程复杂，所花代价高；<br>（2）密钥管理困难；<br>（3）保密通信系统的开放性差；<br>（4）存在数字签名的困难性。</p><p><strong>非对称密码体制</strong>的主要<strong>优势</strong>是：<br>（1）密钥分配简单。<br>（2）系统密钥量少，便于管理。<br>（3）系统开放性好。<br>（4）可以实现数字签名。<br><strong>非对称密码体制</strong>存在的<strong>局限性</strong>是加密、解密运算效率较低，处理速度较慢，同等安全强度下，非对称密码体制的密钥位数较多。</p><h4 id="2、对明文信息的处理方式"><a href="#2、对明文信息的处理方式" class="headerlink" title="2、对明文信息的处理方式"></a>2、对明文信息的处理方式</h4><p>根据密码算法对明文信息的处理方式，可将<strong>对称密码体制</strong>分为：<br><strong><em>分组密码</em></strong><br><strong><em>流密码</em></strong></p><p><strong><em>分组密码</em></strong>是将消息进行分组，一次处理一个数据块（分组）元素的输入，对每个输入块产生一个输出块。在用分组密码加密时，一个明文分组被当做一个整体来产生一个等长的密文分组输出。分组密码通常使用的分组大小是64比特或128比特。<br><strong><em>序列密码</em></strong>则是连续地处理输入元素，并随着处理过程的进行，一次产生一个元素的输出，在用序列密码加密时，一次加密一个比特或一个字节。</p><h4 id="3、是否能进行可逆的加密变换"><a href="#3、是否能进行可逆的加密变换" class="headerlink" title="3、是否能进行可逆的加密变换"></a>3、是否能进行可逆的加密变换</h4><p>根据密码算法是否能进行可逆的加密变换，可以将密码体制分为：<br><strong><em>单向函数密码体制</em></strong><br><strong><em>双向变换密码体制</em></strong></p><p><strong>单向函数密码体制</strong>是一类特殊的密码体制，其性质是可以很容易地把明文转换成密文，但再把密文转换成正确的明文却是不可行的，有时甚至是不可能的。单向函数只适用于某种特殊的、不需要解密的应用场合，如用户口令的存储和信息的完整性保护与鉴别等。</p><p><strong>双向变换密码体制</strong>是指能够进行可逆的加密、解密变换，绝大多数加密算法都属于这一类，它要求所使用的密码算法能够进行可逆的双向加解密变换，否则接收者就无法把密文还原成明文。</p><h1 id="第一章古典密码学"><a href="#第一章古典密码学" class="headerlink" title="第一章古典密码学"></a>第一章古典密码学</h1><h2 id="移位密码"><a href="#移位密码" class="headerlink" title="移位密码"></a>移位密码</h2><p>基于模运算的，在$Z_{26}$空间内，进行移位，逆运算就是逆移位。</p><script type="math/tex; mode=display">e_k(x)=(x+k)mod\ 26\\d_k(x)=(y-k)mod\ 26</script><h2 id="代换密码"><a href="#代换密码" class="headerlink" title="代换密码"></a>代换密码</h2><p>明文中的每一个字符被替换成密文中的另一个字符。接收者对密文做反向替换就可以恢复出明文。</p><script type="math/tex; mode=display">P=C=Z_{26},\pi \in K,\\e_\pi(x)=\pi(x)\\d_\pi(x)=\pi^{-1}(y)</script><h2 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h2><p>要求</p><script type="math/tex; mode=display">(a,26)=1</script><p>因为要保证逆运算也是可以进行的，即可以完成解密</p><script type="math/tex; mode=display">e_k(x)=(ax+b)mod\ 26\\d_k(x)=a^{-1}(y-b)mod \ 26</script><h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><p>是一种移位+多表代换的密钥</p><script type="math/tex; mode=display">K=(k_1,k_2,...,k_m)\\e_k(x_1,x_2,...,x_m)=(x_1+k_1,x_2+k_x,...,x_m+k_m)\\d_k(y_1,y_2,...,y_m)=(y_1-k_1,y_2-k_x,...,y_m-k_m)</script><h2 id="希尔密码"><a href="#希尔密码" class="headerlink" title="希尔密码"></a>希尔密码</h2><p>基于线性代数,密文是m*m,明文一次m个</p><script type="math/tex; mode=display">e_k(x)=xK\\d_k(X)=yK^{-1}</script><h2 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h2><h2 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h2><p>明文按m个分组，然后打乱顺序。</p><script type="math/tex; mode=display">e_k(x_1,x_2,...,x_m)=(X_{\pi(1)},X_{\pi(2)},....X_{\pi(m)})\\d_k(y_1,y_2,...,y_m)=(y_{\pi^{-1}(1)},X_{\pi^{-1}(2)},....X_{\pi^{-1}(m)})</script><h1 id="第二章Shannon"><a href="#第二章Shannon" class="headerlink" title="第二章Shannon"></a>第二章Shannon</h1><p>X取x时候的概率</p><script type="math/tex; mode=display">Pr[X=x]</script><p>同理，类似概率论定义</p><script type="math/tex; mode=display">Pr[x,y],Pr[x|y]</script><h2 id="完善保密性"><a href="#完善保密性" class="headerlink" title="完善保密性"></a>完善保密性</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>即攻击者无法根据密文获得明文任何信息</p><script type="math/tex; mode=display">Pr[x|y]=Pr[x]</script><h3 id="Shannon定理"><a href="#Shannon定理" class="headerlink" title="Shannon定理"></a>Shannon定理</h3><p>每个密钥被使用的概率都是$\frac{1}{|k|}$,并且$e_k(x)=y$只有唯一密钥K成立。</p><h3 id="一次一密"><a href="#一次一密" class="headerlink" title="一次一密"></a>一次一密</h3><p>举报完善保密性，并且是一次性的，密钥长度和明文，密文长度相同，适用于少量的明文信息。</p><script type="math/tex; mode=display">e_k(x)=(x_1+k_1,...,x_n+k_n)mod \ 2\\d_k(x)=(y_1+k_1,...,y_n+k_n)mod \ 2</script><h2 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h2><p>变量的不确定性越大，熵也就越大，把它搞清楚所需要的信息量也就越大。</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><script type="math/tex; mode=display">H(X)=-\sum_{x\in X}Pr[x]log_2Pr[x]</script><h3 id="乘积密码"><a href="#乘积密码" class="headerlink" title="乘积密码"></a>乘积密码</h3><p>连续执行两个或多个密码，即</p><script type="math/tex; mode=display">e_{(k_1,k_2)}(x)=e_{k_1}(e_{k_2}(x))</script><p>乘积密码比单个的密码体制更加地安全。</p><h1 id="第三章分组密码与高级加密标准"><a href="#第三章分组密码与高级加密标准" class="headerlink" title="第三章分组密码与高级加密标准"></a>第三章分组密码与高级加密标准</h1><h2 id="代换和置换网络"><a href="#代换和置换网络" class="headerlink" title="代换和置换网络"></a>代换和置换网络</h2><p>代换和置换分别被称作S盒和P盒。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>！<a href="01.png">01</a></p><p>在SPN里，s盒和p盒都是置换。</p><p><strong>白化</strong>：第一个和最后一个异或轮密钥操作</p><h2 id="线性密码分析"><a href="#线性密码分析" class="headerlink" title="线性密码分析"></a>线性密码分析</h2><h2 id="差分密码分析"><a href="#差分密码分析" class="headerlink" title="差分密码分析"></a>差分密码分析</h2><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><p>第一步：初始置换$IP=L^0R^0$</p><p>第二步：一共16轮：</p><script type="math/tex; mode=display">L^i=R^{i-1}\\R^i=L^{i-1}\bigoplus f((R^{i-1},K^i)</script><p>对于$f$:</p><ol><li>$A\rightarrow E(A)$,比特扩展，模4为0，1的重复</li><li>$E(A)\bigoplus J$</li><li>S盒代换，(1,6)行,(2,3,4,5)列</li><li>P盒置换</li></ol><p>对于$K$:</p><p>16个48比特的轮密钥，由7个字节的$Key$得来。</p><p>第三步：$R^{16},L^{16}$调换顺序，做一个逆置换$IP^{-1}$</p><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><p>明文分组：128比特</p><p>密钥长度$128：Nr=10$</p><p>密钥长度$192：Nr=12$</p><p>密钥长度$256：Nr=14$</p><p>步骤：</p><p>S盒：代换，$ShiftRows$：置换，$Mixcolumns$：线性变换</p><ol><li><p>给定一个明文x，将State初始化为x,并进行$AddRoundKey$操作，即将$RoundKey$与$State$异或</p></li><li><p>对前Nr-1轮中的每一轮，用S盒对State进行一次代换操作$SubBytes$;对State做一置换$ShiftRows$;再对State做一次操作$MixColumns$,然后进行$AddRoundKey$操作</p></li><li><p>用S盒对State进行一次代换操作$SubBytes$;对State做一置换$ShiftRows$;进行$AddRoundKey$操作</p></li><li><p>State即是密文y</p></li></ol><ul><li>密钥扩展</li></ul><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><h3 id="ECB"><a href="#ECB" class="headerlink" title="ECB"></a>ECB</h3><h3 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h3><h3 id="OFB"><a href="#OFB" class="headerlink" title="OFB"></a>OFB</h3><h3 id="CFB"><a href="#CFB" class="headerlink" title="CFB"></a>CFB</h3><h3 id="CCM"><a href="#CCM" class="headerlink" title="CCM"></a>CCM</h3><h3 id="计数模式"><a href="#计数模式" class="headerlink" title="计数模式"></a>计数模式</h3><h1 id="第四章Hash函数"><a href="#第四章Hash函数" class="headerlink" title="第四章Hash函数"></a>第四章Hash函数</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><script type="math/tex; mode=display">(X,Y,K,H)\\|X|\geq2|Y|</script><ul><li>H能用于任何大小的数据分组</li><li>产生定长输出</li></ul><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><ol><li>原像</li></ol><p>对$y\in Y$,</p><script type="math/tex; mode=display">找到x\in X,h(x)=y</script><ol><li>第二原像</li></ol><p>对x，</p><script type="math/tex; mode=display">找到x^{'}\neq x,h(x^{'})=h(x)</script><ol><li>碰撞</li></ol><script type="math/tex; mode=display">找到x\neq x^{'},h(x)=h(x^{'})</script><p>碰撞是最简单解决的，原像与第二原像呢？</p><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><p>产生128位的散列值。</p><h3 id="信息填充"><a href="#信息填充" class="headerlink" title="信息填充"></a>信息填充</h3><p>补1再补0至位数对512求模为448，至少补1位，至多补512位。</p><h3 id="扩展长度"><a href="#扩展长度" class="headerlink" title="扩展长度"></a>扩展长度</h3><p>将表示数据原始长度的64bit补在最后，补位完后的数据长度是512的倍数，按512bit分组。</p><h3 id="初始化MD缓存器"><a href="#初始化MD缓存器" class="headerlink" title="初始化MD缓存器"></a>初始化MD缓存器</h3><p>128位的常量，即4个字</p><h3 id="逐步处理"><a href="#逐步处理" class="headerlink" title="逐步处理"></a>逐步处理</h3><script type="math/tex; mode=display">(128,512)\rightarrow (128)</script><p>最后得到128bits散列值</p><h2 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h2><p>与MD5的不同只在MD缓存器，以及结果长度不同，其他的补位，分块都相同。</p><p>输出为160的散列值。</p><p>速度慢于MD5，安全性优于MD5.n’</p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><h3 id="穷举攻击法"><a href="#穷举攻击法" class="headerlink" title="穷举攻击法"></a>穷举攻击法</h3><h3 id="生日攻击"><a href="#生日攻击" class="headerlink" title="生日攻击"></a>生日攻击</h3><h2 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h2><ol><li>确定消息未被更改</li><li>确信消息来自所谓的发送者</li><li>若包含序号，可以确信序号的正确性</li></ol><h1 id="第五章RSA"><a href="#第五章RSA" class="headerlink" title="第五章RSA"></a>第五章RSA</h1><p><strong>陷门单向函数</strong>：逆函数的求解是很困难的，但有一个陷门求逆就会很简单。</p><h2 id="数论知识"><a href="#数论知识" class="headerlink" title="数论知识"></a>数论知识</h2><h3 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h3><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><h3 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h3><script type="math/tex; mode=display">x=\sum_{i}a_iM_iy_i \ mod\ M</script><h3 id="拉格朗日定理"><a href="#拉格朗日定理" class="headerlink" title="拉格朗日定理"></a>拉格朗日定理</h3><p>G为n阶的乘法群,$g\in G$,g的阶|n.</p><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><script type="math/tex; mode=display">b^{p-1}=1(mod\ p)</script><h3 id="本原元问题"><a href="#本原元问题" class="headerlink" title="本原元问题"></a>本原元问题</h3><ol><li>已知$\alpha$是本原元,</li></ol><p>$\beta=\alpha^i,\beta$是本原元当且仅当gcd(p-1,i)=1</p><ol><li>$\alpha$是模p本原元，当且仅当</li></ol><script type="math/tex; mode=display">\alpha^{\frac{(p-1)}{q}}\neq1(mod\ p),对所有q|(p-1)成立</script><h2 id="RSA密码体制"><a href="#RSA密码体制" class="headerlink" title="RSA密码体制"></a>RSA密码体制</h2><script type="math/tex; mode=display">\phi(n)=(p-1)(q-1),gcd(\phi(n),e)=1,ed=1(mod\ \phi(n))\\K=(n,p,q,e,d)\\e_k(x)=x^bmod\ n\\d_k(y)=y^amod\ n</script><p>公钥:</p><script type="math/tex; mode=display">(n,e)</script><p>私钥:</p><script type="math/tex; mode=display">(p,q,d)</script><p><strong>平方乘算法</strong>求摸指数</p><h2 id="素性检测"><a href="#素性检测" class="headerlink" title="素性检测"></a>素性检测</h2><p>生成大的随机素数问题</p><h3 id="Legendre-和-Jacobi符号"><a href="#Legendre-和-Jacobi符号" class="headerlink" title="Legendre 和 Jacobi符号"></a>Legendre 和 Jacobi符号</h3><h4 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h4><h4 id="Euler准则"><a href="#Euler准则" class="headerlink" title="Euler准则"></a>Euler准则</h4><p>二次剩余当且仅当，</p><script type="math/tex; mode=display">a^{\frac{(p-1)}{2}}=1(mod\ p)</script><h4 id="Legendre符号定义"><a href="#Legendre符号定义" class="headerlink" title="Legendre符号定义"></a>Legendre符号定义</h4><script type="math/tex; mode=display">(\frac{a}{p})=0|1|-1</script><h4 id="Jacobi符号定义"><a href="#Jacobi符号定义" class="headerlink" title="Jacobi符号定义"></a>Jacobi符号定义</h4><p>要求：会求解Jacobi</p><h3 id="Solovay-Strassen算法"><a href="#Solovay-Strassen算法" class="headerlink" title="Solovay-Strassen算法"></a>Solovay-Strassen算法</h3><script type="math/tex; mode=display">a\in{1,2,...,n-1}</script><p>根据</p><script type="math/tex; mode=display">(\frac{a}{n})是否等于a^{(n-1)/2}</script><p>判断n是否可能是素数。</p><p>当经过一定数量的测试则认为是素数的可能性极大，即为素数。</p><h3 id="Miller-Rabin算法"><a href="#Miller-Rabin算法" class="headerlink" title="Miller-Rabin算法"></a>Miller-Rabin算法</h3><p>大概就是先看$a^m$是否是1，再看$a^{2^r*m}$是否是-1，</p><p>通过测试则说明可能是素数，没通过则一定是合数。</p><h2 id="攻击RSA"><a href="#攻击RSA" class="headerlink" title="攻击RSA"></a>攻击RSA</h2><ol><li>分解模数n</li><li>求得$\phi(n)$</li><li>迭代攻击法</li><li>选择明文攻击</li><li>公用模攻击</li><li>低加密指数攻击</li><li>定时攻击法</li></ol><h2 id="RSA参数选择"><a href="#RSA参数选择" class="headerlink" title="RSA参数选择"></a>RSA参数选择</h2><ol><li>p和q一定是强素数</li><li>p与q之差要大</li><li>p，q要足够大</li><li>p－1与q－1的最大公因子要小</li><li>e不能太小</li></ol><h2 id="Pollard-p-1算法"><a href="#Pollard-p-1算法" class="headerlink" title="Pollard p-1算法"></a>Pollard p-1算法</h2><h2 id="Pollard-p-算法"><a href="#Pollard-p-算法" class="headerlink" title="Pollard p 算法"></a>Pollard p 算法</h2><h2 id="Dixon的随机平方算法"><a href="#Dixon的随机平方算法" class="headerlink" title="Dixon的随机平方算法"></a>Dixon的随机平方算法</h2><h2 id="Rabin密码体制"><a href="#Rabin密码体制" class="headerlink" title="Rabin密码体制"></a>Rabin密码体制</h2><script type="math/tex; mode=display">n=pq,p,q=3(mod\ 4)\\K=(n,p,q)\\e_k(x)=x^2(mod \ n)\\d_k(y)=\sqrt{y}mod\ n</script><p>公钥：</p><script type="math/tex; mode=display">(n)</script><p>私钥：</p><script type="math/tex; mode=display">(p,q)</script><p>解密等价于：</p><script type="math/tex; mode=display">z^2=y(mod\ p)\\z^2=y(mod\ q)</script><h1 id="第六章-公钥密码学和离散对数"><a href="#第六章-公钥密码学和离散对数" class="headerlink" title="第六章 公钥密码学和离散对数"></a>第六章 公钥密码学和离散对数</h1><h2 id="ElGamal密码体制"><a href="#ElGamal密码体制" class="headerlink" title="ElGamal密码体制"></a>ElGamal密码体制</h2><p>基于离散对数问题。</p><script type="math/tex; mode=display">\beta=\alpha^a</script><p>公钥：</p><script type="math/tex; mode=display">(p,\alpha,\beta)</script><p>私钥:</p><script type="math/tex; mode=display">(a)</script><script type="math/tex; mode=display">e_k(x,k)=(y_1,y_2)\\y_1=\alpha^k,y_2=x\beta^k mod\ p\\d_k(y_1,y_2)=y_2(y_1^a)^{-1}mod\ p0</script><h2 id="离散对数问题"><a href="#离散对数问题" class="headerlink" title="离散对数问题"></a>离散对数问题</h2><p>可以看到ElGmal密码体制中如果能够求得到a，那么即攻破了这个密码体制，而离散对数问题就是求</p><script type="math/tex; mode=display">a=log_\alpha \beta</script><p>的问题。</p><h3 id="Shanks算法"><a href="#Shanks算法" class="headerlink" title="Shanks算法"></a>Shanks算法</h3><p>因为,</p><script type="math/tex; mode=display">log_\alpha \beta\leq n-1\leq m^2-1=m(m-1)+m-1</script><p>构建两个有序对：</p><script type="math/tex; mode=display">0\leq j,i\leq m-1</script><script type="math/tex; mode=display">list1:(j,\alpha^)</script><script type="math/tex; mode=display">list2:(i,\beta \alpha^{-i})</script><p>当两个有序对的第二个坐标值相等时，即</p><script type="math/tex; mode=display">\alpha ^{mj}=y=\beta \alpha ^{-i}</script><p>所以,</p><script type="math/tex; mode=display">\alpha^{mj+i}=\beta,x=mj+i</script><ol><li><p>求出g在乘法群里的阶乘n</p></li><li><p>计算$g^{mj}$,得到有序对$(g,g^{mj}),j\in [0,m-1]$</p></li><li><p>将这m个有序对关于第二个坐标排序，得到列表$l_1$</p></li><li><p>计算$y_1g^{-i}$,得到有序对$y_1g^{-i},i\in [0,m-1]$</p></li><li><p>将这m个有序对关于第二个坐标排序，得到列表$l_2$</p></li><li><p>计算$y_2g^{-i}$,得到有序对$y_2g^{-i},i\in [0,m-1]$</p></li><li><p>找到$l_1$和$l_2$第二坐标相同的点,$l_1$第一坐标为$j$,$l_2$第二坐标为$i$,则$x_1=mj+i$</p></li></ol><h3 id="Pollard-p离散对数算法"><a href="#Pollard-p离散对数算法" class="headerlink" title="Pollard p离散对数算法"></a>Pollard p离散对数算法</h3><p>找到碰撞,然后</p><script type="math/tex; mode=display">c=(a_i-a_{2i})(b_{2i}-b_{i})^{-1}mod\ n</script><h3 id="Pohlig-Hellman算法"><a href="#Pohlig-Hellman算法" class="headerlink" title="Pohlig-Hellman算法"></a>Pohlig-Hellman算法</h3><h3 id="指数演算法"><a href="#指数演算法" class="headerlink" title="指数演算法"></a>指数演算法</h3><p>只用于计算$Z_P^*$中的离散对数情况，p是素数。</p><h3 id="椭圆曲线"><a href="#椭圆曲线" class="headerlink" title="椭圆曲线"></a>椭圆曲线</h3><h1 id="第七章签名方案"><a href="#第七章签名方案" class="headerlink" title="第七章签名方案"></a>第七章签名方案</h1><p>重要应用：</p><ol><li>身份认证</li><li>数据完整性</li><li>不可否认性</li><li>匿名性</li></ol><h2 id="RSA签名"><a href="#RSA签名" class="headerlink" title="RSA签名"></a>RSA签名</h2><p>私钥加密来当作签名，从而保证了这个签名来自本人，其他人使用公钥解密验证。</p><p>私钥：</p><script type="math/tex; mode=display">(p,q,a)</script><p>公钥：</p><script type="math/tex; mode=display">(n,b)</script><p>其中,</p><script type="math/tex; mode=display">n=pq,ab=1(mod\phi(n))</script><script type="math/tex; mode=display">ver_k(x,y)=true\leftrightarrow x=y^b(mod\ n)</script><h2 id="ElGaml签名"><a href="#ElGaml签名" class="headerlink" title="ElGaml签名"></a>ElGaml签名</h2><p>私钥：</p><script type="math/tex; mode=display">(a)</script><p>公钥:</p><script type="math/tex; mode=display">(\alpha,\beta,p)</script><p>签名,k是随机数：</p><script type="math/tex; mode=display">sig_k(x,k)=(y,\delta)\\y=\alpha^kmod\ p,\delta=(x-ay)k^{-1}mod(p-1)</script><p>验证:</p><script type="math/tex; mode=display">ver_k(x,(y,\delta))=true\leftrightarrow \beta^yy^\delta =\alpha^x (mod\ p)</script><p>证明:</p><script type="math/tex; mode=display">\beta^yy^\delta=\alpha^{ay}\alpha^{k\delta}\\\delta=(x-ay)k^{-1}mod(p-1)\\所以,\beta^yy^\delta =\alpha^x(mod\space p)</script><h2 id="Schnorr-签名方案"><a href="#Schnorr-签名方案" class="headerlink" title="Schnorr 签名方案"></a>Schnorr 签名方案</h2><script type="math/tex; mode=display">公钥:(p,q,\alpha,\beta),私钥:(a),\beta=\alpha^a</script><p>其中，</p><script type="math/tex; mode=display">p\approx2^{1024},q\approx x^{160}，q|p-1\\\alpha是1模p的q次根，即:\alpha=\alpha_0^{(p-1)/q}mod\space p,\alpha_0是Z_p本原元</script><p>签名:</p><script type="math/tex; mode=display">sig_k(x,k)=(y,\delta)\\y=h(x||\alpha^kmod\space p),\delta=k+ay\space mod\space q</script><p>验证函数：</p><script type="math/tex; mode=display">ver_k(x,(y,\delta))=true\leftrightarrow h(x||\alpha^\delta\beta^{-y}mod\space p)=y</script><p>容易证明:</p><script type="math/tex; mode=display">\alpha^\delta\beta^{-y}=\alpha^k\space mod\space p</script><h2 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h2><p>DSA是结合了Schnorr的一种ElGmal的变形。</p><script type="math/tex; mode=display">公钥:(p,q,\alpha,\beta),私钥:(a)</script><p>其中</p><script type="math/tex; mode=display">512\leq|p|\leq 1024,|p|mod\space 64=0,q|p-1\\\alpha是1模p的q次根，即:\alpha=\alpha_0^{(p-1)/q}mod\space p,\alpha_0是Z_p本原元</script><p>签名:</p><script type="math/tex; mode=display">sig_k(x,k)=(y,\delta)\\y=(\alpha^kmod\ p)mod\ q,\delta=(SHA-1(x)+ay)k^{-1}mod\ q</script><p>其中，$k$为随机数，$x$是待签名的,若$y=0|\delta=0,k$要另取随机数</p><p>验证函数：</p><script type="math/tex; mode=display">ver_k(x,(y,\delta))=true\leftrightarrow (\alpha^{e_1}\beta^{e_2}mod\ p)mod\ q=y\\e_1=SHA-1(x)\delta^{-1}mod\ q,e_2=y\delta^{-1}mod\ q</script><p>证明：</p><script type="math/tex; mode=display">设f(x)=SHA-1(x)\\即证:\alpha^{e_1}\beta^{e_2}=\alpha^{k}\\\alpha^{e_1+ae_2}=\alpha^k\\\alpha^{\delta^{-1}(f(x)+ay)}=\alpha^k\\由,\delta =(f(x)+ay)k^{-1},QED</script><h2 id="一次签名"><a href="#一次签名" class="headerlink" title="一次签名"></a>一次签名</h2><h2 id="盲签名"><a href="#盲签名" class="headerlink" title="盲签名"></a>盲签名</h2><p>需要某人对一个文件签字，但又不让他知道文件内容</p><h2 id="不可否认签名"><a href="#不可否认签名" class="headerlink" title="不可否认签名"></a>不可否认签名</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;开始密码学的复习。&lt;/p&gt;
&lt;h1 id=&quot;一些知识点&quot;&gt;&lt;a href=&quot;#一些知识点&quot; class=&quot;headerlink&quot; title=&quot;一些知识点&quot;&gt;&lt;/a&gt;一些知识点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;信息安全的基本要求&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    <category term="密码学" scheme="http://example.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="http://example.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>计网2复习</title>
    <link href="http://example.com/2021/01/01/%E8%AE%A1%E7%BD%912%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2021/01/01/%E8%AE%A1%E7%BD%912%E5%A4%8D%E4%B9%A0/</id>
    <published>2021-01-01T11:59:35.000Z</published>
    <updated>2021-01-07T14:51:14.387Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><h1 id="IPv6的基础"><a href="#IPv6的基础" class="headerlink" title="IPv6的基础"></a>IPv6的基础</h1><h3 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h3><h3 id="IPv6协议的主要特征"><a href="#IPv6协议的主要特征" class="headerlink" title="IPv6协议的主要特征"></a>IPv6协议的主要特征</h3><ol><li>IPv6协议具有巨大的地址空间</li><li><p>IPv6具有自动将IP地址分配给用户的功能</p></li><li><p>协议首部的简化和改进</p></li><li>IPv6对ICMP进行了改进 </li><li>IPv6的分段只发生在源结点 </li><li>IPSec是IPv6的重要组成部分 </li><li>提供服务质量支持 </li><li>IPv6协议对移动性提供内置的支持 </li><li>IPv6路由简化</li></ol><h1 id="IPv6的首部"><a href="#IPv6的首部" class="headerlink" title="IPv6的首部"></a>IPv6的首部</h1><h3 id="IPv6的首部-1"><a href="#IPv6的首部-1" class="headerlink" title="IPv6的首部"></a>IPv6的首部</h3><p>路由器转发IPv6分组的过程v个转发分 组的网络结点（路由器）都检查逐跳选项中的信息。</p><p>选项类型，选项数据长度，选项数据</p><p>Pad1和PadN填充选项</p><p>超大有效荷载选项</p><p>路由器告警选项</p><ol><li>路由扩展首部</li></ol><p>用来指出IPv6分组在从源结点到目的结点的过程中，需 要经过的一个或多个网络中间结点（路由器）,即源路由</p><ol><li>分段扩展首部</li></ol><p>IPv6协议只允许源结点对分组进行分段，简化 了中间结点对分组的处理</p><ol><li>身份认证扩展首部</li></ol><p>用于实现数据的完整性和对分组来源的确认，完整 性保证了数据在传输过程中没有被篡改过，分组来 源的确认分组确实来自于源地址所标识的接口</p><ol><li>封装安全荷载扩展首部</li></ol><p>提供端到端的数据加密功能，以及无连接的完整性服务、 数据源认证、抗重发服务，还提供对通信流机密性的限制</p><ol><li>目的选项扩展首部</li></ol><p>携带只需要目的站点检验的可选信息，为中间结点 或目的结点指定分组的转发参数</p><h3 id="IPv6协议与相邻层协议的关系"><a href="#IPv6协议与相邻层协议的关系" class="headerlink" title="IPv6协议与相邻层协议的关系"></a>IPv6协议与相邻层协议的关系</h3><ol><li>高层协议使用的一些规则和上层校验和计 算</li></ol><p>IPv6伪首部格式：IPv6源地址、IPv6目的地址、上层协议包 长度、下一个首部字段</p><p> IPv6伪首部与上层协议构成校验和计算的内容</p><ol><li><p>IPv6协议与底层网络协议</p></li><li><p>IPv6与链路层MTU</p></li></ol><p>(1).IPv6支持使用ICMPv6的分组过大报文的路径 MTU发现过程</p><p>(2).允许通过采用分段扩展首部的方法，传输长度 超过1280字节的IPv6数据包。</p><ol><li><p>底层网络对IPv6协议的封装</p></li><li><p>IPv6CP的配置选项</p></li></ol><p>接口标识符,IPv6压缩协议</p><p>若已经用IPv6CP选项协商了接口标识符，可以不 用进行IPv6无状态地址配置协议中的重复地址检测</p><p>若没有协商成功有效的接口标识符，则可以采用手 工配置接口标识符</p><ol><li>IPv6与帧中继</li></ol><h1 id="IPv6地址结构"><a href="#IPv6地址结构" class="headerlink" title="IPv6地址结构"></a>IPv6地址结构</h1><p>IPv6地址长度是128位，包括16个字节</p><h2 id="地址格式分类"><a href="#地址格式分类" class="headerlink" title="地址格式分类"></a>地址格式分类</h2><h3 id="首选格式"><a href="#首选格式" class="headerlink" title="首选格式"></a>首选格式</h3><p>就是正常表示的形式，分为8个位段X:X:X:X:X:X:X:X</p><h3 id="压缩表示格式"><a href="#压缩表示格式" class="headerlink" title="压缩表示格式"></a>压缩表示格式</h3><ol><li>规定每个位段至少有一个数字，如“0000” 简写为“0”</li><li>多个连续位段0用两个冒号（双冒号）表示，简写为“::”，定双冒号在地址中只能出现一次</li></ol><h3 id="内嵌IPv4地址的IPv6地址格式"><a href="#内嵌IPv4地址的IPv6地址格式" class="headerlink" title="内嵌IPv4地址的IPv6地址格式"></a>内嵌IPv4地址的IPv6地址格式</h3><p>的最低32位可以用于表示IPv4地址，X:X:X:X:X:X:d.d.d.d</p><ul><li>IPv4映射的IPv6地址</li></ul><p>用于将IPV4节点表示为IPV6节点。允许IPV6 应用程序直接与IPV4应用程序通信</p><h2 id="IPv6前缀"><a href="#IPv6前缀" class="headerlink" title="IPv6前缀"></a>IPv6前缀</h2><p>IPv6地址被分成两个部分：子网前缀和接口标识符</p><p>e.g.4030:0:0:0:C9B4:FF12:48BC:1A27/60</p><h2 id="IPv6地址分类"><a href="#IPv6地址分类" class="headerlink" title="IPv6地址分类"></a>IPv6地址分类</h2><p>单播、多播、任播和特殊地址</p><h2 id="取消广播地址的原因"><a href="#取消广播地址的原因" class="headerlink" title="取消广播地址的原因"></a>取消广播地址的原因</h2><p>同一网络链路上的大量广播意味着该链路上的每个 结点都必须处理所有广播，但是其中绝大部分结点 最终将忽略该广播。</p><p>IPv6对此的解决办法是使用一个“所有结点”多播 地址来替代那些必须使用广播的情况。</p><h2 id="IPv6单播地址"><a href="#IPv6单播地址" class="headerlink" title="IPv6单播地址"></a>IPv6单播地址</h2><p>每个接口必须要有单播地址</p><h3 id="可汇聚全球单播地址"><a href="#可汇聚全球单播地址" class="headerlink" title="可汇聚全球单播地址"></a>可汇聚全球单播地址</h3><p>全球范围使用的IPv6公网地址。</p><h3 id="链路本地地址"><a href="#链路本地地址" class="headerlink" title="链路本地地址"></a>链路本地地址</h3><p>局域网之间的</p><h3 id="6to4地址"><a href="#6to4地址" class="headerlink" title="6to4地址"></a>6to4地址</h3><p>通信过程</p><ol><li>6to4地址到双协议栈路由器A</li><li>A提取到IPv4的地址</li><li>将原始IPv6数据封装，套上IPv4的头，就可以在IPv4网络上通信</li></ol><h3 id="ISATAP地址"><a href="#ISATAP地址" class="headerlink" title="ISATAP地址"></a>ISATAP地址</h3><p>也是IPv6中包含IPv4的地址，用于隧道，反正好像是在IPv4中通信的话都是先得到IPv4的目的地址然后再封装IPv6数据报使其变成IPv4的数据段。</p><h2 id="IPv6多播地址"><a href="#IPv6多播地址" class="headerlink" title="IPv6多播地址"></a>IPv6多播地址</h2><ul><li><p>多播指的是源结点发送的单个分组可以被指明的多个 目的结点收到，实现一对多的通信。</p></li><li><p>前8位为1</p></li></ul><h2 id="IPv6任播地址"><a href="#IPv6任播地址" class="headerlink" title="IPv6任播地址"></a>IPv6任播地址</h2><p>多个结点共享一个任播地址，但是只有一个能够接受任播地址分组</p><h2 id="IPv6地址配置技术"><a href="#IPv6地址配置技术" class="headerlink" title="IPv6地址配置技术"></a>IPv6地址配置技术</h2><h3 id="IPv6主机无状态自动配置过程"><a href="#IPv6主机无状态自动配置过程" class="headerlink" title="IPv6主机无状态自动配置过程"></a>IPv6主机无状态自动配置过程</h3><p>只能局域网之间使用?</p><p>•根据接口标识产生链路本地地址。</p><p> •发出邻居请求，进行重复地址检测。 </p><p>•如地址冲突，则停止自动配置，需要手工配置。</p><p> •如不冲突，链路本地地址生效，节点具备本地链路通信能力。 </p><p>•主机会发送RS报文（或接收到设备定期发送的RA报文）。 </p><p>•根据RA报文中的前缀信息和接口标识得到IPv6地址。</p><h3 id="DHCPv6有状态地址分配"><a href="#DHCPv6有状态地址分配" class="headerlink" title="DHCPv6有状态地址分配"></a>DHCPv6有状态地址分配</h3><p>DHCPv6地址续租：</p><ol><li>renew</li><li>rebind</li></ol><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h3 id="AAA"><a href="#AAA" class="headerlink" title="AAA"></a>AAA</h3><h3 id="A6"><a href="#A6" class="headerlink" title="A6"></a>A6</h3><h1 id="ICMPv6"><a href="#ICMPv6" class="headerlink" title="ICMPv6"></a>ICMPv6</h1><h2 id="ICMPv6差错报文"><a href="#ICMPv6差错报文" class="headerlink" title="ICMPv6差错报文"></a>ICMPv6差错报文</h2><h3 id="目的地不可达报文"><a href="#目的地不可达报文" class="headerlink" title="目的地不可达报文"></a>目的地不可达报文</h3><p>该报文发送给源地址</p><h3 id="分组过大报文"><a href="#分组过大报文" class="headerlink" title="分组过大报文"></a>分组过大报文</h3><p>分组的大小超过输出链路MTU</p><h3 id="超时报文"><a href="#超时报文" class="headerlink" title="超时报文"></a>超时报文</h3><p>遇到了跳数限制为0的IPv6分组</p><h3 id="参数问题报文"><a href="#参数问题报文" class="headerlink" title="参数问题报文"></a>参数问题报文</h3><p>如果一个IPv6首部中有错误，或者扩展首部出现问题，而 无法完成分组传输，目的结点或路由器就会丢弃这个分组， 并且给出ICMPv6参数问题（Parameter Problem）报文。 参数问题报文中包含了错误问题类型和错误的位置</p><h2 id="ICMPv6查询报文"><a href="#ICMPv6查询报文" class="headerlink" title="ICMPv6查询报文"></a>ICMPv6查询报文</h2><h3 id="回声请求报文"><a href="#回声请求报文" class="headerlink" title="回声请求报文"></a>回声请求报文</h3><h3 id="回声应答报文"><a href="#回声应答报文" class="headerlink" title="回声应答报文"></a>回声应答报文</h3><p>我的理解是这两个应该是可以用来判断结点是否还存活等或者是否符合要求的请求报文，用来诊断！</p><h3 id="多播监听发现协议"><a href="#多播监听发现协议" class="headerlink" title="多播监听发现协议"></a>多播监听发现协议</h3><p>用于管理多播组。</p><ol><li>多播监听发现报文</li><li>多播监听查询报文</li></ol><p>查询邻居接口的多播监听状态，以确定哪 些多播组仍然有成员在路由器直连的链路（网络）上</p><ol><li>多播监听报告报文</li></ol><p>相当于响应报文</p><ol><li>多播监听完成报文</li></ol><p>告知路由器将要离开多播组</p><h3 id="IPv6邻居发现协议"><a href="#IPv6邻居发现协议" class="headerlink" title="IPv6邻居发现协议"></a>IPv6邻居发现协议</h3><p>确定邻居结点之间关系</p><ol><li><p>路由器请求报文</p></li><li><p>路由器通告报文</p></li><li><p>邻居请求报文</p><p>邻居可达性检测</p><p>发现本地链路节点的链路层地址</p><p>还可以用来重复地址探测DAD</p></li><li><p>邻居通告报文</p></li><li><p>重定向报文</p></li></ol><p>告诉结点在去往给定目 的地的路径上更优的下一跳结点地址</p><h1 id="IPv6路由"><a href="#IPv6路由" class="headerlink" title="IPv6路由"></a>IPv6路由</h1><h2 id="RIPng协议"><a href="#RIPng协议" class="headerlink" title="RIPng协议"></a>RIPng协议</h2><h2 id="OSPFv3协议"><a href="#OSPFv3协议" class="headerlink" title="OSPFv3协议"></a>OSPFv3协议</h2><h3 id="Hello报文"><a href="#Hello报文" class="headerlink" title="Hello报文"></a>Hello报文</h3><p>初始化 并维护邻居 关系</p><h3 id="数据库描述报文"><a href="#数据库描述报文" class="headerlink" title="数据库描述报文"></a>数据库描述报文</h3><p>在邻居关 系建立过 程中交互 路由信息</p><h3 id="链路状态请求报文"><a href="#链路状态请求报文" class="headerlink" title="链路状态请求报文"></a>链路状态请求报文</h3><h3 id="链路状态更新报文"><a href="#链路状态更新报文" class="headerlink" title="链路状态更新报文"></a>链路状态更新报文</h3><p>用来实现LSA的洪泛，每个链路状态更新报文携带一组 LSA，可以包含几个不同的LSA</p><h3 id="链路状态确认报文"><a href="#链路状态确认报文" class="headerlink" title="链路状态确认报文"></a>链路状态确认报文</h3><p>链路状态确认报文用来对洪泛的LSA进行确认，目的是保 证洪泛的可靠性</p><h2 id="BGP4-协议"><a href="#BGP4-协议" class="headerlink" title="BGP4+协议"></a>BGP4+协议</h2><ul><li><p>路径向量中记录了路由所经过路径上的所有 AS列表</p></li><li><p>通过4种类型的报文进行路由信息交换，维 护路由信息的状态</p></li></ul><h3 id="OPEN报文"><a href="#OPEN报文" class="headerlink" title="OPEN报文"></a>OPEN报文</h3><h3 id="UPDATE报文"><a href="#UPDATE报文" class="headerlink" title="UPDATE报文"></a>UPDATE报文</h3><h3 id="通知报文"><a href="#通知报文" class="headerlink" title="通知报文"></a>通知报文</h3><p>用于报告BGP4+错误</p><h3 id="生命期报文"><a href="#生命期报文" class="headerlink" title="生命期报文"></a>生命期报文</h3><p>用于防止BGP4+连接过期</p><h1 id="多播路由"><a href="#多播路由" class="headerlink" title="多播路由"></a>多播路由</h1><ol><li>需要有唯一一个标识多播组的机制</li><li>需要有多播组成员加入或退出多播组的 机制。</li><li>在IP网络上高效传送多播分组到各个组 成员的多播路由器协议。</li></ol><ul><li>一个多播组可以跨越多个网络。</li><li>一台主机可以同时属于多个多播组。</li></ul><p>多个物理网络的多播情况：</p><ul><li>如果网络硬件层没有多播设备支持，则需要使 用隧道（tunneling）技术。</li></ul><p>即多播分组封装在单播分组中，在接收端再把这 一个分组转变成多播分组。</p><h1 id="移动IPv6"><a href="#移动IPv6" class="headerlink" title="移动IPv6"></a>移动IPv6</h1><ol><li>不需要外地代理来转发移动节点的分组。</li><li>同时采用<strong>隧道技术</strong>和<strong>源路由技术</strong>向 连接在外地链路上的移动节点传送分组</li><li>代理发现、注 册和选路</li></ol><p>当移动IPv6结点连接到外地链路时：</p><ol><li>移动结点采用IPv6的路由器搜索机制确定它的转交地址</li><li>采用IPv6的地址自动配置方法获得外地链路上的转交地 址，以及默认路由器，并将最新的转交地址通知家乡代 理，进行注册</li></ol><h2 id="动态家乡代理地址发现机制"><a href="#动态家乡代理地址发现机制" class="headerlink" title="动态家乡代理地址发现机制"></a>动态家乡代理地址发现机制</h2><p>家乡网络有可能会 重新配置，原来的家乡代理也许会被其它路由 器代替，这时移动节点就不知道家乡代理的IP 地址。 移动IPv6提供了一个动态家乡代理地址发现机 制，使得移动节点能动态地发现家乡代理的IP 地址，从而向家乡代理注册它的转交地址。</p><p>发送ICMP家乡代理地址发现请求报文，</p><p>1.　移动检测<br>2.　获取转交地址<br>3.　转交地址注册<br>4.　隧道转发机制/三角路由<br>5.　动态家乡代理地址发现过程</p><h1 id="IPv6安全"><a href="#IPv6安全" class="headerlink" title="IPv6安全"></a>IPv6安全</h1><ol><li><p>侦查攻击</p></li><li><p>洪泛攻击</p></li><li><p>协议欺骗攻击</p></li><li><p>基于IPv6邻居发现协议的DoS攻击</p><p>一：使认为其邻居正常与其连接</p><p>二：高速它申请的IP被占用</p></li><li><p>无状态自动配置带来问题</p></li><li><p>过渡机制带来的安全问题</p></li></ol><p>隧道帮助了入侵者避开进入过滤检测 </p><p>特别是自动隧道机制，容易引入DoS、地址盗用和 服务欺骗</p><h2 id="IPv6中的认证"><a href="#IPv6中的认证" class="headerlink" title="IPv6中的认证"></a>IPv6中的认证</h2><p>AH:</p><ol><li>无连接的数据完整性验证</li><li>数据源身份 认证</li><li>防重放攻击</li></ol><h2 id="IPv6中的加密"><a href="#IPv6中的加密" class="headerlink" title="IPv6中的加密"></a>IPv6中的加密</h2><p>ESP提 供报文鉴别、完整性及保密，能做AH中的所有事情,并且增加了保密。</p><h2 id="邻居缓存欺骗攻击"><a href="#邻居缓存欺骗攻击" class="headerlink" title="邻居缓存欺骗攻击"></a>邻居缓存欺骗攻击</h2><p>攻击者在邻居通告数据包中添加随意的链 路地址值，当发送主机接收到攻击者发送的邻居通告报文 后，更新自己的邻居缓存信息</p><h2 id="邻居不可达检测攻击"><a href="#邻居不可达检测攻击" class="headerlink" title="邻居不可达检测攻击"></a>邻居不可达检测攻击</h2><p>当检测主机开始进行邻居不可达检测的时候，攻击主机可 以发送虚假的邻居通告报文。</p><h2 id="重复地址检测攻击"><a href="#重复地址检测攻击" class="headerlink" title="重复地址检测攻击"></a>重复地址检测攻击</h2><p>攻击主机可以通过伪造一个NA，告诉受攻击主机申请的IPv6 地址已被占用，使得受攻击主机不得使用该IPv6地址进行 网络通信，从而达到欺骗请求主机</p><h2 id="虚假路由通告"><a href="#虚假路由通告" class="headerlink" title="虚假路由通告"></a>虚假路由通告</h2><p>攻击者通过<strong>伪装成默认路由器</strong>向用户发送欺诈的路由器通 告报文，其他用户将虚假信息存入到自己的路由表中后， 子网中的所有其他IPv6结点将它们的数据包发往攻击主机</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;h1 id=&quot;IPv6的基础&quot;&gt;&lt;a href=&quot;#IPv6的基础&quot; class=&quot;headerlink&quot; title=&quot;IPv6的基础&quot;&gt;&lt;/a&gt;IPv6的基础&lt;/h1&gt;&lt;h3 id=&quot;RFC&quot;&gt;&lt;a href=&quot;#RFC&quot; class=&quot;head</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>黑客认识</title>
    <link href="http://example.com/2020/12/30/%E9%BB%91%E5%AE%A2%E8%AE%A4%E8%AF%86/"/>
    <id>http://example.com/2020/12/30/%E9%BB%91%E5%AE%A2%E8%AE%A4%E8%AF%86/</id>
    <published>2020-12-29T17:00:34.000Z</published>
    <updated>2020-12-30T07:59:16.329Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><p>AP</p><p>网关</p><p>二级路由器?????????????????</p><p>PPPOE得到动态ip地址</p><p>Qos路由器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;AP&lt;/p&gt;
&lt;p&gt;网关&lt;/p&gt;
&lt;p&gt;二级路由器?????????????????&lt;/p&gt;
&lt;p&gt;PPPOE得到动态ip地址&lt;/p&gt;
&lt;p&gt;Qos路由器&lt;/p&gt;
</summary>
      
    
    
    
    <category term="黑客" scheme="http://example.com/categories/%E9%BB%91%E5%AE%A2/"/>
    
    
    <category term="黑客" scheme="http://example.com/tags/%E9%BB%91%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>签名方案</title>
    <link href="http://example.com/2020/12/15/%E7%AD%BE%E5%90%8D%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2020/12/15/%E7%AD%BE%E5%90%8D%E6%96%B9%E6%A1%88/</id>
    <published>2020-12-15T07:20:06.000Z</published>
    <updated>2020-12-15T16:49:03.733Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><h1 id="签名方案"><a href="#签名方案" class="headerlink" title="签名方案"></a>签名方案</h1><p>说一下对签名方案的理解，原理就是使用发送方使用私钥加密，接收方使用公钥来解密，看看解密出来的结果是不是和发送方发过来的原文或者原文的摘要($hash$)，由于是私钥的原因则可以保证必定是出自发送方手里的。</p><h2 id="ElGamal签名方案"><a href="#ElGamal签名方案" class="headerlink" title="ElGamal签名方案"></a>ElGamal签名方案</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>公钥:</p><script type="math/tex; mode=display">(p,\alpha,\beta)，其中\beta=a^\alpha</script><p>私钥：</p><script type="math/tex; mode=display">(a)</script><p>待签名数：$x$,随机数：$k$，签名函数：</p><script type="math/tex; mode=display">sig_k(x,k)=(y,\delta)</script><p>其中，</p><script type="math/tex; mode=display">y=\alpha^kmod\space p,\delta=(x-ay)k^{-1}mod(p-1)</script><p>验证函数:</p><script type="math/tex; mode=display">ver_k(x,(y,\delta))=true\leftrightarrow \beta^yy^\delta=\alpha^x(mod \space p)</script><p>证明:</p><script type="math/tex; mode=display">\beta^yy^\delta=\alpha^{ay}\alpha^{k\delta}\\\delta=(x-ay)k^{-1}mode(p-1)\\所以,\beta^yy^\delta =\alpha^x(mod\space p)</script><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h2 id="Schnorr-签名方案"><a href="#Schnorr-签名方案" class="headerlink" title="Schnorr 签名方案"></a>Schnorr 签名方案</h2><script type="math/tex; mode=display">公钥:(p,q,\alpha,\beta),私钥:(a),\beta=\alpha^a</script><p>其中，</p><script type="math/tex; mode=display">p\approx2^{1024},q\approx x^{160}，q|p-1\\\alpha是1模p的q次根，即:\alpha=\alpha_0^{(p-1)/q}mod\space p,\alpha_0是Z_p本原元</script><p>签名:</p><script type="math/tex; mode=display">sig_k(x,k)=(y,\delta)\\y=h(x||\alpha^kmod\space p),\delta=k+ay\space mod\space q</script><p>验证函数：</p><script type="math/tex; mode=display">ver_k(x,(y,\delta))=true\leftrightarrow h(x||\alpha^\delta\beta^{-y}mod\space p)=y</script><p>容易证明:</p><script type="math/tex; mode=display">\alpha^\delta\beta^{-y}=\alpha^k\space mod\space p</script><h2 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a>DSA</h2><p>DSA是结合了Schnorr的一种ElGmal的变形。</p><script type="math/tex; mode=display">公钥:(p,q,\alpha,\beta),私钥:(a)</script><p>其中</p><script type="math/tex; mode=display">512\leq|p|\leq 1024,|p|mod\space 64=0,q|p-1\\\alpha是1模p的q次根，即:\alpha=\alpha_0^{(p-1)/q}mod\space p,\alpha_0是Z_p本原元</script><p>签名:</p><script type="math/tex; mode=display">sig_k(x,k)=(y,\delta)\\y=(\alpha^kmod\ p)mod\ q,\delta=(SHA-1(x)+ay)k^{-1}mod\ q</script><p>其中，$k$为随机数，$x$是待签名的,若$y=0|\delta=0,k$要另取随机数</p><p>验证函数：</p><script type="math/tex; mode=display">ver_k(x,(y,\delta))=true\leftrightarrow (\alpha^{e_1}\beta^{e_2}mod\ p)mod\ q=y\\e_1=SHA-1(x)\delta^{-1}mod\ q,e_2=y\delta^{-1}mod\ q</script><p>证明：</p><script type="math/tex; mode=display">设f(x)=SHA-1(x)\\即证:\alpha^{e_1}\beta^{e_2}=\alpha^{k}\\\alpha^{e_1+ae_2}=\alpha^k\\\alpha^{\delta^{-1}(f(x)+ay)}=\alpha^k\\由,\delta =(f(x)+ay)k^{-1},QED</script>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;h1 id=&quot;签名方案&quot;&gt;&lt;a href=&quot;#签名方案&quot; class=&quot;headerlink&quot; title=&quot;签名方案&quot;&gt;&lt;/a&gt;签名方案&lt;/h1&gt;&lt;p&gt;说一下对签名方案的理解，原理就是使用发送方使用私钥加密，接收方使用公钥来解密，看看解密出来的结果</summary>
      
    
    
    
    <category term="密码学" scheme="http://example.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="http://example.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://example.com/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2020-12-12T15:37:07.000Z</published>
    <updated>2020-12-29T12:29:34.335Z</updated>
    
    <content type="html"><![CDATA[<hr><meta name="referrer" content="no-referrer"><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><ol><li><p>理解记忆，多思考确实哦</p></li><li><p>抓住重点</p></li></ol><p>按五层，各层协议，网络设备</p><h3 id="计算机网络概念，组成，功能和分类"><a href="#计算机网络概念，组成，功能和分类" class="headerlink" title="计算机网络概念，组成，功能和分类"></a>计算机网络概念，组成，功能和分类</h3><p> 计网的作用：将计算机系统(端系统)，通过通信设备（交换机，路由器）与线路连接起来，成为一个系统。</p><h4 id="计算机网络的功能"><a href="#计算机网络的功能" class="headerlink" title="计算机网络的功能"></a>计算机网络的功能</h4><ol><li><p>数据通信</p></li><li><p>资源共享</p></li></ol><p>硬件，软件，数据资源的共享</p><ol><li>分布式处理</li></ol><p>多台计算机承担一个工作任务的不同部分</p><ol><li>提高可靠性</li></ol><p>通过一些互补的操作，或者说是兜底的操作来使得这个系统更加可靠</p><ol><li><p>负载均衡</p><h4 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h4></li><li><p>组成部分</p></li></ol><p>硬件，软件，协议</p><ol><li>工作方式</li></ol><p>-边缘部分 （主机，端系统)</p><p>-核心部分，为边缘部分提供服务的，就是路由器,网络那种啦</p><ol><li>功能组成</li></ol><p>-通信子网 (OSI下三层)</p><p>-资源子网 (OSI上三层 )</p><h4 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h4><ol><li>按分布范围</li></ol><p>广域网，城域网，局域网，个人区域网</p><ol><li>按使用者</li></ol><p>-公用网</p><p>-专用网</p><ol><li>交换技术</li></ol><p>-电路交换</p><p>-报文交换</p><p>-分组交换</p><ol><li>按拓扑结构</li></ol><p>总线型，星型，环型，网状型</p><ol><li>按传输技术</li></ol><ul><li>广播式网络 ———公共通信</li><li>点对点网络 ——— 分组转发，路由选择</li></ul><h3 id="标准化工作及其相关组织"><a href="#标准化工作及其相关组织" class="headerlink" title="标准化工作及其相关组织"></a>标准化工作及其相关组织</h3><h4 id="标准化工作"><a href="#标准化工作" class="headerlink" title="标准化工作"></a>标准化工作</h4><p>要有统一的标准才能实现互通：OSI，TCP/IP等</p><h5 id="RFC"><a href="#RFC" class="headerlink" title="RFC"></a>RFC</h5><ul><li>因特网标准的形式</li></ul><p>RFC$\rightarrow$因特网正式标准</p><ol><li>因特网草案</li><li>建议标准———-成为RFC文档</li><li>草案标准</li><li>因特网标准</li></ol><h5 id="相关组织"><a href="#相关组织" class="headerlink" title="相关组织"></a>相关组织</h5><ol><li>ISO ———OSI模型</li><li>ITU</li><li>IEEE</li><li>IETF</li></ol><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><h5 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h5><p>又称比特率，数据传输率,即传送数据位数的速率</p><p>单位：b/s,kb/s,Mb/s,Gb/s,Tb/s</p><script type="math/tex; mode=display">1Byte=8bit</script><script type="math/tex; mode=display">1KB=1024B=1024*8b</script><h5 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h5><p>最高数据率，是指在发送端能够传输的最高数据率，因为在链路中使用电磁波传输的</p><p>单位：b/s,kb/s,Mb/s,Gb/s,Tb/s</p><h5 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h5><p>单位时间内，通过某个网络（信道，接口）的数据量。</p><p>单位：b/s,kb/s,Mb/s,Gb/s,Tb/s</p><h5 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h5><ol><li><p>传输时延 ：所有数据推到链路上</p><script type="math/tex; mode=display">发送时延=\frac{数据长度}{信道带宽（发送速率）}</script></li><li><p>传播时延：发生在信道外</p><script type="math/tex; mode=display">传播时延=\frac{信道长度}{电磁波在信道上的传播速率}</script></li><li><p>排队时延：等待时间</p></li><li><p>处理时延：检错，找出口</p></li></ol><p>排队时延，处理时延一般是在路由器发生的</p><h5 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h5><p>即某段链路有多少比特数据</p><script type="math/tex; mode=display">时延带宽积=传播时延*带宽</script><p>单位：$bit$</p><h5 id="RTT"><a href="#RTT" class="headerlink" title="RTT"></a>RTT</h5><p>从发送到收到确认的时间</p><h5 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h5><ol><li><p>信道利用率</p><script type="math/tex; mode=display">信道利用率=\frac{有数据通过时间}{全部时间}</script></li><li><p>网络利用率：信道利用率的加权平均</p></li></ol><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><h4 id="认识分层"><a href="#认识分层" class="headerlink" title="认识分层"></a>认识分层</h4><ul><li><p>服务：下层位上层提供服务</p></li><li><p>实体</p></li><li>协议(语法，语义，同步)</li></ul><p>其实语法就是一串0/1的序列如果取分割，比如说前几个是用来干嘛的</p><p>语义就是具体这一段的怎么实现，比如001是a含义，010是b含义</p><ul><li>接口（每两个层次间的）</li></ul><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201213160327286.png" alt="image-20201213160327286"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/01.png" alt="01"></p><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>上面四层是端到端的，下面三层是点到点的，有中间系统的存在。</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201213161733574.png" alt="image-20201213161733574"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201213164151255.png" alt="image-20201213164151255"></p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>和用户交互产生网络流量的程序</p><h5 id="典型"><a href="#典型" class="headerlink" title="典型"></a>典型</h5><ul><li>文件传输(FTP)</li><li>电子邮件(SMTP)</li><li>万维网(HTTP)</li></ul><h4 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h4><p>处理两个通信系统中交换信息的表示方式</p><h5 id="数据格式变换"><a href="#数据格式变换" class="headerlink" title="数据格式变换"></a>数据格式变换</h5><p>e.g.变成jpg格式图片</p><h5 id="数据加密解密"><a href="#数据加密解密" class="headerlink" title="数据加密解密"></a>数据加密解密</h5><h5 id="数据压缩和回复"><a href="#数据压缩和回复" class="headerlink" title="数据压缩和回复"></a>数据压缩和回复</h5><h4 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h4><p>向进程提供<strong>建立连接</strong>并在连接上有序地传输数据</p><p>会话之间相互独立</p><h5 id="建立，管理，终止会话"><a href="#建立，管理，终止会话" class="headerlink" title="建立，管理，终止会话"></a>建立，管理，终止会话</h5><h5 id="恢复通信"><a href="#恢复通信" class="headerlink" title="恢复通信"></a>恢复通信</h5><p>使用校验点使得如果通信失效的话可以从校验点处继续回复通信</p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>负责主机中<strong>两个进程</strong>的通信，即端到端的通信。</p><p>传输单位：报文段或用户数据包</p><h5 id="可靠传输-不可靠传输"><a href="#可靠传输-不可靠传输" class="headerlink" title="可靠传输,不可靠传输"></a>可靠传输,不可靠传输</h5><p>可靠传输TCP：建立连接，返回确认</p><h5 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h5><p>对错误的信息进行纠错</p><h5 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h5><p>控制发送方的速率，根据拥塞的返回来调节</p><h5 id="复用分用"><a href="#复用分用" class="headerlink" title="复用分用"></a>复用分用</h5><p>多个用户使用一个IO资源 <strong>发送消息</strong> 时，我们称之为“<strong>复用</strong>”。</p><p>多个用户使用一个IO资源 <strong>接收消息</strong> 时，我们称之为 “<strong>分用</strong>” 。</p><p>操作系统的 <strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）发送数据称为<strong>复用</strong></p><p>同理，接收时叫做 <strong>分用</strong>。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>将分组从源端传到目的端，传输单位：数据报</p><h5 id="路由选择"><a href="#路由选择" class="headerlink" title="路由选择"></a>路由选择</h5><p>走不同的路，根据路由表啥的来选择经过的路由</p><h5 id="流量控制-1"><a href="#流量控制-1" class="headerlink" title="流量控制"></a>流量控制</h5><p>同传输层</p><h5 id="差错控制-1"><a href="#差错控制-1" class="headerlink" title="差错控制"></a>差错控制</h5><p>奇偶校验码等来判断是否发生错误</p><h5 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h5><p>全局性的，大量节点发生拥塞</p><h5 id="主要协议"><a href="#主要协议" class="headerlink" title="主要协议"></a>主要协议</h5><p>IP,IPX,ICMP,IGNP,ARP,RARP,OSPF</p><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>将网络层传下来的数据包组装成<strong>帧</strong>（传输单位）</p><h5 id="成帧"><a href="#成帧" class="headerlink" title="成帧"></a>成帧</h5><p>定义帧的开始和结束</p><h5 id="差错控制-2"><a href="#差错控制-2" class="headerlink" title="差错控制"></a>差错控制</h5><p>帧错+位错</p><h5 id="流量控制-2"><a href="#流量控制-2" class="headerlink" title="流量控制"></a>流量控制</h5><h5 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h5><p>控制共享信道的访问</p><h5 id="主要协议-1"><a href="#主要协议-1" class="headerlink" title="主要协议"></a>主要协议</h5><p>SDLC,HDLC,PPP,STP</p><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>在物理媒体上实现比特流的透明传输</p><p>透明传输：给什么发生什么</p><h5 id="定义接口特性"><a href="#定义接口特性" class="headerlink" title="定义接口特性"></a>定义接口特性</h5><h5 id="定义传输模式"><a href="#定义传输模式" class="headerlink" title="定义传输模式"></a>定义传输模式</h5><p>单工：只能一个人</p><p>半双工</p><p>双工：两个人可以双向</p><h5 id="定义传输速率"><a href="#定义传输速率" class="headerlink" title="定义传输速率"></a>定义传输速率</h5><h5 id="比特同步"><a href="#比特同步" class="headerlink" title="比特同步"></a>比特同步</h5><h5 id="比特编码"><a href="#比特编码" class="headerlink" title="比特编码"></a>比特编码</h5><h5 id="主要协议-2"><a href="#主要协议-2" class="headerlink" title="主要协议"></a>主要协议</h5><p>Rj45,802.3</p><h3 id="1-23TCP-IP"><a href="#1-23TCP-IP" class="headerlink" title="1.23TCP/IP"></a>1.23TCP/IP</h3><h4 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h4><p>数据链路层+物理层</p><h4 id="网际层"><a href="#网际层" class="headerlink" title="网际层"></a>网际层</h4><p>网络层</p><h4 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h4><h4 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h4><p>应用层+表示层+会话层</p><h3 id="5层参考模型"><a href="#5层参考模型" class="headerlink" title="5层参考模型"></a>5层参考模型</h3><p>应用层</p><p>传输层</p><p>网络层</p><p>数据链路层</p><p>物理层</p><h2 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h2><p>先不看</p><h2 id="第三章-链路层"><a href="#第三章-链路层" class="headerlink" title="第三章 链路层"></a>第三章 链路层</h2><p>研究思想：水平</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>结点：主机，路由器</li></ul><ul><li>链路：结点之间的物理通道</li></ul><ul><li>数据链路：逻辑通道</li></ul><ul><li>帧：封装网络层数据报</li></ul><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201217171953893.png" alt="image-20201217171953893"></p><ul><li><p>帧同步：接收方可以区分出帧的起始和截止</p></li><li><p>MTU:最大传送单元（数据部分即ip数据包部分的长度最大值）</p><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><p>在链路层中所有比特组合都可以通过，因为可能逆传输帧的时候可能一个帧的头和尾的字节可能会在数据中产生重复之类的情况导致帧的识别的错误或者是接受时其他问题，所以我们要做的就是保证所有比特组合都可以通过</p></li></ul><ol><li><p>字符计数法</p><p>一错就后面都错</p></li><li><p>字符填充法</p></li></ol><p>$SOH,EOT$</p><p>添加了转义字符使得接收方把与$SOH,EOT$相同的字节按照数据接收，从而达到了透明传输</p><ol><li>零比特传输发</li></ol><p>首部和尾部的标识符一样，都是$01111110$,发送端时数据部分只要是连续五个一后面立即加零，就永远不可能有六个零的情况，在接受的时候再遇到五个一删零还原即可，从而实现了透明传输</p><ol><li>违规编码法</li></ol><p>高-高，低-低定界帧的起始和终止</p><h3 id="差错控制-3"><a href="#差错控制-3" class="headerlink" title="差错控制"></a>差错控制</h3><p>差错由噪声引起。</p><ul><li>位错：比特位出错</li></ul><h4 id="检错编码"><a href="#检错编码" class="headerlink" title="检错编码"></a>检错编码</h4><ol><li>奇偶校验码</li></ol><p>奇校验：加了奇校验码1总数为奇数</p><p>偶校验：加了偶校验码1总数为偶数</p><p>$tips:$只能检出出来奇数个比特错误</p><ol><li>循环冗余码CRC</li></ol><h4 id="纠错编码海明码"><a href="#纠错编码海明码" class="headerlink" title="纠错编码海明码"></a>纠错编码海明码</h4><p>发现双比特，纠正单比特</p><p>思想：每个效验码都是单单对应一个二进制的位，比如第一位错了，那就可以直到是数的第一位有1的错了。比如$5:0101$,最后一位为1……….然后全部位弄出来就知道…..</p><h4 id="确定效验码位数r"><a href="#确定效验码位数r" class="headerlink" title="确定效验码位数r"></a>确定效验码位数r</h4><p>海明不等式：</p><script type="math/tex; mode=display">2^r\geq k+r+1</script><p>r为冗余信息位，k为原始信息位</p><h4 id="确定校验码和数据的位置"><a href="#确定校验码和数据的位置" class="headerlink" title="确定校验码和数据的位置"></a>确定校验码和数据的位置</h4><p>效验码都是放在$2^j$位置上</p><h4 id="求出校验码的值"><a href="#求出校验码的值" class="headerlink" title="求出校验码的值"></a>求出校验码的值</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201217204418406.png" alt="image-20201217204418406"></p><h4 id="检错并纠错"><a href="#检错并纠错" class="headerlink" title="检错并纠错"></a>检错并纠错</h4><p>所有要校验的位进行异或运算</p><ul><li>帧错</li></ul><ol><li>丢失</li><li>重复</li><li>失序</li></ol><h3 id="流量控制-3"><a href="#流量控制-3" class="headerlink" title="流量控制"></a>流量控制</h3><p>就是根据接收方的接受能力调整发送方的发送数据的速度。</p><p>链路层：点对点（相邻结点），收不下不回复$ACK$</p><p>传输层：端对端，发窗口通告</p><h4 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h4><p>其实就是窗口为1的滑动窗口</p><ul><li>原理：</li></ul><p>发送一个分组就停止发送，收到一个确认帧再发送下一个帧</p><h5 id="差错情况"><a href="#差错情况" class="headerlink" title="差错情况"></a>差错情况</h5><ol><li>数据帧丢失或帧错误</li></ol><p>超时计时器：大于平均$RTT$</p><p>确认以及超时则重传机制</p><p>$tips:$保留副本，帧，确认帧编号！</p><p>信道利用率：</p><script type="math/tex; mode=display">信道利用率=(L/C)/T=\frac{T_D}{T_D+RTT+T_A}</script><p>信道吞吐率=信道利用率*发送方的发送速率</p><h4 id="后退N步GBN协议"><a href="#后退N步GBN协议" class="headerlink" title="后退N步GBN协议"></a>后退N步GBN协议</h4><ol><li>增加序号范围</li><li>缓存多个分组</li></ol><p>发送窗口：允许发送的帧的序号窗口</p><ol><li>发送完的窗口</li><li>已经发送待确认的</li><li>还不能发送的</li></ol><p>接收窗口：允许接受帧的序号窗口</p><h5 id="GBN发送方"><a href="#GBN发送方" class="headerlink" title="GBN发送方"></a>GBN发送方</h5><ol><li>检查窗口是否满了，未满就发送帧</li><li><strong>累计确认</strong>，包括这个帧以及之前序号的都收到了</li><li>超时会发送所有发送但是未被确认的帧</li></ol><h5 id="GBN接收方"><a href="#GBN接收方" class="headerlink" title="GBN接收方"></a>GBN接收方</h5><ol><li>收到正确的n号帧，发送$ACK N$给发送方，并把帧中的数据部分交给上层</li><li>丢弃帧，为最近按序接受的帧发送$ACK$</li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201217212508110.png" alt="image-20201217212508110"></p><p>发送窗口长度</p><script type="math/tex; mode=display">1\leq W_T\leq2^n-1</script><p>接受窗口长度为1</p><h4 id="选择重传协议"><a href="#选择重传协议" class="headerlink" title="选择重传协议"></a>选择重传协议</h4><p>因为后退N步协议一旦出错会把之前正确传输的也要重新传输所以就有了选择重传一说。</p><p>改变：</p><ol><li>不再有累计确认，每次返回的都只是单独的ACK</li><li>接收方和发送方都只有滑动窗口的第一个完成了才能继续往前移动</li></ol><h5 id="发送方"><a href="#发送方" class="headerlink" title="发送方"></a>发送方</h5><ol><li>上层调用</li><li>收到一个$ACK$</li><li>超时事件</li></ol><h5 id="接收方"><a href="#接收方" class="headerlink" title="接收方"></a>接收方</h5><ol><li>窗口内的帧来者不拒</li><li>其余情况</li></ol><h5 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h5><script type="math/tex; mode=display">W_T=W_R=2^{n-1}</script><h3 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h3><h4 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h4><p>又叫做信道划分介质访问控制，为什么叫做这个名字可能是因为就是已经提前就已经划分好了信道，固定了每个用户所占的带宽比例，不是动态的，所以有“信道划分”。</p><h5 id="频分多路复用FDM"><a href="#频分多路复用FDM" class="headerlink" title="频分多路复用FDM"></a>频分多路复用FDM</h5><h5 id="时分多路复用TDM"><a href="#时分多路复用TDM" class="headerlink" title="时分多路复用TDM"></a>时分多路复用TDM</h5><h5 id="波分多路复用WDM"><a href="#波分多路复用WDM" class="headerlink" title="波分多路复用WDM"></a>波分多路复用WDM</h5><h5 id="码分多路复用CDM"><a href="#码分多路复用CDM" class="headerlink" title="码分多路复用CDM"></a>码分多路复用CDM</h5><h4 id="动态分配信道"><a href="#动态分配信道" class="headerlink" title="动态分配信道"></a>动态分配信道</h4><p><strong>随机访问介质访问控制</strong>，所有用户随机发送信息，导致不协调！</p><h5 id="ALOHA协议"><a href="#ALOHA协议" class="headerlink" title="ALOHA协议"></a>ALOHA协议</h5><ul><li>不监听信道  #遇到冲突不知道，但收不到确认帧，即超时</li><li>不按时间槽发送</li><li>随机重发 #等待一个随机的事件</li></ul><h5 id="时隙ALOHA协议"><a href="#时隙ALOHA协议" class="headerlink" title="时隙ALOHA协议"></a>时隙ALOHA协议</h5><p>控制想发就发的随意性，把时间分成若干个相同的时间片，只能再下一个时间片开始时候再重传</p><h5 id="CSMA协议"><a href="#CSMA协议" class="headerlink" title="CSMA协议"></a>CSMA协议</h5><p><strong>先听再说！</strong></p><p><strong>CS</strong>:载波监听</p><p><strong>MA</strong>:多点接入</p><p>思想：先监听信道再发送帧</p><p>信道空闲：发送完整帧</p><p>信道忙：推迟发送</p><ol><li>1-坚持CSMA</li></ol><ul><li>一直监听，直到空闲</li><li>如果发送后有冲突，（一段时间没有收到确认帧），等待一个随机长的时间，重复</li></ul><ol><li>非坚持CSMA</li></ol><ul><li>忙则等待一个随机事件之后再进行监听</li></ul><p>随机的重发延迟可以减少冲突发生的可能性</p><p>媒体使用率比较低</p><ol><li>p-坚持CSMA</li></ol><ul><li>空闲则以p概率直接传输，不必等待，1-p概率等待到下一个时间槽再传输</li><li>忙则等待一个随机时间再进行监听</li></ul><p>优点：结合了1，2，即减少了冲突，又减少了媒体的空闲</p><p>缺点：冲突后还是会坚持把数据帧发送完，造成了浪费</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201222175313382.png" alt="image-20201222175313382"></p><h5 id="CSMA-CD"><a href="#CSMA-CD" class="headerlink" title="CSMA/CD"></a>CSMA/CD</h5><p><strong>CS</strong>:<strong>发送数据时</strong>和<strong>发送数据前</strong>都要检测是否有发送数据</p><p><strong>MA</strong>:多点接入</p><p><strong>CD</strong>:<strong>边发送边监听</strong>，适配器边发送数据边检测信道上信号电压电压的变化情况（半双工）</p><p><strong>传播时延对载波监听的影响</strong></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201222202442183.png" alt="image-20201222202442183"></p><p><strong>截断二进制指数规避算法</strong>：</p><ol><li>确定时间$2\tau$</li><li>定义k,k即为重传时间，$k=min[重传次数，10]$</li><li><p>随机取$r\in[0,1,2^k-1]$,重传所需要的时间就是$2r\tau$</p></li><li><p>若重传16次还是不成功，则认为网络太拥挤，抛弃此帧并报错</p></li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201222203148656.png" alt="image-20201222203148656"></p><p><strong>最小帧长</strong>：</p><script type="math/tex; mode=display">\frac{帧长}{数据传输速率}\geq 2\tau</script><h5 id="CSMA-CA"><a href="#CSMA-CA" class="headerlink" title="CSMA/CA"></a>CSMA/CA</h5><p>载波监听多点接入/冲突避免</p><p>CD适用于有线局域网，CA使用于无线局域网，因为无线局域网</p><ol><li>无法做到360°全面检测</li><li>隐蔽站问题</li></ol><script type="math/tex; mode=display">A\rightarrow B\leftarrow C</script><p>工作原理：</p><ol><li>先检测是否空闲</li><li>空闲则发RTS，忙则等待</li><li>接收端收到RTS，响应CTS</li></ol><p>（可以解决隐蔽站问题，建立连接后不会处理别的请求，即接收不到CTS）</p><ol><li>收到CTS后，开始发送数据帧，同时<strong>预约信道</strong></li><li>CRC检验数据，正确则响应ACK</li><li>发送方收到ACK就进行下一个数据帧的发送，若没有则使用二进制退避算法来重发数据</li></ol><h5 id="轮询访问介质访问控制"><a href="#轮询访问介质访问控制" class="headerlink" title="轮询访问介质访问控制"></a>轮询访问介质访问控制</h5><p>既要<strong>不产生冲突</strong>，又要发送时<strong>占全部带宽</strong></p><h5 id="轮询协议"><a href="#轮询协议" class="headerlink" title="轮询协议"></a>轮询协议</h5><p>主结点轮流“邀请”从属结点发送数据。</p><p>问题：</p><ol><li>轮询开销</li><li>等待延迟（靠后的主机可能会有等待延迟）</li><li>单点故障 （主结点出问题）</li></ol><h5 id="令牌传递协议"><a href="#令牌传递协议" class="headerlink" title="令牌传递协议"></a>令牌传递协议</h5><p> 令牌：一个特殊的MAC控制帧    ，不含任何信息</p><ul><li><p>将令牌帧变成一个数据帧，并且令牌的状态变成了<strong>忙状态</strong></p></li><li><p>有令牌持有时间的限制</p></li></ul><p>问题：</p><ol><li>令牌开销</li><li>等待延迟</li><li>单点故障</li></ol><p>应用于令牌环网（物理星型，逻辑环形拓扑），主要用于负载较大，通信量较大的网络中</p><h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3><p>某一区域内的计算机组，使用广播信道</p><ol><li>覆盖范围笑</li><li>数据传输速率高</li><li>延迟小，可靠性高</li><li>站点关系平等，共享传输信道</li><li>广播和组播</li></ol><h4 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h4><ol><li>星型拓扑</li><li>总线型拓扑</li><li>环形拓扑</li><li>树型拓扑</li></ol><h4 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h4><p>有线</p><p>无线</p><h4 id="介质访问控制方法"><a href="#介质访问控制方法" class="headerlink" title="介质访问控制方法"></a>介质访问控制方法</h4><ol><li>CSMA/CD:</li></ol><p>常用于总线型局域网，和树型网络</p><ol><li>令牌总线</li></ol><p>常用于总线型局域网，也用于树型网络</p><ol><li>临牌环</li></ol><p>常用于环形局域网</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ol><li>以太网</li></ol><p>IEEE802.3</p><ol><li>令牌环网</li><li>FDDI网</li><li>ATM网</li><li>无线局域网</li></ol><p>IEEE802.11</p><h4 id="IEEE-802标准"><a href="#IEEE-802标准" class="headerlink" title="IEEE 802标准"></a>IEEE 802标准</h4><p>IEEE 802.3(以太网)</p><p>IEEE 802.5（令牌环网）</p><p>IEEE 802.8  (光纤技术FDDI网)</p><p>IEEE 802.11(无线局域网)</p><h4 id="MAC子层和LLC子层"><a href="#MAC子层和LLC子层" class="headerlink" title="MAC子层和LLC子层"></a>MAC子层和LLC子层</h4><p>IEEE 802将数据链路层分为逻辑链路子层LLC子层和介质访问控制MAC子层</p><p>LLC子层：</p><p>和网络层挨着，为网络层提供服务，负责识别网络层协议，并进行封装，以及处理问题</p><p>（无确认无连接，面向连接，待确认连接，高速传送）</p><p>MAC子层：-【</p><p>和物理层挨着，帧方面的问题</p><h4 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h4><ol><li>便宜</li><li>实用，应用广</li><li>满足速率要求：10mb/s~10gb/s</li></ol><ul><li>两个标准：</li></ul><p>DIX Ethernet V2</p><p>IEEE 802.3</p><p>以太网只实现无差错接受，不实现可靠传输</p><ul><li>逻辑上总线型，物理上星型</li></ul><h5 id="10BASE-T以太网"><a href="#10BASE-T以太网" class="headerlink" title="10BASE-T以太网"></a>10BASE-T以太网</h5><h5 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h5><p>网卡，MAC地址，写在MAC帧中</p><h5 id="以太网MAC帧"><a href="#以太网MAC帧" class="headerlink" title="以太网MAC帧"></a>以太网MAC帧</h5><h5 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h5><p>速率大于100MB/S的以太网</p><ol><li>100BASE-T以太网</li><li>吉比特以太网</li><li>10吉比特</li></ol><h4 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h4><p>IEEE 802.11</p><h5 id="MAC帧头格式"><a href="#MAC帧头格式" class="headerlink" title="MAC帧头格式"></a>MAC帧头格式</h5><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201222231817974.png" alt="image-20201222231817974"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201222231936228.png" alt="image-20201222231936228"></p><h5 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h5><ol><li>有固定基础设施的无线局域网</li></ol><p>BSS：基本服务集</p><p>DS：分配系统（无线与有线的结合的实现）</p><p>ESS:扩展的服务集（BSS+DS）</p><ol><li>无固定基础设施无线局域网</li></ol><p>无转发器，基站</p><h3 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h3><p>实用分组交换技术，跨越很大物理范围，将分布不同地区的局域网或计算机系统互连起来，达到<strong>资源共享</strong>的目的/</p><h3 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h3><p>点对点协议，只支持全双工。</p><p>要求:</p><ol><li>简单</li><li>封装成帧</li><li>透明传输</li></ol><p>与帧定界符一样的比特组合时候的数据处理方法：异步线路用字节填充，同步线路用比特填充</p><ol><li>满足多种网络层协议</li><li><p>满足多种类型链路</p></li><li><p>差错检测</p></li></ol><p>错就丢弃</p><ol><li>检测连接状态</li><li>最大传输单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ol><p>不需要满足要求：</p><ol><li>纠错</li><li>流量控制</li><li>序号</li><li>多点线路</li></ol><h4 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h4><ol><li>将ip数据报封装到串行链路的方法</li><li>链路控制协议LCP</li></ol><p>建立并维护数据链路连接</p><ol><li>网络控制协议NCP</li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201222233223459.png" alt="image-20201222233223459"></p><h4 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h4><p>帧定界符：7E</p><p>地址字段：FF</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201222233441093.png" alt="image-20201222233441093"></p><h3 id="HDLC协议"><a href="#HDLC协议" class="headerlink" title="HDLC协议"></a>HDLC协议</h3><p>高级数据链路控制协议，面向比特，可以实现透明传输（0比特插入法），全双工</p><h4 id="站"><a href="#站" class="headerlink" title="站"></a>站</h4><p>主站，从站，复合站</p><p>三种操作方式</p><ol><li>正常响应方式</li><li>异步平衡方式</li><li>异步响应方式</li></ol><h4 id="帧格式-1"><a href="#帧格式-1" class="headerlink" title="帧格式"></a>帧格式</h4><p>帧定界符：01111110</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201222233829018.png" alt="image-20201222233829018"></p><p>ppp与HDLC区别</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201222233952001.png" alt="image-20201222233952001"></p><h3 id="9数据链路层设备"><a href="#9数据链路层设备" class="headerlink" title="9数据链路层设备"></a>9数据链路层设备</h3><h4 id="物理层扩展以太网"><a href="#物理层扩展以太网" class="headerlink" title="物理层扩展以太网"></a>物理层扩展以太网</h4><ul><li><p>光纤调制器，解调器</p></li><li><p>集线器间连接起来形成主干集线器</p></li></ul><p>冲突域，效率变低</p><h4 id="链路层扩展以太网"><a href="#链路层扩展以太网" class="headerlink" title="链路层扩展以太网"></a>链路层扩展以太网</h4><h5 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h5><p>对帧进行转发和过滤</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201223002237655.png" alt="image-20201223002237655"></p><ul><li>透明网桥：</li></ul><p>自学习</p><ul><li>源路由网桥</li></ul><p>发送帧时，把最佳路由信息放在帧的首部</p><p>方法：发送一个<strong>发现帧</strong></p><h5 id="以太网交换机（多接口网桥）"><a href="#以太网交换机（多接口网桥）" class="headerlink" title="以太网交换机（多接口网桥）"></a>以太网交换机（多接口网桥）</h5><ol><li>直通式交换机</li></ol><p>查完目的地址立刻转发</p><p>延迟小，可靠性低，无法支持具有不同速率的端口的交换</p><ol><li>存储转发式交换机</li></ol><p>将帧放入高速缓存，检查是否正确 </p><p>延迟高，可靠性高，支持具有不同速率的端口的交换</p><h1 id="第四章网络层"><a href="#第四章网络层" class="headerlink" title="第四章网络层"></a>第四章网络层</h1><p><strong>单位</strong>：数据报</p><p><strong>功能</strong>：</p><ol><li>路由选择与分组转发</li><li>异构网络互联</li></ol><p>手机，电脑，wifi，4g的互联</p><ol><li>拥塞控制</li></ol><p>全局性的问题，整个网络负载过重</p><p>开环控制：静</p><p>闭环控制：动</p><h2 id="数据交换方式"><a href="#数据交换方式" class="headerlink" title="数据交换方式"></a>数据交换方式</h2><p>通过交换设备（网桥，路由器，交换机）可以节省链路</p><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>e.g.电话网络</p><ol><li><p>建立连接</p></li><li><p>通信</p><p>可以采用多路复用，独占特点</p></li><li><p>释放连接</p></li></ol><p>优点：</p><ol><li>通信时延小</li><li>有序传输</li><li>没有冲突（独占）</li><li>实时性强</li></ol><p>缺点：</p><ol><li>建立连接时间长</li><li>线路独占，使用效率低</li><li>灵活性差（一个交换设备出问题连接就崩溃了）</li><li>无差错控制能力</li></ol><h2 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h2><p>报文：源应用发送的信息整体</p><p>就是往目的主机去，然后中途的路径选择并没有固定，而是根据拥塞情况等来确定。</p><p>存储转发：会先把报文存储下来，链路空闲才会发</p><p>优点</p><ol><li>无需建立连接</li><li>存储转发，动态分配线路</li><li>可靠性较高</li><li>利用率较高</li><li>多目标服务</li></ol><p>缺点：</p><ol><li><p>有存储转发时延</p></li><li><p>报文大小不定，需要网络结点有较大缓存空间</p></li></ol><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>分组：把大的数据块分割成小的数据块</p><p>主要和报文交换的速度差别很大的原因是因为，报文交换的头是要等尾的，分组交换是不用等的，是并行的思想，而报文交换是串行的思想</p><p>优点：</p><ol><li>无需建立连接</li><li>存车转发，动态分配线路</li><li>线路可靠性较高</li><li>线路利用率较高</li><li>相对报文交换，存储管理更容易</li></ol><p>缺点：</p><ol><li>存储转发时延</li><li>需要传输额外的信息量</li><li>乱序到达目的主机时，钥对分组排序重组</li></ol><p>两种分组交换分类：</p><h3 id="数据报方式"><a href="#数据报方式" class="headerlink" title="数据报方式"></a>数据报方式</h3><ul><li>提供无连接服务</li><li>每个分组携带源和目的地址</li><li>路由器根据分组的目的地址转发分组</li></ul><p>基于路由协议/算法构建转发表</p><p>检索转发表</p><p>每个分组独立选路</p><h3 id="虚电路方式"><a href="#虚电路方式" class="headerlink" title="虚电路方式"></a>虚电路方式</h3><p>将数据报方式和电路交换方式的结合</p><ul><li>建立连接</li></ul><p>“呼叫请求”，每个分组携带虚电路号，而不是目的地址</p><ul><li>数据传输</li></ul><p>用分组作单位，路由表会根据分组的虚电路号来确定从哪个端口出去</p><ul><li>释放连接</li></ul><h2 id="路由算法，路由协议"><a href="#路由算法，路由协议" class="headerlink" title="路由算法，路由协议"></a>路由算法，路由协议</h2><p>最佳路由</p><ol><li>静态路由算法</li></ol><p>手工配置路由信息，手工配置下一跳等</p><ol><li>动态路由算法</li></ol><p>路由器彼此交换信息，按照路由算法优化出路由表项</p><ul><li>链路状态路由算法（OSPF）</li></ul><p>具有全局性，所有路由器都掌握了完整的拓扑以及链路费用信息，也就是所有路由器都知道全部信息</p><ul><li>距离向量路由算法(RIP)</li></ul><p>分散性，路由器之掌握了物理相连的状况</p><h3 id="分层次的路由选择协议"><a href="#分层次的路由选择协议" class="headerlink" title="分层次的路由选择协议"></a>分层次的路由选择协议</h3><ol><li>因特网规模大</li><li>很多单位不想让外界知道自己的路由选择协议，但还是想加入因特网</li></ol><script type="math/tex; mode=display">\downarrow</script><p>自治系统AS（一组路由器，是自治的，外部是不知道内部路由选择协议的）（小团体） </p><p><strong>路由选择协议</strong>：</p><ol><li>内部网关协议IGP</li></ol><p>一个AS内实用的，如：$RIP,OSPF$</p><ol><li>外部网关协议EGP</li></ol><p>AS之间实用的 如，$BGP$</p><h3 id="RIP协议"><a href="#RIP协议" class="headerlink" title="RIP协议"></a>RIP协议</h3><p>适用于比较小的网络，分布式的基于距离向量的路由选择协议，比较简单。</p><p>RIP协议要中要求的是路由器的转发表的是到达目的网络的最短距离。</p><p>距离：通常指跳数，RIP允许一条路由最多只有15个路由器，16表示网络不可达</p><ol><li>仅和相邻路由器交换信息</li><li>交换的信息是自己的路由表</li><li>每30秒交换一次信息，并更新路由表。若3分钟没有收到邻居路由表，即当作邻居没了来更新信息</li></ol><h4 id="距离向量算法"><a href="#距离向量算法" class="headerlink" title="距离向量算法"></a>距离向量算法</h4><ol><li>修改相邻路由器发来的RIP报文中的所有表项</li></ol><p>把从x中收到的RIP报文进行修改：</p><p>把”下一条“字段中的地址改为x，并把所有”距离“字段+1</p><ol><li>对于每一项目进行处理，若R1没有该目的网络，就把项目填入R1路由表</li><li>若有，则看下一条路由器地址</li></ol><p>若下一跳是x,则用收到的项目替换源路由表中的项目（因为要以新的信息为准）</p><p>若下一跳不是x，则根据长度是否小于原来的来判断是否更新</p><ol><li>若180s没有收到相邻路由器x的RIP报文，则把x记作bbu可达路由器，即距离变成16</li><li>返回 </li></ol><h4 id="RIP报文"><a href="#RIP报文" class="headerlink" title="RIP报文"></a>RIP报文</h4><ol><li>RIP是应用层协议，使用UDP传送数据</li><li>一个RIP最多包括25个路由，如果超过那再用多几个RIP发送即可</li><li>RIP协议好消息传得快，坏消息传得慢，慢收敛过程</li></ol><h3 id="OSPF协议"><a href="#OSPF协议" class="headerlink" title="OSPF协议"></a>OSPF协议</h3><p>公开发表，使用了Dijkstra的最短路径算法，使用分布式的<strong>链路状态协议</strong>。</p><ol><li>向<strong>所有路由器</strong>发送信息，洪范式，即传给相邻的，然后相邻的又传给相邻的，最后所有路由器都会收到</li><li>发送的信息是与本路由器<strong>相邻的所有路由器的链路状态</strong>（与什么路由器相邻，以及链路的代价/度量）</li><li><strong>链路状态发生变化</strong>，才会发送信息</li></ol><p>最后所有路由器能够建立一个<strong>链路状态数据库</strong>，即<strong>全网拓扑图</strong></p><h4 id="链路状态路由算法"><a href="#链路状态路由算法" class="headerlink" title="链路状态路由算法"></a>链路状态路由算法</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227014112035.png" alt="image-20201227014112035"></p><h4 id="OSPF的区域"><a href="#OSPF的区域" class="headerlink" title="OSPF的区域"></a>OSPF的区域</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227014430794.png" alt="image-20201227014430794"></p><h4 id="OSPF分组"><a href="#OSPF分组" class="headerlink" title="OSPF分组"></a>OSPF分组</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227014623460.png" alt="image-20201227014623460"></p><p>考纲：网络层协议</p><p>但也可以看成就是传输层中的数据被运输到网络层中进行封装。</p><h3 id="BGP协议"><a href="#BGP协议" class="headerlink" title="BGP协议"></a>BGP协议</h3><p>AS之间使用的协议</p><h4 id="和谁交换"><a href="#和谁交换" class="headerlink" title="和谁交换"></a>和谁交换</h4><p>与其他AS的邻站的BGP发言人交换信息</p><h4 id="交换什么"><a href="#交换什么" class="headerlink" title="交换什么"></a>交换什么</h4><p>交换网络可达性的信息，即要到达某个网络索要经过的一系列AS，即一组路径向量</p><h4 id="多久交换"><a href="#多久交换" class="headerlink" title="多久交换"></a>多久交换</h4><p>发生变化时更新有变化的部分</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227015241839.png" alt="image-20201227015241839"></p><ul><li>BGP发言人会根据所采用的策略从收到的路由信息中找到到达各AS较好的路由</li></ul><h4 id="BGP协议报文"><a href="#BGP协议报文" class="headerlink" title="BGP协议报文"></a>BGP协议报文</h4><p>BGP协议报文是应用层协议，借用TCP传送。</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227015748308.png" alt="image-20201227015748308"></p><h4 id="BGP协议特点"><a href="#BGP协议特点" class="headerlink" title="BGP协议特点"></a>BGP协议特点</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227020045903.png" alt="image-20201227020045903"></p><h4 id="BGP-4的四种报文"><a href="#BGP-4的四种报文" class="headerlink" title="BGP-4的四种报文"></a>BGP-4的四种报文</h4><ol><li>OPEN报文</li></ol><p>实现与另一个BGP发言人连接的建立，并且对发送发进行认证</p><ol><li>UPDATE报文</li><li>KEEPALIVE报文</li></ol><p>周期性正式邻站的连通性，也作为OPEN的确认</p><ol><li>NOTIFICATION报文</li></ol><p>报告先前报文的差错，也用于关闭连接</p><h3 id="三种路由协议的比较"><a href="#三种路由协议的比较" class="headerlink" title="三种路由协议的比较"></a>三种路由协议的比较</h3><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227020619647.png" alt="image-20201227020619647"></p><h2 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h2><h3 id="1-IP数据报格式"><a href="#1-IP数据报格式" class="headerlink" title="1.IP数据报格式"></a>1.IP数据报格式</h3><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201225202737383.png" alt="image-20201225202737383"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201225203356336.png" alt="image-20201225203356336"></p><h3 id="2-IP数据包分片"><a href="#2-IP数据包分片" class="headerlink" title="2.IP数据包分片"></a>2.IP数据包分片</h3><p>以太网MTU是1500字节</p><p><strong>分片使用到的数据包格式</strong></p><p><strong>标识</strong>：同一数据报的分片实用同一标识（16位）</p><p><strong>标志</strong>：3位，只有两位有意义x_ _</p><p>中间位<strong>DF</strong>（Don’t Fragment）</p><p>DF=1:禁止分片</p><p>DF=0:允许分片</p><p>最低位<strong>MF</strong>(More Fragment)</p><p>MF=1:后面还有分片</p><p>MF=0：后面没有分片</p><p><strong>片偏移</strong></p><p>13位，某片在原分组中的相对位置，以8B为单位</p><h2 id="IPv4地址"><a href="#IPv4地址" class="headerlink" title="IPv4地址"></a>IPv4地址</h2><h3 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h3><p>32位的标识符，标识路由器，主机的接口（不同路由器的接口连接不同网络）</p><p>IP地址：：{&lt;网络号&gt;，&lt;主机号&gt;}</p><p>使用点分十进制写IP地址，e.g. 128.1.1.2</p><h4 id="A-E类IP地址"><a href="#A-E类IP地址" class="headerlink" title="A~E类IP地址"></a>A~E类IP地址</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201225205718879.png" alt="image-20201225205718879"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201225211157288.png" alt="image-20201225211157288"></p><p>网络号不可以全0，A类减去127环回地址，主机号不可以全0，全1</p><h4 id="特数IP地址"><a href="#特数IP地址" class="headerlink" title="特数IP地址"></a>特数IP地址</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201225210033892.png" alt="image-20201225210033892"></p><h4 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201225210339341.png" alt="image-20201225210339341"></p><p>路由器对目的地址是私有IP地址的数据报不转发，使用<strong>网络地址转换NAT</strong>解决</p><h4 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h4><p>原理：</p><p>在专用网到因特网的路由器上安装NAT软件，该路由器就被称为<strong>NAT路由器</strong>,它里面会至少有一个有效的<strong>外部全球IP地址</strong>，如果专用网里的主机要发送到因特网里的主机，那么发送的数据报中的源目的地址以及端口号都会变成<strong>NAT转换表</strong>中对应的可以在因特网中正常响应的ip地址，从而可以达到正常通信的目的。</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201225212509173.png" alt="image-20201225212509173"></p><h3 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h3><p>子网划分就是把主机号里的一部分变成子网号</p><p>分类的IP地址的弱点：</p><ol><li>IP地址空间的利用率有时很低</li><li>两级IP地址不够灵活</li></ol><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>只要是网络号就是1，是主机号就是0</p><p>子网划分后，子网的部分也是1</p><ul><li>子网掩码与IP地址逐位相与就是子网网络地址</li></ul><p>所以分了子网掩码后，路由表中要有：</p><ol><li>目的网络地址</li><li>目的网络子网掩码</li><li>下一跳地址</li></ol><p>路由器转发找到那个目的ip地址的主机使用的方法是将目的网络地址的ip与它连的子网掩码相与，如果是与子网网络号相同那么久说明了目的主机在该子网中</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201225232829471.png" alt="image-20201225232829471"></p><h3 id="无分类编址CIDR"><a href="#无分类编址CIDR" class="headerlink" title="无分类编址CIDR"></a>无分类编址CIDR</h3><p>变长子网掩码</p><ol><li><p>消除了传统的A类，B类，c类地址以及划分子网的概念</p><p>变成：网络前缀    主机号 </p><p>CIDR记法：IP地址后面加上“/”，后面跟的是网络前缀的位数 e.g. 128.14.32.0/20</p></li><li><p>融合子网地址与子网，方便子网划分</p></li></ol><p>地址块：128.14.32.0/20</p><h1 id="128-14-32-0是地址块中的最小地址"><a href="#128-14-32-0是地址块中的最小地址" class="headerlink" title="128.14.32.0是地址块中的最小地址"></a>128.14.32.0是地址块中的最小地址</h1><h4 id="构成超网"><a href="#构成超网" class="headerlink" title="构成超网"></a>构成超网</h4><p>将多个子网聚合成为一个较大的子网</p><p>应用场景：路由器转发时候假如两个子网都是经过同一个端口的话可以将它们构成一个超网，可以解决数据冗余的问题</p><p>方法：将网络前缀缩短</p><p>e.g.</p><p>网络1:206.1.0.0/17</p><p>网络2:206.1.128.0/17</p><script type="math/tex; mode=display">\downarrow</script><p>网络:206.1.0.0/16</p><h4 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h4><p>查找路由表可能得到几个匹配结果，应该寻找具有最长网络前缀的路由，前缀越长，路由越具体</p><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>发送数据过程在网络层封装ip地址，在数据链路层封装MAC地址</p><ul><li>ARP高速缓存：</li></ul><p>（仅仅存储该局域网内的）IP地址与MAC地址的映射</p><p>假如没有对应IP地址的MAC地址映射，使用ARP协议：</p><p>先将IP3与子网掩码相与判断目的ip地址是不是与自己的IP地址在同一局域网，</p><p>假如在同一局域网：</p><ol><li>广播ARP请求分组</li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226205916691.png" alt="image-20201226205916691"></p><ol><li>单ARP响应分组</li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226210005766.png" alt="image-20201226210005766"></p><p>假如不在同一局域网：</p><p>下一跳地址变成了默认网关，而且是是知道默认网关的IP地址的，所以：</p><ol><li><p>广播ARP请求分组</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226211207434.png" alt="image-20201226211207434"></p></li><li><p>但ARP响应分组</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226211225657.png" alt="image-20201226211225657"></p></li><li><p>传输到网关（路由器后）</p></li></ol><p>假如还是不再同一局域网就重复上述步骤，假如到达同一局域网后就重复之前在同一局域网的情况</p><ul><li>在实际网络的链路上传输数据帧时，最终必须使用MAC地址</li></ul><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226211957143.png" alt="image-20201226211957143"></p><h2 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h2><p>获得ip地址</p><ol><li><p>静态配置</p><p>ip地址，子网掩码，默认网关</p></li><li><p>动态配置</p><p>使用DHCP给移动的主机分配地址，分配完后如果走了就收回了</p></li></ol><p>应用层，C/S，服务端与客户端使用广播方式交互，基于UDP</p><p><strong>即插即用</strong>，地址重用，移动用户加入网络，再用地址续租</p><p>工作流程：</p><ol><li><p>主机广播DHCP发现报文</p><p>寻找DHCP服务器</p></li><li><p>DHCP服务器广播DHCP提供报文</p></li><li><p>主机广播DHCP请求报文</p><p>使用广播报文的原因是因为可以告诉其他发送了DHCP提供报文的DHCP自己已经名花有主了</p></li><li><p>DHCP服务器广播DHCP确认报文</p></li></ol><h2 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h2><p>更加有效地转发IP数据报和提高交付成功的机会</p><p>ICMP协议支持主机或路由器：</p><p>差错报告$\rightarrow$ 发送特定ICMP报文</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226231507253.png" alt="image-20201226231507253"></p><h3 id="ICMP差错报告报文"><a href="#ICMP差错报告报文" class="headerlink" title="ICMP差错报告报文"></a>ICMP差错报告报文</h3><ol><li><p>终点不可达报文</p><p>无法交付</p></li><li><p>源点抑制报文</p></li></ol><p>拥塞丢数据</p><ol><li><p>时间超过报文</p><p>TTL=0或数据报片在规定时间内无法收集完就全部丢弃并发送该报文</p></li><li><p>参数问题报文</p></li></ol><p>首部字段有问题</p><ol><li>改变路由报文</li></ol><p>值得更好的路由，重定向报文</p><ul><li>如何形成ICMP差错报文以及将其装入IP数据报</li></ul><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226232147305.png" alt="image-20201226232147305"></p><ul><li>不发送ICMP差错报文的情况</li></ul><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226232313816.png" alt="image-20201226232313816"></p><h3 id="ICMP询问报文"><a href="#ICMP询问报文" class="headerlink" title="ICMP询问报文"></a>ICMP询问报文</h3><ol><li>回送请求和回答报文</li></ol><p>收到询问，然后向源主机或路由器发送</p><h1 id="测试目的站是否可达以及了解其相关状态"><a href="#测试目的站是否可达以及了解其相关状态" class="headerlink" title="测试目的站是否可达以及了解其相关状态"></a>测试目的站是否可达以及了解其相关状态</h1><ol><li>时间戳请求和回答报文</li></ol><p>请求主机或路由器回答母亲阿德日期和时间</p><ol><li>掩码地址请求和回答报文</li><li>路由器询问和通告报文</li></ol><h3 id="ICMP的应用"><a href="#ICMP的应用" class="headerlink" title="ICMP的应用"></a>ICMP的应用</h3><h4 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h4><p>使用了ICMP回送请求和回答报文</p><h4 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h4><p>使用了ICMP时间超过差错报告报文</p><p>工作原理：</p><p>通过设置TTL从0-N,当TTL到0的时候就会返回一个时间超过差错报告报文，从而可以得到源到目的主机的距离</p><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><ul><li><p>改进了首部格式：快速处理/转发数据报</p></li><li><p>支持Qos</p></li></ul><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226233155624.png" alt="image-20201226233155624"></p><h3 id="数据报格式"><a href="#数据报格式" class="headerlink" title="数据报格式"></a>数据报格式</h3><p>分成两部分，<strong>基本首部</strong>和<strong>有效载荷</strong>，其中IPv4中可变部分相当于被移动到了IPv6的有效载荷的扩展首部中</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226233307639.png" alt="image-20201226233307639"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226233758745.png" alt="image-20201226233758745"></p><ul><li>IPv6支持即插即用，不需要DHCP协议</li><li>IPv6首部长度必须是8B的整数倍，IPv4是4B的整数倍</li><li><p>IPv6彻底移除了IPv4中的校验和字段，减少每一跳的处理时间</p></li><li><p>IPv6只能在主机处分片，IPv4可以在路由器和主机处分片</p></li><li>ICMPv6:附加报文类型”分组过大“</li><li>支持资源的预分配</li><li>IPv6取消了协议字段，改成了下一个首部字段</li></ul><h3 id="与IPv4的区别"><a href="#与IPv4的区别" class="headerlink" title="与IPv4的区别"></a>与IPv4的区别</h3><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226234422268.png" alt="image-20201226234422268"></p><h3 id="IPv6地址表示形式"><a href="#IPv6地址表示形式" class="headerlink" title="IPv6地址表示形式"></a>IPv6地址表示形式</h3><p>一般形式：冒号十六进制记法</p><p>e.g. 4BF5:AA12:0216:D1AD:12A5:A182:A2631:1534</p><p>压缩形式</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201226234820559.png" alt="image-20201226234820559"></p><h3 id="基本地址类型"><a href="#基本地址类型" class="headerlink" title="基本地址类型"></a>基本地址类型</h3><ol><li>单播</li></ol><p>一对一通信，可做源地址+目的地址</p><ol><li>多播</li></ol><p>一对多通信，可做目的地址</p><ol><li>任播</li></ol><p>一对多的一个通信，可做目的地址</p><h3 id="双栈协议"><a href="#双栈协议" class="headerlink" title="双栈协议"></a>双栈协议</h3><p>一台设备同时使用IPv4协议栈和IPv6协议栈</p><h3 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h3><p>就是把IPv6数据报放到IPv4的数据报中，从而建立了<strong>隧道</strong></p><h2 id="IP组播"><a href="#IP组播" class="headerlink" title="IP组播"></a>IP组播</h2><p>又叫<strong>多播</strong></p><p>单播：点对点</p><p>广播：点对多点</p><p>组播：点对多点</p><p>组播与广播不同的是给的是需要特定数据的一组用户，并且组播数据发送这仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据到达距离用户端尽可能近的节点后才开始复制和分发。</p><h3 id="IP组播地址"><a href="#IP组播地址" class="headerlink" title="IP组播地址"></a>IP组播地址</h3><p>属于多播组的设备将会被分配同一个<strong>组播IP地址</strong>（一群共同需求主机的标识）</p><p>组播地址范围：224.0.0.0~239.255.255.255（D类地址），一个D类地址表示一个组播组。只能用于分组的<strong>目的地址</strong>，源地址总是为<strong>单播地址</strong></p><ol><li>组播数据报应用UDP</li><li>不产生ICMP差错报文</li><li>并非所有D类地址用作为组播地址</li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227022159368.png" alt="image-20201227022159368"></p><h3 id="硬件组播"><a href="#硬件组播" class="headerlink" title="硬件组播"></a>硬件组播</h3><p>在局域网范围内。</p><p>组播MAC地址：01-00-5E打头，余下的十六进制是IP地址最后23位转换得来</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227212647914.png" alt="image-20201227212647914"></p><p>收到组播数据报的主机还要再IP层利用软件进行过滤，把不是主机要接受的数据报丢弃，因为可能不是同一个组播的但是IP地址后23位相同导致了MAC地址相同的问题。</p><h3 id="IGMP协议"><a href="#IGMP协议" class="headerlink" title="IGMP协议"></a>IGMP协议</h3><p>可以让一个组播路由器知道连接的局域网是否还有可以接受组播数据报的主机，是否有主机（的进程）参加或退出了某个组播组。</p><p>round 1：</p><p>某主机要加入组播组，想组播组的组播地址发送一个IGMP报文，声称自己要成为改组的成员，本地组播路由器接收到IGMP报文后，利用组播路由选择协议把这组成员关系发送给因特网上的其他组播路由器</p><p>round 2：</p><p>本地组播路由器会周期性探询（IGMP询问）本地局域网上的主机，以便知道这些主机是否还是组播组的成员</p><h3 id="组播路由选择协议"><a href="#组播路由选择协议" class="headerlink" title="组播路由选择协议"></a>组播路由选择协议</h3><p>选路的过程，得到最佳路径。</p><p>找出以源主机为根节点的组播转发树，构造树可以避免在路由器之间兜圈子</p><p>使用算法：</p><ol><li>基于链路状态的路由选择</li><li>基于距离-向量的路由选择</li><li>协议无关的组播（稀疏/密集）</li></ol><h2 id="移动IP"><a href="#移动IP" class="headerlink" title="移动IP"></a>移动IP</h2><h3 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h3><p>移动结点</p><p>归属代理（本地代理）</p><p>外部代理（外地代理）</p><p>永久地址</p><p>转交地址：在外部网络中使用的临时地址</p><p>$A刚进入网络：$</p><ol><li>在外部代理等级获得一个转交地址，离开时注销</li><li>外地代理想本地代理等级转交地址</li></ol><p>$B\rightarrow A:$</p><ol><li>本地代理截获数据报</li><li>本地代理再封装数据报，新数据报的目的地址是转交地址，发给外部代理（隧道）</li><li>外部代理拆封数据报并发给A</li></ol><h2 id="网络层设备"><a href="#网络层设备" class="headerlink" title="网络层设备"></a>网络层设备</h2><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><ol><li>路由选择（控制部分）</li><li>分组转发</li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227215231517.png" alt="image-20201227215231517"></p><ul><li>溢出造成分组丢失</li></ul><h3 id="三层设备的区别"><a href="#三层设备的区别" class="headerlink" title="三层设备的区别"></a>三层设备的区别</h3><p>路由器：互联两个不同网络层协议的网段</p><p>网桥：可以互联两个物理层和链路层不同的网段</p><p>集线器：不能互联两个物理层不同的网段</p><h3 id="路由表和路由转发"><a href="#路由表和路由转发" class="headerlink" title="路由表和路由转发"></a>路由表和路由转发</h3><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227220145564.png" alt="image-20201227220145564"></p><h1 id="传输层-2"><a href="#传输层-2" class="headerlink" title="传输层"></a>传输层</h1><p>只有主机才会有的层级，中间的网络设备是到不了传输层的。</p><p>功能：</p><ol><li>提供进程与进程之间的逻辑通信</li><li>复用与分用</li></ol><p>复用：使用同一个传输层协议进行传输</p><p>分用：把传来的报文段送给对应的进程</p><ol><li>对收到的报文进行差错检测</li><li>TCP&amp;UDP</li></ol><p>TCP：面向连接，确认，流量控制，计时器，连接管理，时延大，适用于大文件</p><p>UDP：不需要连接，无确认，时延小，适用于小文件</p><p><strong>端口</strong>：标识主机中的应用进程</p><p><strong>端口号</strong>：只有本地意义，长度为16bit，65536各不同端口号</p><p><strong>服务端</strong>使用端口号：</p><ol><li>熟知端口号</li></ol><p>0~1023，TCP/IP最重要的一些应用程序的端口号</p><ol><li>等级端口号</li></ol><p>1024~49151</p><p><strong>客户端</strong>使用的端口号：</p><p>49151~65536</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227222227384.png" alt="image-20201227222227384"></p><p>套接字$socket$=(主机IP地址，端口号)</p><h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><ol><li>无连接，减少时延</li><li>不保证可靠交付</li><li>面向报文的，适合一次性传输少量数据的网络应用</li></ol><p>对报文不合并也不拆分，保留整个报文</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227222547202.png" alt="image-20201227222547202"></p><ol><li>无拥塞控制，适合实时应用</li></ol><p>丢一点是可以的，但没有延迟</p><ol><li>UDP首部开销小，8B,TCP20B</li></ol><h3 id="首部格式"><a href="#首部格式" class="headerlink" title="首部格式"></a>首部格式</h3><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227222844640.png" alt="image-20201227222844640"></p><p>找不到对应的目的端口号，丢弃报文并发送ICMP“端口不可达”差错报告报文</p><h3 id="UDP校验"><a href="#UDP校验" class="headerlink" title="UDP校验"></a>UDP校验</h3><p>在UDP校验的时候会有一个<strong>伪首部</strong>，伪首部仅仅在校验的时候会出现。</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227223707815.png" alt="image-20201227223707815">17：封装UDP报文的IP数据报首部协议字段是17</p><p>步骤：</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227224021982.png" alt="image-20201227224021982"></p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><ol><li>面向连接</li><li>点对点的</li><li>可靠有序，不丢不重</li><li>全双工</li><li>面向字节流</li></ol><h3 id="首部格式-1"><a href="#首部格式-1" class="headerlink" title="首部格式"></a>首部格式</h3><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227233758654.png" alt="image-20201227233758654"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227233904514.png" alt="image-20201227233904514"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227233907635.png" alt="image-20201227233907635"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201227233910394.png" alt="image-20201227233910394"></p><h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><p>采用$C/S$模式</p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><ol><li>客户端发送连接请求报文段，无应用层数据</li></ol><script type="math/tex; mode=display">SYN=1,seq=x</script><ol><li>服务器返回确认报段，分配缓存和变量，五应用层数据</li></ol><script type="math/tex; mode=display">SYN=1,ACK=1,seq=y(随机),ack=x+1</script><ol><li>客户端返回确认的确认，为TCP连接分配缓存和变量</li></ol><script type="math/tex; mode=display">SYN=0,ACK=1,seq=x+1,ack=y+1</script><p><strong>SYN洪范攻击</strong>：</p><p>攻击者给服务器发送大量请求，但是每个请求都不返回确认的确认，使得服务器不停地发送第二步地确认，占用大量缓存，可能导致死机</p><p>解决办法：</p><p><strong>SYN cookie</strong></p><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>终止连接，缓存和资源被释放</p><ol><li>客户端发送连接释放报文段，停止发送数据，关闭TCP连接</li></ol><script type="math/tex; mode=display">FIN=1,seq=u</script><ol><li>会送确认报文段，半关闭状态</li></ol><script type="math/tex; mode=display">ACK=1,seq=v,ack=u+1</script><ol><li>服务器端发完数据，发出连接释放报文段，关闭TCP连接</li></ol><script type="math/tex; mode=display">FIN=1,ACK=1,seq=w,ack=u+1</script><ol><li>客户端回送一个确认报文段，再等到时间等待计时器2MSL后，连接彻底关闭</li></ol><script type="math/tex; mode=display">ACK=1,seq=u+1,ack=w+1</script><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p>保证接收方进程从缓存区中读出地字节流和发送方发出地字节流是完全相同的</p><ol><li>校验</li></ol><p>和UDP一样，增加伪首部</p><ol><li>序号</li></ol><p>一个字节占一个序号</p><p><strong>序号字段</strong>：一个报文段的第一个字节的序号</p><ol><li>确认</li></ol><p>发送方缓存区收到了<strong>确认报文段</strong>或<strong>捎带确认</strong>，若确认字段为N，则N之前的都可以在缓存区间删除</p><ol><li>重传</li></ol><ul><li>超时重长。</li></ul><p>使用自适应算法，动态改变重传时间RTTs（加权平均往返时间）</p><ul><li>冗余ACK（快速重传）</li></ul><p>若收到3个冗余ACK，则认为丢失 </p><h3 id="流量控制-4"><a href="#流量控制-4" class="headerlink" title="流量控制"></a>流量控制</h3><p>使用<strong>滑动窗口</strong>机制。</p><p>发送端的窗口取决于接收方返回的确认报文段的窗口字段</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201228001420063.png" alt="image-20201228001420063"></p><ol><li><p>设置了一个<strong>持续计时器</strong>，一方收到了对方的零窗口通知，就启动持续计时器。</p></li><li><p>若持续计时器值为0没收到通知就会发送一个零窗口<strong>探测报文段</strong>，接收方收到探测报文段就会给出现在的窗口值</p></li><li>若窗口值是0，那么发送方就会重置持续计时器</li></ol><h3 id="拥塞控制-1"><a href="#拥塞控制-1" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>对资源需求的总和$&gt;$可用资源，<strong>全局性</strong>问题。</p><p>假设：</p><ol><li><p>单方向传输，另一个方向只传送确认，无捎带确认</p></li><li><p>发送窗口=min{接收窗口rwnd,拥塞窗口cwnd}，这里假设rwnd足够大</p></li></ol><h4 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201228002812995.png" alt="image-20201228002812995"></p><script type="math/tex; mode=display">ssthresh=\frac{发生拥塞时候的cwnd}{2}</script><h4 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h4><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201228003200778.png" alt="image-20201228003200778"></p><p>快恢复就是直接从新的$ssthreh$开始即可，不可恢复到1</p><h1 id="应用层-2"><a href="#应用层-2" class="headerlink" title="应用层"></a>应用层</h1><p>应用程序的通信提供服务。</p><p>应用层协议定义：</p><ol><li>应用进程交换的报文类型，请求还是响应</li><li>各种报文类型的语法</li><li>字段的语义，即字段中的信息的含义</li><li>进程何时，如何发送报文，以及对报文进行响应的规则</li></ol><p>应用层的功能：</p><ol><li>文件传输，访问和管理</li><li>电子邮件</li><li>虚拟终端</li><li>查询服务和远程作业</li></ol><h2 id="网络应用模型"><a href="#网络应用模型" class="headerlink" title="网络应用模型"></a>网络应用模型</h2><h3 id="C-S模型"><a href="#C-S模型" class="headerlink" title="C/S模型"></a>C/S模型</h3><p>服务器：提供计算机服务的设备</p><ol><li>永久提供服务</li><li>永久性的访问地址/域名</li></ol><p>客户：请求计算机的主机</p><ol><li>与服务器通信</li><li>间歇性接入网络</li><li>可能使用动态IP地址</li><li>不与其他客户机直接通信</li></ol><h3 id="P2P模型"><a href="#P2P模型" class="headerlink" title="P2P模型"></a>P2P模型</h3><p>每个结点都可以当个服务器和客户。</p><p>任意节点都可以直接通信，可扩展性好，网络健壮性强。</p><h2 id="DNS域名解析系统"><a href="#DNS域名解析系统" class="headerlink" title="DNS域名解析系统"></a>DNS域名解析系统</h2><p>使用域名来替代ip地址来进行查询，访问网站。</p><p>功能：实现域名到ip地址的转换</p><p>顶级域名：</p><ol><li>国家顶级域名 cn,us,uk</li><li>通用顶级域名 com,net,org,gov,int,aero,museum,travel</li><li>基础结构域名/反向域名 arpa</li></ol><p>二级域名：</p><ol><li>类别域名 ac,com,edu,gov,mil,net,org</li><li>行政区域名 bj,js</li></ol><p>三级域名</p><p>四极域名</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201228230938145.png" alt="image-20201228230938145"></p><h4 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h4><p>根域名服务器</p><p>顶级域名服务器</p><p>权限域名服务器</p><p>本地域名服务器：主机发出DNS查询，先发给本地域名服务器。</p><h3 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h3><ol><li><p>递归查询</p><p>靠别人，请根域名服务器，….,</p></li><li><p>迭代查询</p><p>靠自己，自己本地域名服务器一个个去问…</p></li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201228232039127.png" alt="image-20201228232039127"></p><p>使用<strong>高速缓存</strong>，动态更新</p><h2 id="FTP文件传送协议"><a href="#FTP文件传送协议" class="headerlink" title="FTP文件传送协议"></a>FTP文件传送协议</h2><p>提供不同种类主机系统之间的文件传输能力，基于C/S，使用TCP可靠传输。</p><p>FTP服务器：提供服务</p><p>FTP客户端：连接FTP服务器，与服务器进行传送文件的电脑</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>登录：ftp地址，用户名，密码，<strong>匿名登录</strong></p><p>FTP服务器进程：</p><ol><li>1个主进程</li></ol><p>端口号：21</p><ol><li>n个从属进程</li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201229002105027.png" alt="image-20201229002105027"></p><h2 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h2><h3 id="信息格式"><a href="#信息格式" class="headerlink" title="信息格式"></a>信息格式</h3><p>信封：abc@163.com</p><p>内容：</p><ol><li>首部</li><li>主体</li></ol><h3 id="组成结构"><a href="#组成结构" class="headerlink" title="组成结构"></a>组成结构</h3><ol><li>用户代理</li><li>邮件服务器</li><li>邮件协议</li></ol><p>SMTP,POP3</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201229002958742.png" alt="image-20201229002958742"></p><h3 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h3><p>TCP，端口号：25 ,C/S</p><ol><li>连接建立    </li><li>邮件发送</li><li>连接释放</li></ol><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201229003803163.png" alt="image-20201229003803163"></p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201229003948774.png" alt="image-20201229003948774"></p><h3 id="POP3协议"><a href="#POP3协议" class="headerlink" title="POP3协议"></a>POP3协议</h3><p>TCP连接，端口号110，C/S</p><p>工作方式：</p><ol><li>下载并保留</li><li>下载并删除</li></ol><h3 id="IMAP协议网际报文存取协议"><a href="#IMAP协议网际报文存取协议" class="headerlink" title="IMAP协议网际报文存取协议"></a>IMAP协议网际报文存取协议</h3><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201229004150239.png" alt="image-20201229004150239"></p><h3 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h3><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201229004244006.png" alt="image-20201229004244006"></p><h2 id="万维网"><a href="#万维网" class="headerlink" title="万维网"></a>万维网</h2><p>www，大规模的，联机式的资料空间，是无数个网络站点和网页的集合，C/S</p><p>统一资源定位符<strong>URL</strong>$\rightarrow$ 资源</p><p>URL一般形式：&lt;协议&gt;://&lt;主机&gt;：&lt;端口&gt;/&lt;路径&gt;</p><p>e.g. <a href="http://www.pku.edu.cn">http://www.pku.edu.cn</a></p><p>URL不区分大小写</p><h2 id="HTML协议"><a href="#HTML协议" class="headerlink" title="HTML协议"></a>HTML协议</h2><p>超文本传输协议。</p><p>定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201229005106567.png" alt="image-20201229005106567"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>无状态的</li></ol><p>但是，万维网站点常常希望能够识别用户</p><script type="math/tex; mode=display">\downarrow</script><p>Cookie：存储在用户主机中的文本文件，记录一段时间内某用户的访问记录</p><ol><li>采用TCP，但是<strong>HTTP协议本身是无连接</strong>的，交换HTTP报文之前不需要提前建立HTTP连接</li></ol><ul><li>持久连接</li></ul><p>再次请求时候不需要再次建立TCP连接，连接不会断</p><ol><li><p>流水线式</p><p>类似于后退N步….</p></li><li><p>非流水线式</p></li></ol><p>类似于停-等</p><ul><li>非持久连接</li></ul><h3 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h3><p>分为请求报文，响应报文，HTTP报文是面向文本的，报文每一个字段都是一些ASCII码串</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201229005930171.png" alt="image-20201229005930171"></p><p>e.g.</p><p><img src="/2020/12/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201229005946321.png" alt="image-20201229005946321"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="计算机网络" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="http://example.com/2020/12/09/leetcode/"/>
    <id>http://example.com/2020/12/09/leetcode/</id>
    <published>2020-12-09T02:23:56.000Z</published>
    <updated>2021-01-04T11:16:57.626Z</updated>
    
    <content type="html"><![CDATA[<hr><p>开始leetcode的刷题了，总结leetcode并且做题解</p><hr><h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>示例:</p><p>给定 nums = [2, 7, 11, 15], target = 9</p><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p><h4 id="自己写的代码"><a href="#自己写的代码" class="headerlink" title="自己写的代码"></a>自己写的代码</h4><p>好像不太聪明的样子，复杂度达到$o(n^2)$…..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target: <span class="built_in">int</span></span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> nums[i]+nums[j]==target:</span><br><span class="line">                    <span class="keyword">return</span> [i,j]</span><br></pre></td></tr></table></figure><h4 id="首尾递进"><a href="#首尾递进" class="headerlink" title="首尾递进"></a>首尾递进</h4><p>复杂度是$o(nlogn)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target: <span class="built_in">int</span></span>):</span></span><br><span class="line">    index=<span class="built_in">sorted</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(nums)),key=<span class="keyword">lambda</span> x:nums[x])</span><br><span class="line">    head=<span class="number">0</span></span><br><span class="line">    tail=<span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> head!=tail:</span><br><span class="line">        <span class="keyword">if</span> nums[index[head]]+nums[index[tail]]&lt;target:</span><br><span class="line">            head+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> nums[index[head]]+nums[index[tail]]&gt;target:</span><br><span class="line">            tail-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [index[head],index[tail]]</span><br><span class="line">    <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><p>感觉也不咋样呀，用哈希表，和和首尾的差不多…..</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target: <span class="built_in">int</span></span>):</span></span><br><span class="line">        hashmap=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> target-nums[i]  <span class="keyword">in</span> hashmap:</span><br><span class="line">                <span class="keyword">return</span> [hashmap[target-nums[i]],i]</span><br><span class="line">            hashmap[nums[i]]=i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h3><ol><li><p>链表问题，之前做过正序的更难，这个是逆序的，就是从个位加到后面，比较简单，解题思路就是假如那个地方是空的话就当作零来加，然后考虑进位。</p></li><li><p>还有种方法就是直接把两个当成长度相同的链表相加，在这之前先把另一个短的前面补零，这种我感觉快不了多少就3不弄上来了。</p></li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        index=<span class="number">0</span></span><br><span class="line">        sum_val=<span class="number">0</span></span><br><span class="line">        head=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> l1!=<span class="literal">None</span> <span class="keyword">or</span> l2!=<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                sum_val=<span class="number">0</span>+index+l2.val</span><br><span class="line">                l2=l2.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">elif</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                sum_val=<span class="number">0</span>+index+l1.val</span><br><span class="line">                l1=l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sum_val=l1.val+index+l2.val</span><br><span class="line">                l2=l2.<span class="built_in">next</span></span><br><span class="line">                l1=l1.<span class="built_in">next</span></span><br><span class="line">            index=<span class="built_in">int</span>(sum_val/<span class="number">10</span>)</span><br><span class="line">            temp=ListNode(sum_val%<span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                head=temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                head_temp=head</span><br><span class="line">                <span class="keyword">while</span> head_temp.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    head_temp=head_temp.<span class="built_in">next</span></span><br><span class="line">                head_temp.<span class="built_in">next</span>=temp</span><br><span class="line">        <span class="keyword">if</span> index==<span class="number">1</span>:</span><br><span class="line">            head_temp = head</span><br><span class="line">            <span class="keyword">while</span> head_temp.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                head_temp = head_temp.<span class="built_in">next</span></span><br><span class="line">            head_temp.<span class="built_in">next</span> = ListNode(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h3 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7. 整数反转"></a>7. 整数反转</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p>注意:</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>其实使用python感觉有点作弊，因为python本身就是可以支持大整数的，而它的题目是要考虑的，所以假如你得到的整数是溢出的你的整数就不能全部弄出来，而是再最后一步进行比较，看下图：</p><p><img src="/2020/12/09/leetcode/Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201211002801598.png" alt="image-20201211002801598"></p><h4 id="作弊代码"><a href="#作弊代码" class="headerlink" title="作弊代码"></a>作弊代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        if_postive=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> x&lt;<span class="number">0</span>:</span><br><span class="line">            if_postive=<span class="number">0</span></span><br><span class="line">            x=-x</span><br><span class="line">        sum_val=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x!=<span class="number">0</span>:</span><br><span class="line">            sum_val=sum_val*<span class="number">10</span>+x%<span class="number">10</span></span><br><span class="line">            x=<span class="built_in">int</span>(x/<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> if_postive==<span class="number">0</span>:</span><br><span class="line">            sum_val=-sum_val</span><br><span class="line">        up_range=<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>)<span class="number">-1</span></span><br><span class="line">        down_range=-up_range<span class="number">-1</span></span><br><span class="line">        <span class="keyword">if</span> sum_val&gt;up_range <span class="keyword">or</span> sum_val&lt;down_range:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> sum_val</span><br></pre></td></tr></table></figure><h3 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9.回文数"></a>9.回文数</h3><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>我的思路是将其转换成字符串然后再求解，但这样好像消耗的空间太大了,但管他呢,空间大一点也没事把…</p><h4 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self,x:<span class="built_in">int</span></span>) -&gt; bool:</span></span><br><span class="line">        x_str=<span class="built_in">str</span>(x)</span><br><span class="line">        i,j=<span class="number">0</span>,<span class="built_in">len</span>(x_str)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> j&gt;i:</span><br><span class="line">            <span class="keyword">if</span> x_str[i]!=x_str[j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            j-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self,x:<span class="built_in">int</span></span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(x) == <span class="built_in">str</span>(x)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14.最长公共前缀"></a>14.最长公共前缀</h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>两两求最长公共前缀</li></ol><p>字面意思，当发现公共前缀为空时就返回’’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>) -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        a=strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(strs)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> strs[i]:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            a=self.two_str(a,strs[i])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(a)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">two_str</span>(<span class="params">self,a,b</span>):</span></span><br><span class="line">        min_len=<span class="built_in">min</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_len):</span><br><span class="line">            <span class="keyword">if</span> a[i]!=b[i]:</span><br><span class="line">                <span class="keyword">return</span> a[:i]</span><br><span class="line">            <span class="keyword">if</span> i==min_len<span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> a[:min_len]</span><br></pre></td></tr></table></figure><ol><li>纵向比较</li></ol><p>从0开始比较每个字符串的第i个,$i=0,1,2,3,..$字符是否都相同，当开始不相同的时候就返回前面相同的前缀</p><ol><li>利用ascii码的特性</li></ol><p>利用min()和max()，只用比较最大和最小的公共前缀即可，</p><p>举例abb， aba，abac，最大为abb，最小为aba。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>) -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs: <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        s1=<span class="built_in">min</span>(strs)</span><br><span class="line">        s2=<span class="built_in">max</span>(strs)</span><br><span class="line">        <span class="keyword">for</span> i,x <span class="keyword">in</span> <span class="built_in">enumerate</span>(s1):</span><br><span class="line">            <span class="keyword">if</span> x!=s2[i]:</span><br><span class="line">                <span class="keyword">return</span> s2[:i]</span><br><span class="line">        <span class="keyword">return</span> s1</span><br></pre></td></tr></table></figure><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>使用栈，假如是左边的括号就推入栈，假如是右边的括号就把栈顶元素出栈来比较是不是一个可以匹配的括号</li><li>ascii码，左右括号要么相差1，要么相差2</li></ol><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        stack=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i]==<span class="string">&#x27;(&#x27;</span> <span class="keyword">or</span> s[i]==<span class="string">&#x27;[&#x27;</span> <span class="keyword">or</span> s[i]==<span class="string">&#x27;&#123;&#x27;</span>:</span><br><span class="line">                stack.append(s[i])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(stack)==<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                a=<span class="built_in">ord</span>(s[i])-<span class="built_in">ord</span>(stack.pop())</span><br><span class="line">                <span class="keyword">if</span> a!=<span class="number">1</span> <span class="keyword">and</span> a!=<span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(stack)!=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a>21.合并两个有序链表</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>我的方法还算快，就是一开始我就确定$l_2$作为被插入的链表，然后先看$l_1.val$是否小于$l_2.val$，如果小于就插入前面，大于就插入后面，这样操作完之后就可以保证后面的$l_1$的数都是可以插入在head后面的，然后就是假如$l_1.val$小于$l_2.next.val$，那么就让$l_2$的代理头指针head往后移一位，也就是只有$l_1$的值遇到了比它大的值或者$l_2$的代理头指针是空的时候才将$l_1$的值插入</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        <span class="keyword">if</span> l1.val&lt;l2.val:</span><br><span class="line">            temp=l1</span><br><span class="line">            l1=l1.<span class="built_in">next</span></span><br><span class="line">            temp.<span class="built_in">next</span>=l2</span><br><span class="line">            l2=temp</span><br><span class="line">        head=l2</span><br><span class="line">        <span class="keyword">while</span> l1!=<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head.<span class="built_in">next</span>!=<span class="literal">None</span> <span class="keyword">and</span> head.<span class="built_in">next</span>.val&lt;l1.val:</span><br><span class="line">                head=head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp=l1</span><br><span class="line">                l1=l1.<span class="built_in">next</span></span><br><span class="line">                temp.<span class="built_in">next</span>=head.<span class="built_in">next</span></span><br><span class="line">                head.<span class="built_in">next</span>=temp</span><br><span class="line">        <span class="keyword">return</span> l2</span><br></pre></td></tr></table></figure><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><h3 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376.摆动序列"></a>376.摆动序列</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p><p>例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p><p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,7,4,9,2,5]</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 整个序列均为摆动序列。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,17,5,10,13,15,10,5,16,8]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。</span><br></pre></td></tr></table></figure><h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>贪心算法的思想，就是假如一个子数组一串都是上升(下降)的，那么其实值用取首尾就行了，[1,2,3,5]，取[1,5]即可，貌似应该也不用着啥动态优化吧，感觉用了还麻烦，其实题目思想倒是挺简单的说实话，</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wiggleMaxLength</span>(<span class="params">self, nums</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        count=<span class="built_in">len</span>(nums)</span><br><span class="line">        index=<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i]-nums[i<span class="number">-1</span>]==<span class="number">0</span>:</span><br><span class="line">                count-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> index==<span class="number">-1</span>: index=<span class="number">0</span></span><br><span class="line">                <span class="keyword">elif</span> (nums[i]-nums[i<span class="number">-1</span>])*(nums[i<span class="number">-1</span>]-nums[index])&gt;<span class="number">0</span>:</span><br><span class="line">                    count-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    index=i<span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><p>别人的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wiggleMaxLength</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="comment"># c是用来记录前一个差值是下降还是上升的，默认0</span></span><br><span class="line">        n, c, res = <span class="built_in">len</span>(nums), <span class="number">0</span>, <span class="number">1</span> </span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            x = nums[i] - nums[i - <span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 如果有差值才继续处理，相等直接就跳过不处理了</span></span><br><span class="line">            <span class="keyword">if</span> x:</span><br><span class="line">                <span class="comment"># &lt;0代表有上升下降的交替，=0是初始情况的判断</span></span><br><span class="line">                <span class="keyword">if</span> x * c &lt;= <span class="number">0</span>:</span><br><span class="line">                    res += <span class="number">1</span></span><br><span class="line">                c = x</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>它的比我快，第一是它比较是否又交替的情况是用了个x，我是直接乘，第二有类情况是我讨论了index==-1,即初始的时候它的要求只要是与第一个数不等即可，它是$x * c &lt;= 0$来弄，因为它的初始$c$是0，。</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144.二叉树的前序遍历"></a>144.二叉树的前序遍历</h3><h4 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h4><p>一个是用递归的方法，一个是用迭代的方法，递归的话较为清晰，迭代的思想一开始我弄得很复杂，但其实很简单，只用把root-&gt;right一直压在栈的底部，那就可以达到最后调用的效果了。</p><h4 id="迭代代码"><a href="#迭代代码" class="headerlink" title="迭代代码"></a>迭代代码</h4><p>第一种是将root-&gt;一直压在栈底，第二种是和我一开始的想法差不多，一直左边入栈，如果左不下去了，就开始往右一次，然后继续看能不能左。但好像据说是说第一种方法并不是在模拟栈，而是先入先出的队列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res=[]</span><br><span class="line">        stack=[root]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            temp=stack.pop()</span><br><span class="line">            res.append(temp.val)</span><br><span class="line">            <span class="keyword">if</span> temp.right:</span><br><span class="line">                stack.append(temp.right)</span><br><span class="line">            <span class="keyword">if</span> temp.left:</span><br><span class="line">                stack.append(temp.left)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">head1 = TreeNode(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        stack = []</span><br><span class="line">        node = root</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                res.append(node.val)</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node = node.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            node = node.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="递归代码"><a href="#递归代码" class="headerlink" title="递归代码"></a>递归代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> [root.val]+self.preorderTraversal(root.left)+self.preorderTraversal(root.right)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">preorder</span>(<span class="params">root: TreeNode</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            res.append(root.val)</span><br><span class="line">            preorder(root.left)</span><br><span class="line">            preorder(root.right)</span><br><span class="line">        res = <span class="built_in">list</span>()</span><br><span class="line">        preorder(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a>94. 二叉树的中序遍历</h3><h4 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h4><p>和前序的其实差不多，这个是在到达了左的极值，要出栈时把栈顶的节点的值加入res.</p><h4 id="迭代代码-1"><a href="#迭代代码-1" class="headerlink" title="迭代代码"></a>迭代代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res=[]</span><br><span class="line">        stack=[]</span><br><span class="line">        node=root</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                node=node.left</span><br><span class="line">            node=stack.pop()</span><br><span class="line">            res.append(node.val)</span><br><span class="line">            node=node.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="递归代码-1"><a href="#递归代码-1" class="headerlink" title="递归代码"></a>递归代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> self.inorderTraversal(root.left)+[root.val]+self.inorderTraversal(root.right)</span><br></pre></td></tr></table></figure><h3 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145.二叉树的后序遍历"></a>145.二叉树的后序遍历</h3><h4 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h4><h4 id="递归代码-2"><a href="#递归代码-2" class="headerlink" title="递归代码"></a>递归代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">return</span> self.postorderTraversal(root.left)+self.postorderTraversal(root.right)+[root.val]</span><br></pre></td></tr></table></figure><h4 id="非递归代码"><a href="#非递归代码" class="headerlink" title="非递归代码"></a>非递归代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res=[]</span><br><span class="line">        stack=[]</span><br><span class="line">        prev=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root=root.left</span><br><span class="line">            root=stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root.right <span class="keyword">or</span> root.right==prev:</span><br><span class="line">                res.append(root.val)</span><br><span class="line">                prev=root</span><br><span class="line">                root=<span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root=root.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="402-移掉k位数字"><a href="#402-移掉k位数字" class="headerlink" title="402.移掉k位数字"></a>402.移掉k位数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeKdigits</span>(<span class="params">self, num, k</span>):</span></span><br><span class="line">        stack = []</span><br><span class="line">        remain = <span class="built_in">len</span>(num) - k</span><br><span class="line">        <span class="keyword">for</span> digit <span class="keyword">in</span> num:</span><br><span class="line">            <span class="keyword">while</span> k <span class="keyword">and</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>] &gt; digit:</span><br><span class="line">                stack.pop()</span><br><span class="line">                k -= <span class="number">1</span></span><br><span class="line">            stack.append(digit)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(stack[:remain]).lstrip(<span class="string">&#x27;0&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;开始leetcode的刷题了，总结leetcode并且做题解&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Leetcode&quot;&gt;&lt;a href=&quot;#Leetcode&quot; class=&quot;headerlink&quot; title=&quot;Leetcode&quot;&gt;&lt;/a&gt;Leetcode&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>考研</title>
    <link href="http://example.com/2020/12/05/%E8%80%83%E7%A0%94/"/>
    <id>http://example.com/2020/12/05/%E8%80%83%E7%A0%94/</id>
    <published>2020-12-05T13:46:09.000Z</published>
    <updated>2020-12-08T05:29:53.391Z</updated>
    
    <content type="html"><![CDATA[<hr><p>现在是2020.12.5，准备要开始考研的准备啦，因为我的基础其实没有很好，所以得好好地努力一把，加油！</p><h1 id="考研"><a href="#考研" class="headerlink" title="考研"></a>考研</h1><h2 id="考研时间线"><a href="#考研时间线" class="headerlink" title="考研时间线"></a>考研时间线</h2><h3 id="12-5-12-20"><a href="#12-5-12-20" class="headerlink" title="12.5-12.20"></a>12.5-12.20</h3><ol><li>总结考研的注意事项以及一些上岸人的心得与体会</li><li>总结各个学校的信息，确定要考的科目以及学校</li><li>买好408的部分教材</li></ol><h3 id="12-21-大三上学期期末结束"><a href="#12-21-大三上学期期末结束" class="headerlink" title="12.21-大三上学期期末结束"></a>12.21-大三上学期期末结束</h3><p>开始复习计网，和数据结构，刷leetcode题目，总结到博客，这样考虑主要是因为我期末考试要考计网，</p><h3 id="寒假-6月份"><a href="#寒假-6月份" class="headerlink" title="寒假-6月份"></a>寒假-6月份</h3><p>第一轮复习结束，基础篇</p><h3 id="7月份到九月份"><a href="#7月份到九月份" class="headerlink" title="7月份到九月份"></a>7月份到九月份</h3><p>提高篇</p><h3 id="十月份到十一月份"><a href="#十月份到十一月份" class="headerlink" title="十月份到十一月份"></a>十月份到十一月份</h3><p>冲刺篇</p><h2 id="考研信息"><a href="#考研信息" class="headerlink" title="考研信息"></a>考研信息</h2><h3 id="了解通道"><a href="#了解通道" class="headerlink" title="了解通道"></a>了解通道</h3><ol><li>研招网</li><li>目标院校的研究生官网</li><li>考研论坛<a href="http://bbs.kaoyan.com/">考研论坛_考研人的精神家园！ (kaoyan.com)</a></li><li>学信网</li><li>中国考研网</li><li>小木虫</li><li>考研帮</li></ol><h2 id="考研学校分析"><a href="#考研学校分析" class="headerlink" title="考研学校分析"></a>考研学校分析</h2><ol><li>复旦大学</li></ol><p>招262</p><p>数二，英二，408</p><ol><li>华中科技大学</li></ol><p>招120</p><p>数一，英二，834（数据结构，计网）</p><ol><li>中山大学</li></ol><p>招60</p><p>数二，英二，408</p><ol><li>浙江大学</li></ol><p>招149</p><p>数一，英一，408</p><ol><li>武汉大学</li></ol><p>招45</p><p>数二，英二，408</p><h2 id="参考书目"><a href="#参考书目" class="headerlink" title="参考书目"></a>参考书目</h2><p>政治英语的复习问嘉琪吧。</p><h3 id="政治："><a href="#政治：" class="headerlink" title="政治："></a>政治：</h3><p>知识精讲+肖1000+肖八+肖四</p><h3 id="英语："><a href="#英语：" class="headerlink" title="英语："></a>英语：</h3><p>历年真题</p><h4 id="单词："><a href="#单词：" class="headerlink" title="单词："></a>单词：</h4><p>红宝书</p><p>恋练有词</p><p>新版恋词—题源报刊7000词</p><p><strong>李剑词汇真经</strong></p><p>模拟题</p><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>数一：</p><p>李永乐三件套。<strong>复习全书+数一真题+基础660题</strong>。</p><p>合工大五套卷</p><p>数二：</p><p>李永乐三件套。<strong>复习全书+数二真题+基础660题</strong>。</p><p>408：</p><p><strong>王道</strong>和<strong>天勤</strong>的全套复习全书</p><p>王道出的<strong>真题解析</strong>，<strong>王道和天勤模拟题</strong>，大话数据结构</p><p>计算机组成原理，唐朔飞的教材，没答案的不做</p><p>王道8套模拟题</p><p>2.</p><p>1.教材：数据结构（严蔚敏）；计算机组成原理（唐朔飞）；操作系统（汤子瀛）；计算机网络（谢希仁）</p><p>2.辅导资料：王道四本单科书；南小文进阶600题；天勤高分笔记</p><p>3.模拟题：《408计算机专业基础综合》；王道最后八套模拟卷；王道计算机名校模拟题</p><p>4.真题：王道版408真题</p><h2 id="最新复习plan"><a href="#最新复习plan" class="headerlink" title="最新复习plan"></a>最新复习plan</h2><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>英语每天花一个小时背单词(9点背到10点)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;现在是2020.12.5，准备要开始考研的准备啦，因为我的基础其实没有很好，所以得好好地努力一把，加油！&lt;/p&gt;
&lt;h1 id=&quot;考研&quot;&gt;&lt;a href=&quot;#考研&quot; class=&quot;headerlink&quot; title=&quot;考研&quot;&gt;&lt;/a&gt;考研&lt;/h1&gt;&lt;h2 id=&quot;</summary>
      
    
    
    
    <category term="考研" scheme="http://example.com/categories/%E8%80%83%E7%A0%94/"/>
    
    
    <category term="考研" scheme="http://example.com/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>数值微分</title>
    <link href="http://example.com/2020/12/05/%E6%95%B0%E5%80%BC%E5%BE%AE%E5%88%86/"/>
    <id>http://example.com/2020/12/05/%E6%95%B0%E5%80%BC%E5%BE%AE%E5%88%86/</id>
    <published>2020-12-05T02:19:43.000Z</published>
    <updated>2020-12-05T06:39:56.360Z</updated>
    
    <content type="html"><![CDATA[<p>d</p><hr><p>总结了数值积分，接下来就是数值微分了，好吧我再说废话。</p><h3 id="两点前向差分公式"><a href="#两点前向差分公式" class="headerlink" title="两点前向差分公式"></a>两点前向差分公式</h3><script type="math/tex; mode=display">f(x+h)=f(x)+hf^{'}(x)+\frac{h^2}{2}f^{''(c)}</script><script type="math/tex; mode=display">f^{'}(x)=\frac{f(x+h)-f(x)}{h}-\frac{h}{2}f^{''}(c)</script><script type="math/tex; mode=display">f^{'}(x)\approx\frac{f(x+h)-f(x)}{h}</script><p>c是在区间$[x,x+h]$之间的,误差即$\frac{h}{2}f^{‘’}(c)$</p><h3 id="三点中心差分公式"><a href="#三点中心差分公式" class="headerlink" title="三点中心差分公式"></a>三点中心差分公式</h3><script type="math/tex; mode=display">f(x+h)=f(x)+hf^{'}(x)+\frac{h^2}{2}f^{''(x)}+\frac{h^3}{6}f^{'''}(c1)</script><script type="math/tex; mode=display">f(x-h)=f(x)+hf^{'}(x)-\frac{h^2}{2}f^{''(x)}-\frac{h^3}{6}f^{'''}(c2)</script><script type="math/tex; mode=display">f^{'}(x)=\frac{f(x+h)-f(x-h)}{2h}+\frac{f^{'''}(c_h)}{6}h^2</script><script type="math/tex; mode=display">f^{'}(x)\approx\frac{f(x+h)-f(x)}{h}</script><h3 id="二阶导"><a href="#二阶导" class="headerlink" title="二阶导"></a>二阶导</h3><script type="math/tex; mode=display">f^{''}(x)=\frac{f(x+h)-2f(x)+f(x+h)}{h^2}+\frac{h^2}{12}f^{(4)}(c)</script><h3 id="n阶到n-1阶"><a href="#n阶到n-1阶" class="headerlink" title="n阶到n+1阶"></a>n阶到n+1阶</h3><h3 id="一般中值定理"><a href="#一般中值定理" class="headerlink" title="一般中值定理"></a>一般中值定理</h3><p>存在$c\in[a,b]$,使得</p><script type="math/tex; mode=display">(a1+...+a_n)f(c)=a_1f(x_1)+...+a_nf(x_n)</script><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;d&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;总结了数值积分，接下来就是数值微分了，好吧我再说废话。&lt;/p&gt;
&lt;h3 id=&quot;两点前向差分公式&quot;&gt;&lt;a href=&quot;#两点前向差分公式&quot; class=&quot;headerlink&quot; title=&quot;两点前向差分公式&quot;&gt;&lt;/a&gt;两点前向差分公式&lt;/h3&gt;</summary>
      
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="数值计算" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>信号与系统第复习</title>
    <link href="http://example.com/2020/12/03/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2020/12/03/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-12-03T11:00:29.000Z</published>
    <updated>2020-12-09T15:38:24.415Z</updated>
    
    <content type="html"><![CDATA[<hr><p>开始复习信号与系统，按照章节来复习，记录重点，并且会总结题型。</p><h1 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a>Chapter 1</h1><h3 id="1-信号分解"><a href="#1-信号分解" class="headerlink" title="1. 信号分解"></a>1. 信号分解</h3><p>任何信号都可以分解成一个偶信号和一个奇信号之和</p><script type="math/tex; mode=display">x(t)=x_e(t)+x_o(t)</script><script type="math/tex; mode=display">x_e(t)=\frac{1}{2}[x(t)+x(-t)]</script><script type="math/tex; mode=display">x_ot(t)=\frac{1}{2}[x(t)-x(-t)]</script><h3 id="复指数信号"><a href="#复指数信号" class="headerlink" title="复指数信号"></a>复指数信号</h3><h4 id="1-连续的情况"><a href="#1-连续的情况" class="headerlink" title="1 连续的情况"></a>1 连续的情况</h4><p>$x(t)=Ce^{at}$,C,a都是复数，这里不讨论C，a是实数的情况</p><script type="math/tex; mode=display">x(t)=e^{jw_0t}</script><script type="math/tex; mode=display">a=jw_0</script><script type="math/tex; mode=display">x(t)=e^{jw_0t}=cosw_ot+jsinw_0t</script><p>一般情况下的正弦函数(不太懂？？？？)：</p><script type="math/tex; mode=display">x(t)=Acos(w_0t+\phi)=\frac{A}{2}e^{j\phi}e^{jw_0t}+\frac{A}{2}e^{-j\phi}e^{-jw_0t}</script><p>一般情况下复指数：</p><script type="math/tex; mode=display">x(t)=Ce^{at},C=|C|e^{j\theta},a=r+jw_0</script><script type="math/tex; mode=display">x(t)=|C|e^{j\theta}e^{rt}e^{jw_0t}</script><h4 id="2-离散的情况"><a href="#2-离散的情况" class="headerlink" title="2 离散的情况"></a>2 离散的情况</h4><script type="math/tex; mode=display">x(n)=e^{jw_0n}=cosw_0t+jsinw_0t</script><script type="math/tex; mode=display">x(n)=C\alpha ^n,\space C=|C|e^{j\theta},\alpha=|\alpha|e^{jw_0}</script><script type="math/tex; mode=display">x(n=)|C||\alpha|^ne^{j(w_0n+\theta)}=|C||\alpha|^n*[cos(w_0n+\theta)+jsin(w_0n+\theta)]</script><h3 id="单位脉冲和单位阶跃序列"><a href="#单位脉冲和单位阶跃序列" class="headerlink" title="单位脉冲和单位阶跃序列"></a>单位脉冲和单位阶跃序列</h3><h4 id="1-离散情况"><a href="#1-离散情况" class="headerlink" title="1 离散情况"></a>1 离散情况</h4><script type="math/tex; mode=display">\delta(n)=\begin{cases}1,n=0\\0,n\neq0\end{cases}</script><script type="math/tex; mode=display">u(n)=\begin{cases}1,n\geq0\\0,n<0\end{cases}</script><script type="math/tex; mode=display">\delta(n)=u(n)-u(n-1)</script><script type="math/tex; mode=display">u(n)=\sum_{k=-\infty}^n\delta(k)=\sum_{k=0}^\infty \delta(n-k)</script><h4 id="2-连续情况"><a href="#2-连续情况" class="headerlink" title="2 连续情况"></a>2 连续情况</h4><script type="math/tex; mode=display">u(t)=\begin{cases}1,t>0\\0,t<0\end{cases}</script><script type="math/tex; mode=display">\delta(t)=\frac{du(t)}{dt},u(t)=\int_{-\infty}^t\delta(\tau)d\tau</script><h1 id="delta-t-可以看作一个面积始终为1的矩形-矩形面积为冲激强度"><a href="#delta-t-可以看作一个面积始终为1的矩形-矩形面积为冲激强度" class="headerlink" title="$\delta(t)$可以看作一个面积始终为1的矩形,矩形面积为冲激强度"></a>$\delta(t)$可以看作一个面积始终为1的矩形,矩形面积为<em>冲激强度</em></h1><script type="math/tex; mode=display">u(t)=\int_{-\infty}^t\delta(\tau)d\tau =\int_0^\infty \delta(t-\tau)d\tau</script><h3 id="无记忆系统"><a href="#无记忆系统" class="headerlink" title="无记忆系统"></a>无记忆系统</h3><p>输出只与当前的输入有关</p><h3 id="可逆性"><a href="#可逆性" class="headerlink" title="可逆性"></a>可逆性</h3><p>输入与输出是一一对应的就是可逆系统</p><h3 id="因果性"><a href="#因果性" class="headerlink" title="因果性"></a>因果性</h3><p>输出只与此时以及之前的输入有关而与之后的输入无关</p><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>输入有界，产生的输出也是有界的</p><h3 id="时不变系统"><a href="#时不变系统" class="headerlink" title="时不变系统"></a>时不变系统</h3><p>$若x(t)\rightarrow y(t),x(t-t_0)\rightarrow y(t-t_0)$</p><p>检查时不变的步骤：</p><ol><li>输入为$x_1(t)$,输出为$y_1(t)$</li><li>输入为$x_2(t)$,输出为$y_2(t)$</li><li>令$x_2(t)=x_1(t-t_0)$，检验$y_1(t-t_0)$是否等于$y_2(t)$</li></ol><h3 id="线性"><a href="#线性" class="headerlink" title="线性"></a>线性</h3><p>令$x_1(t)\rightarrow y_1(t),x_2(t)\rightarrow y_2(t)$</p><p>$ax_1(t)+bx_2(t)\rightarrow ay_1(t)+by_2(t)$</p><h1 id="Chapter-2-线性时不变系统"><a href="#Chapter-2-线性时不变系统" class="headerlink" title="Chapter 2 线性时不变系统"></a>Chapter 2 线性时不变系统</h1><script type="math/tex; mode=display">x(n)=\sum_{k=-\infty}^{\infty}x(k)\delta(n-k)</script><h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><h4 id="离散时间卷积和"><a href="#离散时间卷积和" class="headerlink" title="离散时间卷积和"></a>离散时间卷积和</h4><p>令$\delta (n-k)$的响应是$h_k(n)$，若是时不变性，所以$\delta(n-k)\rightarrow h(n-k)$</p><p>卷积和：</p><script type="math/tex; mode=display">y(n)=x(n)*h(n)=\sum_{j=-\infty}^{\infty}x(j)h_k(n)=\sum_{j=-\infty}^{\infty}x(j)h(n-k)</script><h4 id="连续时间卷积积分"><a href="#连续时间卷积积分" class="headerlink" title="连续时间卷积积分"></a>连续时间卷积积分</h4><p>任何的连续时间信号可以分解成移位加权的单位冲激信号的线性组合</p><script type="math/tex; mode=display">x(t)=\int_{-\infty}^{\infty}x(\tau)\delta(t-\tau)d\tau</script><p>$\delta(t-\tau)$的响应是$h_\tau (t)$,卷积积分</p><script type="math/tex; mode=display">y(t)=\int_{-\infty}^{\infty}x(\tau)h_\tau (t)d\tau</script><p>系统时不变，卷积积分</p><script type="math/tex; mode=display">y(t)=\int_{-\infty}^{\infty}x(\tau)h(t-\tau)d\tau =x(t)*h(t)</script><p>卷积积分步骤：</p><ol><li>变量置换：将$x(t),h(t)$变为$x(\tau),h(\tau)$ ，以$\tau$为积分变量 </li><li>反褶：将h($\tau$)变为$h(-\tau)$； </li><li>平移：将$h(-\tau)$平移$t$，变为$h[-(\tau -t)]$</li><li>相乘：将$x(\tau)$和$h(t-\tau)$相乘； </li><li>积分：求$x(\tau)$金和$h(t-\tau)$乘积下的面积。</li></ol><h3 id="卷积积分和卷积和性质"><a href="#卷积积分和卷积和性质" class="headerlink" title="卷积积分和卷积和性质"></a>卷积积分和卷积和性质</h3><p>前提是：</p><ul><li><p>系统是LTI系统</p></li><li><p>涉及到的卷积运算收敛</p></li></ul><h4 id="1-交换律"><a href="#1-交换律" class="headerlink" title="1.交换律"></a>1.交换律</h4><h4 id="2-分配律"><a href="#2-分配律" class="headerlink" title="2.分配律"></a>2.分配律</h4><h4 id="3-结合律"><a href="#3-结合律" class="headerlink" title="3.结合律"></a>3.结合律</h4><h4 id="4-微分，积分，时移-卷积积分"><a href="#4-微分，积分，时移-卷积积分" class="headerlink" title="4.微分，积分，时移(卷积积分)"></a>4.微分，积分，时移(卷积积分)</h4><h4 id="5-差分，求和，时移-卷积和"><a href="#5-差分，求和，时移-卷积和" class="headerlink" title="5.差分，求和，时移(卷积和)"></a>5.差分，求和，时移(卷积和)</h4><h3 id="LTI系统的性质"><a href="#LTI系统的性质" class="headerlink" title="LTI系统的性质"></a>LTI系统的性质</h3><p>因为LTI系统是由单位冲激/脉冲响应来表示的，所以LTI的性质也会在位冲激/脉冲响应中体现出来。</p><h4 id="1-记忆性"><a href="#1-记忆性" class="headerlink" title="1.记忆性"></a>1.记忆性</h4><script type="math/tex; mode=display">y(n)=\sum_{k=-\infty}^{\infty}x(k)h(n-k)</script><p>无记忆性即$y(n)$只能与n时刻的的输入有关，所以:</p><script type="math/tex; mode=display">h(n-k)=0,n\neq k</script><p>所以，</p><script type="math/tex; mode=display">h(n)=k\delta(n),h(t)=k\delta(t)</script><script type="math/tex; mode=display">x(n)*h(n)=kx(n),x(t)*h(t)=kx(t)</script><p>否则，则系统时记忆的</p><h4 id="2-可逆性"><a href="#2-可逆性" class="headerlink" title="2.可逆性"></a>2.可逆性</h4><h4 id="3-因果性"><a href="#3-因果性" class="headerlink" title="3.因果性"></a>3.因果性</h4><p>$y(n)$对任何时刻的n,值只取决于n以及n时刻之前的输入，所以$k&gt;n$的项为零即：</p><script type="math/tex; mode=display">h(n-k)=0,k>n</script><h4 id="4-稳定性"><a href="#4-稳定性" class="headerlink" title="4.稳定性"></a>4.稳定性</h4><p>$x(n)$有界，$y(n)$有界</p><h4 id="5-LTI系统的单位阶跃响应"><a href="#5-LTI系统的单位阶跃响应" class="headerlink" title="5.LTI系统的单位阶跃响应"></a>5.LTI系统的单位阶跃响应</h4><hr><p>Chapter 2还没整理完的</p><h1 id="Chapter-3-周期信号的傅里叶级数表示"><a href="#Chapter-3-周期信号的傅里叶级数表示" class="headerlink" title="Chapter 3 周期信号的傅里叶级数表示"></a>Chapter 3 周期信号的傅里叶级数表示</h1><h3 id="傅里叶的作用"><a href="#傅里叶的作用" class="headerlink" title="傅里叶的作用"></a>傅里叶的作用</h3><ol><li>滤波</li><li>求解微分方程</li></ol><p>频域中：</p><p>$’1’:\omega _0$</p><p>$’0’:cos(0t)$</p><h3 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h3><h4 id="三角函数系"><a href="#三角函数系" class="headerlink" title="三角函数系"></a>三角函数系</h4><script type="math/tex; mode=display">{0,1,sinx,cosx,sin2x,cos2x,...,sinnx,cosnx}</script><h4 id="三角函数的正交性"><a href="#三角函数的正交性" class="headerlink" title="三角函数的正交性:"></a>三角函数的正交性:</h4><p>任取两个三角函数系不同的三角函数作积分值都为0</p><script type="math/tex; mode=display">\int_{-\pi}^{\pi}sinnx*cosmxdx=0</script><script type="math/tex; mode=display">\int_{-\pi}^{\pi}cosnx*cosmxdx=0,n\neq m</script><script type="math/tex; mode=display">\int_{-\pi}^{\pi}sinnx*cosmxdx=0,n\neq m</script><h4 id="周期为-2-pi-的函数展开为傅里叶级数"><a href="#周期为-2-pi-的函数展开为傅里叶级数" class="headerlink" title="周期为$2\pi$的函数展开为傅里叶级数"></a>周期为$2\pi$的函数展开为傅里叶级数</h4><script type="math/tex; mode=display">f(x)=f(x+2\pi)</script><script type="math/tex; mode=display">f(x)=\sum_0^\infty a_ncosnx+\sum_0^\infty b_nsinnx,或</script><script type="math/tex; mode=display">f(x)=\frac{a_0}{2}+\sum_1^\infty a_ncosnx+\sum_1^\infty b_nsinnx</script><p>等式两边积分，通过三角函数的正交性可以求得，</p><script type="math/tex; mode=display">a_0=\frac{1}{\pi}\int_{-\pi}^\pi f(x)dx</script><p>找$a_n$</p><p>等式两边乘以$cosmx$,然后等式两边积分:</p><script type="math/tex; mode=display">a_n=\frac{1}{\pi}f(x)cosnxdx</script><p>同理，找$b_n$</p><p>等式两边乘以$sinmx$,然后等式两边积分:</p><script type="math/tex; mode=display">b_n=\frac{1}{\pi}f(x)sinnxdx</script><h4 id="周期为2L的函数傅里叶级数表示"><a href="#周期为2L的函数傅里叶级数表示" class="headerlink" title="周期为2L的函数傅里叶级数表示"></a>周期为2L的函数傅里叶级数表示</h4><script type="math/tex; mode=display">f(t)=f(t+2L)</script><script type="math/tex; mode=display">x=\frac{\pi}{L}t,t=\frac{L}{\pi}x</script><script type="math/tex; mode=display">f(t)=f(\frac{L}{\pi}x)=g(x)</script><script type="math/tex; mode=display">g(x)=\frac{a_0}{2}+\sum_1^\infty a_ncosnx+\sum_1^\infty b_nsinnx</script><p>代入，得</p><p>表达式1：</p><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum_1^\infty a_ncos\frac{n\pi}{L}t+\sum_1^\infty b_nsin\frac{n\pi}{L}t</script><script type="math/tex; mode=display">a_0=\frac{1}{L}\int _{-L}^{L}f(t)dt</script><script type="math/tex; mode=display">a_n=\frac{1}{L}\int _{-L}^{L}f(t)cos\frac{n\pi}Ltdt</script><script type="math/tex; mode=display">b_n=\frac{1}{L}\int _{-L}^{L}f(t)sin\frac{n\pi}Ltdt</script><p>表达式2：</p><script type="math/tex; mode=display">T=2L,\omega=\frac{\pi}{L}</script><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum_1^\infty a_ncosnwt+\sum_1^\infty b_nsinnwt</script><script type="math/tex; mode=display">a_0=\frac{2}{T}\int_0^Tf(t)dt</script><script type="math/tex; mode=display">a_n=\frac{2}{T}\int_0^Tf(t)cosn\omega dt</script><script type="math/tex; mode=display">b_n=\frac{2}{T}\int_0^Tf(t)sinn\omega dt</script><h4 id="傅里叶级数的复数形式"><a href="#傅里叶级数的复数形式" class="headerlink" title="傅里叶级数的复数形式"></a>傅里叶级数的复数形式</h4><p>可以把$a_0,a_n,b_n$用用一种形式表达出来</p><p>欧拉公式</p><script type="math/tex; mode=display">e^{i\theta}=cos\theta+isin\theta</script><script type="math/tex; mode=display">cos\theta=\frac{1}{2}(e^{i\theta}+e^{-i\theta})</script><script type="math/tex; mode=display">sin\theta =-\frac{1}{2i}(e^{i\theta}-e^{-i\theta})</script><p>代入$f(t)$里,</p><script type="math/tex; mode=display">f(t)=\frac{a_0}{2}+\sum_{n=1}^\infty \frac{a_n-ib_n}{2}e^{in\omega t}+\sum_{n=1}^\infty \frac{a_n+ib_n}{2}e^{-in\omega t}</script><script type="math/tex; mode=display">f(t)=\sum_{n=0}^0\frac{a_0}{2}e^{in\omega t}+\sum_{n=1}^\infty \frac{a_n-ib_n}{2}e^{in\omega t}+\sum_{n=-\infty}^{-1} \frac{a_{-n}+ib_{-n}}{2}e^{in\omega t}</script><script type="math/tex; mode=display">f(t)=\sum_\infty ^\infty C_ne^{in\omega t}</script><p>$C_n$代入并通过欧拉公式求得，</p><script type="math/tex; mode=display">C_n=\begin{cases}\frac{1}{T}\int_0^T f(t)dt,n=0\\\frac{1}{T}\int_0^T f(t)e^{-in\omega t}dt,n=1,2,3...\\\frac{1}{T}\int_0^T f(t)e^{-in\omega t}dt,n=-1,-2,-3...\end{cases}</script><p>所以，最后:</p><script type="math/tex; mode=display">f(t)=f(t+T)</script><script type="math/tex; mode=display">f(t)=\sum_{-\infty} ^\infty C_ne^{in\omega_0 t},\omega_0=\frac{2\pi}{T}</script><script type="math/tex; mode=display">C_n=\frac{1}{T}\int_0^T f(t)e^{-in\omega_0 t}dt</script><h4 id="收敛性"><a href="#收敛性" class="headerlink" title="收敛性"></a>收敛性</h4><p>两组条件都是充分条件</p><ol><li>平方可积条件：</li></ol><p>若，$\int_T|x(t)|^2dt&lt;\infty$,则$a_k$必存在</p><ol><li>Dirchlet条件：<ol><li>$x(t)$绝对可积，即$\int_T|x(t)|dt&lt;\infty$</li><li>任何有限区间，只有有限个极值点，且极值为有限值</li><li>任何有限区间，只有有限个间断点，且间断点函数值有限</li></ol></li></ol><h3 id="离散时间傅里叶级数"><a href="#离散时间傅里叶级数" class="headerlink" title="离散时间傅里叶级数"></a>离散时间傅里叶级数</h3><p>$N$为周期</p><script type="math/tex; mode=display">x(n)=\sum_{k=<N>}a_ke^{j\frac{2\pi}{N}kn}</script><script type="math/tex; mode=display">a_k=\frac{1}{N}\sum_{n=<N>}x(n)e^{-j\frac{2\pi}{N}kn}</script><h3 id="傅里叶级数与LTI系统"><a href="#傅里叶级数与LTI系统" class="headerlink" title="傅里叶级数与LTI系统"></a>傅里叶级数与LTI系统</h3><p>连续：</p><script type="math/tex; mode=display">x(t)=\sum_{k=-\infty} ^\infty a_ke^{jk\omega_0 t}\rightarrow y(t)=\sum_{k=-\infty}^\infty a_kH(jk\omega_0)e^{jk\omega_0t}</script><p>频率响应：</p><script type="math/tex; mode=display">H(j\omega)=\int_{-\infty}^\infty h(t)e^{-j\omega t}dt</script><p>离散：</p><script type="math/tex; mode=display">x(n)=\sum_{k=<N>}a_ke^{j\frac{2\pi}{N}kn}\rightarrow y(t)=\sum_{k=-<N>} a_kH(e^{j\frac{2\pi}{N}k})e^{j\frac{2\pi}{N}kn}</script><p>频率响应：</p><script type="math/tex; mode=display">H(e^{j\omega})=\sum_{-\infty}^{\infty}h(n)e^{-j\omega n}</script><h1 id="第四章连续时间傅里叶变换"><a href="#第四章连续时间傅里叶变换" class="headerlink" title="第四章连续时间傅里叶变换"></a>第四章连续时间傅里叶变换</h1><p>时域表达：$t\rightarrow f(t)$</p><p>频域表达:$n\omega_0\rightarrow C_n$    </p><p>非周期:$T\rightarrow \infty $</p><h5 id="离散到连续的变换"><a href="#离散到连续的变换" class="headerlink" title="离散到连续的变换"></a>离散到连续的变换</h5><script type="math/tex; mode=display">\Delta \omega=(n+1)\omega_0-n\omega_0=\omega_0=\frac{2\pi}{T}</script><p>T无穷，$\Delta \omega$趋近于零，所以频谱从离散到连续 </p><h5 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h5><script type="math/tex; mode=display">T\rightarrow \infty,\int_{-\frac{T}{2}}^{\frac{T}{2}}dt\rightarrow \int_{-\infty}^\infty dt</script><script type="math/tex; mode=display">n\omega_0\rightarrow \omega</script><script type="math/tex; mode=display">\frac{1}{T}=\frac{\Delta \omega}{2\pi}</script><script type="math/tex; mode=display">\sum_{n=-\infty}^{\infty}\Delta \omega \rightarrow \int_{-\infty}^\infty d\omega</script><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}f(t)e^{-i\omega t}dte^{i\omega t}d\omega</script><p>傅里叶变换：</p><script type="math/tex; mode=display">F(\omega)=\int_{-\infty}^\infty f(t)e^{-i\omega t}dt</script><p>逆变换:</p><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi}\int_{-\infty}^\infty F(\omega)e^{i\omega t}d\omega</script><h3 id="收敛性-1"><a href="#收敛性-1" class="headerlink" title="收敛性"></a>收敛性</h3><p>和傅里叶级数的情况是一样的</p><ol><li>平方可积条件：</li></ol><p>若，$\int_{-\infty}^\infty|x(t)|^2dt&lt;\infty$,则$X(j\omega)$必存在,</p><p>这表明能量有限的信号其傅里叶变换一定存在。</p><ol><li>Dirchlet条件：<ol><li>$x(t)$绝对可积，即$\int_{-\infty}^{\infty}|x(t)|dt&lt;\infty$</li><li>任何有限区间，只有有限个极值点，且极值为有限值</li><li>任何有限区间，只有有限个间断点，且间断点函数值有限</li></ol></li></ol><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><h4 id="1-线性"><a href="#1-线性" class="headerlink" title="1.线性"></a>1.线性</h4><script type="math/tex; mode=display">ax(t)+by(t)=aX(j\omega)+bY(j\omega)</script><h4 id="2-时移"><a href="#2-时移" class="headerlink" title="2.时移"></a>2.时移</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则x(t-t0)\leftrightarrow X(j\omega)e^{j\omega t_0}</script><h4 id="3-共轭以及共轭对称性"><a href="#3-共轭以及共轭对称性" class="headerlink" title="3.共轭以及共轭对称性"></a>3.共轭以及共轭对称性</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则x^*(t)\leftrightarrow X^*(-j\omega),则</script><h4 id="4-时域微分与积分"><a href="#4-时域微分与积分" class="headerlink" title="4. 时域微分与积分"></a>4. 时域微分与积分</h4><h4 id="5-时域和频域的尺度变换"><a href="#5-时域和频域的尺度变换" class="headerlink" title="5.时域和频域的尺度变换"></a>5.时域和频域的尺度变换</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则x(at)\leftrightarrow \frac{1}{|a|}X(j\frac{\omega}{a})</script><h4 id="6-对偶性"><a href="#6-对偶性" class="headerlink" title="6.对偶性"></a>6.对偶性</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则X(jt)\leftrightarrow 2\pi x(-\omega)</script><h4 id="7-Parseval定理"><a href="#7-Parseval定理" class="headerlink" title="7.Parseval定理"></a>7.Parseval定理</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),则</script><script type="math/tex; mode=display">\int_{-\infty}^\infty |x(t)|^2dt=\frac{1}{2\pi}\int_{-\infty}^\infty |X(j\omega)|^2d\omega</script><h4 id="卷积特性"><a href="#卷积特性" class="headerlink" title="卷积特性"></a>卷积特性</h4><script type="math/tex; mode=display">x(t)\leftrightarrow X(j\omega),h(t)\leftrightarrow H(j\omega)</script><p>则，</p><script type="math/tex; mode=display">x(t)*h(t)\leftrightarrow X(j\omega)H(j\omega)</script><h1 id="第五章离散时间傅里叶变换"><a href="#第五章离散时间傅里叶变换" class="headerlink" title="第五章离散时间傅里叶变换"></a>第五章离散时间傅里叶变换</h1><script type="math/tex; mode=display">X(e^{j\omega})=\sum_{-\infty}^\infty x(n)e^{-j\omega n}</script><script type="math/tex; mode=display">x(n)=\frac{1}{2\pi}{\int}_{2\pi}X(e^{j\omega}e^{j\omega n})d\omega</script><h3 id="1-周期性"><a href="#1-周期性" class="headerlink" title="1.周期性"></a>1.周期性</h3><script type="math/tex; mode=display">x(n)\leftrightarrow X(e^{j\omega}),则X(e^{j（\omega +2\pi)})=X(e^{j\omega})</script><h3 id="2-线性"><a href="#2-线性" class="headerlink" title="2.线性"></a>2.线性</h3><h3 id="3-时移与频移"><a href="#3-时移与频移" class="headerlink" title="3.时移与频移"></a>3.时移与频移</h3><h3 id="4-时域反转"><a href="#4-时域反转" class="headerlink" title="4. 时域反转"></a>4. 时域反转</h3><h3 id="5-共轭对成性"><a href="#5-共轭对成性" class="headerlink" title="5.共轭对成性"></a>5.共轭对成性</h3><h3 id="6-差分与求和"><a href="#6-差分与求和" class="headerlink" title="6.差分与求和"></a>6.差分与求和</h3><h3 id="7-时域内插"><a href="#7-时域内插" class="headerlink" title="7. 时域内插"></a>7. 时域内插</h3><h3 id="8-频域微分"><a href="#8-频域微分" class="headerlink" title="8.频域微分"></a>8.频域微分</h3><h3 id="9-Parseva"><a href="#9-Parseva" class="headerlink" title="9.Parseva"></a>9.Parseva</h3><h1 id="第六章信号与系统的时域和频域特性"><a href="#第六章信号与系统的时域和频域特性" class="headerlink" title="第六章信号与系统的时域和频域特性"></a>第六章信号与系统的时域和频域特性</h1><h2 id="傅里叶变换的模和相位"><a href="#傅里叶变换的模和相位" class="headerlink" title="傅里叶变换的模和相位"></a>傅里叶变换的模和相位</h2><ol><li>连续时间</li></ol><script type="math/tex; mode=display">X(j\omega)=|X(j\omega)|e^{j\ang X(j\omega)}</script><ol><li>离散时间</li></ol><script type="math/tex; mode=display">X(e^{j\omega})=|X(j\omega)|e^{j\ang X(e^{j\omega)}}</script><h2 id="LTI系统频率响应中的模和相位"><a href="#LTI系统频率响应中的模和相位" class="headerlink" title="LTI系统频率响应中的模和相位"></a>LTI系统频率响应中的模和相位</h2><p>LTI对输入信号所起的作用包括两个方面：</p><ol><li>改变频率分量的幅度</li><li>改变频率分量的相对相位</li></ol><script type="math/tex; mode=display">Y(j\omega)=X(j\omega)H(j\omega)</script><script type="math/tex; mode=display">|Y(j\omega)|=|X(j\omega)||H(j\omega)|</script><script type="math/tex; mode=display">\ang Y(j\omega)=\ang H(j\omega)+\ang X(j\omega)</script><h3 id="线性与非线性相位"><a href="#线性与非线性相位" class="headerlink" title="线性与非线性相位"></a>线性与非线性相位</h3><p>若频率响应为：$H(j\omega)=ke^{-j\omega t_0}$,则：</p><script type="math/tex; mode=display">|H(j\omega )|=k,\ang H(j\omega)=\omega t_0</script><p>可以看到相移是关于$\omega$的线性函数，系统的输出就是输入的时移$y(x)=x(t-t_0)$.</p><p>离散的情况，则要求$H(e^{j\omega})=e^{-j\omega n_0}$中的$n_0$为整数，才能是线性的。</p><p>so,无失真传输条件</p><ol><li><script type="math/tex; mode=display">y(t)kx(t-t_0),y(n)=kx(n-n_0)</script></li><li><p>频域表征:</p></li></ol><script type="math/tex; mode=display">H(j\omega)=ke^{-j\omega t_0},H(e^{j\omega})=ke^{-j\omega n_0}</script><ol><li>时域表征：</li></ol><script type="math/tex; mode=display">h(t)=k\delta (t-t_0),h(n)=k\delta (n-n_0)</script><ol><li><script type="math/tex; mode=display">|H(j\omega )|=k,\ang H(j\omega)=\omega t_0</script></li></ol><h3 id="群时延"><a href="#群时延" class="headerlink" title="群时延"></a>群时延</h3><p>对非线性相位系统，定义群时延：</p><script type="math/tex; mode=display">\tau (\omega)=-\frac{d}{d\omega}\ang H(j\omega)</script><p>群时延代表了在一个很窄的频带或很少的一组频率上信号所受到的有效公共延时。</p><h1 id="第七章采样"><a href="#第七章采样" class="headerlink" title="第七章采样"></a>第七章采样</h1><p>将离散信号无失真地转化为连续信号</p><h3 id="冲激串采样"><a href="#冲激串采样" class="headerlink" title="冲激串采样"></a>冲激串采样</h3><script type="math/tex; mode=display">p(t)=\sum_{n=-\infty}^\infty \delta (t-nT)</script><script type="math/tex; mode=display">x_p(t)=x(t)p(t)=\sum_{n=-\infty}^\infty x(t)\delta (t-nT)</script><p>T为采样周期,$\omega_s=\frac{2\pi}{T}$称为采样频率，</p><script type="math/tex; mode=display">p(t)\leftrightarrow P(j\omega)=\frac{2\pi}{T}\sum_{-\infty}^{\infty}\delta(\omega-\frac{2\pi}{T}k)</script><p>求卷积：</p><script type="math/tex; mode=display">X_p(j\omega)=\frac{1}{2\pi}X(j\omega)*P(j\omega)</script><script type="math/tex; mode=display">=\frac{1}{2\pi}X(j\omega)*\frac{2\pi}{T}\sum_{-\infty}^{\infty}\delta(\omega-k\omega_s)</script><script type="math/tex; mode=display">=\frac{1}{T}\sum_{k=-\infty}^{\infty}X(j(\omega-\omega_s),\omega_s=\frac{2\pi}{T}</script><h3 id="采样定理"><a href="#采样定理" class="headerlink" title="采样定理"></a>采样定理</h3><p>设$x(t)$是某一个带限信号，在$|\omega|&gt;\omega_M$时$X(j\omega)=0$。如果$\omega_s&gt;2\omega_M$，其中，$\omega_s=\frac{2\pi}{T}$，那么$x(t)$就唯一地由样本 $x(nT),n=0,±1,±2,⋯$所确定。</p><h3 id="零阶保持采样"><a href="#零阶保持采样" class="headerlink" title="零阶保持采样"></a>零阶保持采样</h3><p>现实中一般是很难实现冲激信号的，一般是对某一时刻的$x(t)$保持样本值，直到下一个样本值被采样。这就称为<strong>零阶保持</strong>.</p><h3 id="内插重建"><a href="#内插重建" class="headerlink" title="内插重建"></a>内插重建</h3><h4 id="1-理想内插"><a href="#1-理想内插" class="headerlink" title="1.理想内插"></a>1.理想内插</h4><h4 id="2-零阶保持内插"><a href="#2-零阶保持内插" class="headerlink" title="2.零阶保持内插"></a>2.零阶保持内插</h4><h4 id="3-一阶保持内插"><a href="#3-一阶保持内插" class="headerlink" title="3.一阶保持内插"></a>3.一阶保持内插</h4><h3 id="欠采样与频谱混叠"><a href="#欠采样与频谱混叠" class="headerlink" title="欠采样与频谱混叠"></a>欠采样与频谱混叠</h3><p>如果不满足采样定理，如$\omega_s&lt;2\omega_M$，在进行周期延拓的时候就会发生频谱混叠的情况</p><h1 id="第八章通信系统"><a href="#第八章通信系统" class="headerlink" title="第八章通信系统"></a>第八章通信系统</h1><p>傅里叶在通信中确实很有用</p><h1 id="第九章拉普拉斯变换"><a href="#第九章拉普拉斯变换" class="headerlink" title="第九章拉普拉斯变换"></a>第九章拉普拉斯变换</h1><p>傅里叶变换有一个局限性就是必须得满足狄利赫里条件，特别是绝对科技条件，比如$f(x)=x^2$就不能使用傅里叶变换，所以科学家就想到了乘以一个快速衰减的函数，所以趋于$\infty$时候原函数衰减到零，满足绝对可积。</p><h3 id="拉普拉斯变换"><a href="#拉普拉斯变换" class="headerlink" title="拉普拉斯变换"></a>拉普拉斯变换</h3><script type="math/tex; mode=display">t(t)=H(s)e^{st},H(s)=\int_{-\infty}^\infty h(t)e^{-st}dt</script><p>$s=j\omega$时,即是连续时间傅里叶变换。扩展到整个复数域，$s=j\omega+\sigma$时，$x(t)$的双边拉式变换：</p><script type="math/tex; mode=display">X(s)=\int_{-\infty}^\infty x(t)e^{-st}dt\\=\int_{-\infty}^\infty [x(t)e^{-\sigma t}]e^{-j\omega t}dt=F(x(t)e^{-\sigma t})</script><p>所以$x(t)$的拉式变换就是$x(t)e^{-\sigma t}$的傅里叶变换</p><p>傅里叶反变化：</p><script type="math/tex; mode=display">x(t)e^{-\sigma t}=\frac{1}{2\pi}\int_{-\infty}^\infty X(s)e^{j\omega t}d\omega</script><script type="math/tex; mode=display">x(t)=\frac{1}{2\pi}\int_{-\infty}^\infty X(s)e^{(\sigma +j\omega)t}d\omega</script><p>用$ds$代替$d\omega$,$\sigma$为常数，所以有拉普拉斯反变换:</p><script type="math/tex; mode=display">x(t)=\frac{1}{2\pi j}\int_{-\infty+\sigma}^{\infty +\sigma} X(s)e^{st}ds</script><p>拉普拉斯正变换：</p><script type="math/tex; mode=display">X(s)=\int_{-\infty}^\infty x(t)e^{-st}ds</script><h3 id="收敛域-ROC"><a href="#收敛域-ROC" class="headerlink" title="收敛域(ROC)"></a>收敛域(ROC)</h3><p>$e^{-\sigma t}$是一个衰减因子，$\sigma$的取值不同，则衰减的速度也不同。如果衰减过慢，那么$x(t)e^{-\sigma t}$不收敛,因此定义<strong>收敛域</strong>为使得$X(s)$存在的$s$的区域，记为<strong>ROC</strong>,也是拉氏变换的存在条件。</p><p>$\sigma$取值不同，衰减的方向也不同：</p><ul><li>$\sigma&gt;0,x(t)$是右边信号(只有$t&gt;0$时候有值)，则存在$\sigma_1,$对$\forall \sigma&gt;\sigma_1,\lim_{t\rightarrow\infty}x(t)e^{-\sigma t}=0$,此时$ROC:\sigma&gt;\sigma_1$</li><li>$\sigma<0,x(t)$是左边信号(只有$t>0$时候有值)，则存在$\sigma_2,$对$\forall \sigma&gt;\sigma_2,\lim_{t\rightarrow\infty}x(t)e^{-\sigma t}=0$,此时$ROC:\sigma&gt;\sigma_2$</li></ul><h1 id="自然数e"><a href="#自然数e" class="headerlink" title="自然数e"></a>自然数e</h1><p>e代表了连续，对于一个单位状态量的变化率是固定值(%100)的系统，e代表在一个单位时间内，连续的翻倍增长所能达到的极限值.</p><script type="math/tex; mode=display">e=\lim_{n\rightarrow \infty}(1+\frac{1.00}{n})^n</script><script type="math/tex; mode=display">e^x=\lim_{n\rightarrow \infty}((1+\frac{1.00}{n/x})^{n/x})^x=\lim_{n\rightarrow \infty}((1+\frac{x}{n})^n</script><p>由上面的分析可知，对于一个单位状态量的变化率是固定值的系统，其状态可以用自然常数的指数函数来表示。</p><h1 id="欧拉恒等式"><a href="#欧拉恒等式" class="headerlink" title="欧拉恒等式"></a>欧拉恒等式</h1><script type="math/tex; mode=display">e^{ix}=\lim_{n\rightarrow \infty}(1+\frac{ix}{n})^n</script><p>在n趋近于无穷的时候，$e^{ix}$其实就是一个单位圆</p><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201209165504646.png" alt="image-20201209165504646" style="zoom:67%;" /></p><p>所以自然而然的有：</p><script type="math/tex; mode=display">e^{ix}=cosx+isinx</script><p>欧拉恒等式:</p><script type="math/tex; mode=display">e^{i\pi}+1=0</script>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;开始复习信号与系统，按照章节来复习，记录重点，并且会总结题型。&lt;/p&gt;
&lt;h1 id=&quot;Chapter-1&quot;&gt;&lt;a href=&quot;#Chapter-1&quot; class=&quot;headerlink&quot; title=&quot;Chapter 1&quot;&gt;&lt;/a&gt;Chapter 1&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="信号与系统" scheme="http://example.com/categories/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="信号与系统" scheme="http://example.com/tags/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>demo1</title>
    <link href="http://example.com/2020/12/02/demo1/"/>
    <id>http://example.com/2020/12/02/demo1/</id>
    <published>2020-12-01T17:33:35.000Z</published>
    <updated>2020-12-01T17:34:42.982Z</updated>
    
    <content type="html"><![CDATA[<hr><p>(FREE) Old Town</p><p>世俗蒙蔽了眼睛 无法分辨真假</p><p>有人不懂 有人确实在装疯卖傻</p><p>何必再去相信 那些他人的言语</p><p>bitch 太多 我不是傻白甜别来占我便宜</p><p>我嫌弃的不是你 是这个社会</p><p>所谓的君子太多 让我不禁撤退</p><p>那些表面一套 背后一套的人让我作呕</p><p>我要化身为魔 我偏要和社会作对；</p><p>招数太多 没有包袱 脸皮都不要</p><p>耍着阴招 达到新高 穿肠的毒药</p><p>那些虚假的fake 得到了虚假的位置</p><p>看不清楚几两几斤 尽然觉得自己对</p><p>bitch 是否还能看得见</p><p>bitch 不然继续犯着贱</p><p>bitch 还在对我放着电~</p><p>mother fxxker,早就看得厌</p><p>马戏团 跳梁小丑 笑着 跳着舞</p><p>太一般  弱的loser 叫了 笑着哭</p><p>太极端 专研 停止 不止三年 形势</p><p>早就被拉开差距 实力悬殊</p><p>射手专注 化身艾希 点了战争热诚</p><p>实力过人 提起加特林 嘟嘟嘟嘟嘟</p><p>地不停地输出 刺痛你的神经让你疼 </p><p>成王败寇 成为夺冠热门</p><p>J to the N 开始代表时代的声音</p><p>从地狱到天堂 180的高度</p><p>J to the N 开始代表时代的声音</p><p>从地狱到天堂 十八般的招数</p><p>bitch 是否还能看得见</p><p>bitch 不然继续在这里犯着贱</p><p>bitch 还在对我放着电</p><p>mother fxxker,早就看得厌    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;(FREE) Old Town&lt;/p&gt;
&lt;p&gt;世俗蒙蔽了眼睛 无法分辨真假&lt;/p&gt;
&lt;p&gt;有人不懂 有人确实在装疯卖傻&lt;/p&gt;
&lt;p&gt;何必再去相信 那些他人的言语&lt;/p&gt;
&lt;p&gt;bitch 太多 我不是傻白甜别来占我便宜&lt;/p&gt;
&lt;p&gt;我嫌弃的不是你 是这个社会&lt;</summary>
      
    
    
    
    <category term="饶舌" scheme="http://example.com/categories/%E9%A5%B6%E8%88%8C/"/>
    
    
    <category term="饶舌" scheme="http://example.com/tags/%E9%A5%B6%E8%88%8C/"/>
    
  </entry>
  
  <entry>
    <title>离散对数问题</title>
    <link href="http://example.com/2020/12/02/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2020/12/02/%E7%A6%BB%E6%95%A3%E5%AF%B9%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2020-12-01T17:01:34.000Z</published>
    <updated>2020-12-07T08:21:01.784Z</updated>
    
    <content type="html"><![CDATA[<hr><p>离散对数问题可以表达成一下形式：</p><script type="math/tex; mode=display">\beta\in<\alpha>,找出唯一指数a，0\leq a\leq n-1,使得\alpha ^a=\beta</script><h3 id="Shanks算法"><a href="#Shanks算法" class="headerlink" title="Shanks算法"></a>Shanks算法</h3><h3 id="Pollard-rho-算法"><a href="#Pollard-rho-算法" class="headerlink" title="Pollard $\rho$算法"></a>Pollard $\rho$算法</h3><h3 id="Pohlig-Hellman算法"><a href="#Pohlig-Hellman算法" class="headerlink" title="Pohlig-Hellman算法"></a>Pohlig-Hellman算法</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;离散对数问题可以表达成一下形式：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\beta\in&lt;\alpha&gt;,找出唯一指数a，0\leq a\leq n-1,使得\alpha ^a=\beta&lt;/script&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="密码学" scheme="http://example.com/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
    <category term="密码学" scheme="http://example.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>数值积分</title>
    <link href="http://example.com/2020/11/30/%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86/"/>
    <id>http://example.com/2020/11/30/%E6%95%B0%E5%80%BC%E7%A7%AF%E5%88%86/</id>
    <published>2020-11-30T15:54:33.000Z</published>
    <updated>2020-12-01T14:23:19.153Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="数值积分"><a href="#数值积分" class="headerlink" title="数值积分"></a>数值积分</h1><p>当遇到无法解析求解的定积分，可以使用数值积分来计算</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>从公式：</p><script type="math/tex; mode=display">I=\int_a^bf(x)dx=(b-a)f(\xi)</script><p>开始，可以看到$f(\xi)$平均高度是个关键点，从这里着手，提供一种近似算法将其取代</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>取适当的节点$x_k$并用$f(x_k)$的加权平均值座作为$f(\xi)$的近似值</p><script type="math/tex; mode=display">I=\int_a^bf(x)dx\approx \sum_{k=0}^nA_kf(x_k)=I_n</script><p>$x_k$：求积节点</p><p>$A_k$：求积系数，$A_k$仅与$X_k$有关</p><p>$R(f)=I-I_n$  ：求积余项</p><h4 id="m次代数精度"><a href="#m次代数精度" class="headerlink" title="m次代数精度"></a>m次代数精度</h4><p>精度准确即是$\int_a^bf(x)dx$ 与 $\sum_{k=0}^nA_kf(x_k)$相等，代数精度越高，求积公式则越好</p><ol><li>对所有次数不超过m的多项式都精确成立</li><li>至少对一个m+1次多项式不精确成立</li></ol><h5 id="充要条件"><a href="#充要条件" class="headerlink" title="充要条件"></a>充要条件</h5><p>求积公式具有m次代数精度充要条件是该求积公式：</p><ol><li>对$x^k(k=0,1,2,…,m)$精确成立</li><li>对$x^{m+1}$不精确成立</li></ol><h3 id="插值型积分"><a href="#插值型积分" class="headerlink" title="插值型积分"></a>插值型积分</h3><p>插值型积分也就是能够确定$A_k$的值，实际上应该是任意一种不同类型的数值积分都是可以确定$A_k$的值的，$A_k$的值将在下面给出推导：</p><ol><li>先取n+1个在$[a,b]$的节点$x_i$,则可以求得$f(x)$的拉格朗日插值多项式</li></ol><script type="math/tex; mode=display">L_n(X)=\sum_{k=0}^nf(x_k)l_k(x)   ,f(x)\approx L_n(x)</script><ol><li><script type="math/tex; mode=display">I=\int_a^bf(x)dx=\int_a^b\sum_{k=0}^nf(x_k)l_k(x)=\sum_{k=0}^nA_kf(x_k)</script></li><li><p>所以有，</p></li></ol><script type="math/tex; mode=display">A_k=\int_a^bl_k(x)</script><p>还有一些$R(f)$,插值型求积公式充要条件，收敛性，稳定性就不总结了，应该不会考</p><h4 id="牛顿-科特斯公式"><a href="#牛顿-科特斯公式" class="headerlink" title="牛顿-科特斯公式"></a>牛顿-科特斯公式</h4><p>即是插值型积分，特别的就是取的$x_k$的值是取将$[a,b]$划为n等分取的,特斯拉系数是比较好求的多项式积分，并且与[a,b]无关，再者有个特斯拉系数表表格</p><script type="math/tex; mode=display">h=\frac{b-a}{n},x_k=a+kh</script><script type="math/tex; mode=display">A_k=\int_a^bl_k(x)dx=\int_a^b\prod_{j\neq k}\frac{x-x_j}{x_k-x_j}dx,(k=0,1...,n)</script><p>科特斯系数$C_k^{(n)}$:</p><script type="math/tex; mode=display">C_k^{(n)}=\frac{(-1)^{n-k}}{nk!(n-k)!}\int_0^n \prod_{j\neq k}^n(t-j)dt,(k=0,1...,n)</script><script type="math/tex; mode=display">A_k=(b-a)C_k^{(n)}</script><script type="math/tex; mode=display">I=\sum_{k=0}^nA_kf(x_k)</script><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201201213532822.png" alt="image-20201201213532822" style="zoom: 67%;" /></p><h5 id="复合Simpson公式"><a href="#复合Simpson公式" class="headerlink" title="复合Simpson公式"></a>复合Simpson公式</h5><script type="math/tex; mode=display">h=(b-a)/n</script><script type="math/tex; mode=display">\int_a^bf(x)dx=\frac{h}{6}[f(a)+4*\sum_{k=0}^{n-1}f(x_k+\frac{h}{2})+2*\sum_{k=1}^{n-1}f(x_k)+f(b)]</script>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;数值积分&quot;&gt;&lt;a href=&quot;#数值积分&quot; class=&quot;headerlink&quot; title=&quot;数值积分&quot;&gt;&lt;/a&gt;数值积分&lt;/h1&gt;&lt;p&gt;当遇到无法解析求解的定积分，可以使用数值积分来计算&lt;/p&gt;
&lt;h3 id=&quot;思想&quot;&gt;&lt;a href=&quot;#思想&quot; c</summary>
      
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="数值计算" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>插值</title>
    <link href="http://example.com/2020/11/29/%E6%8F%92%E5%80%BC/"/>
    <id>http://example.com/2020/11/29/%E6%8F%92%E5%80%BC/</id>
    <published>2020-11-28T17:30:30.000Z</published>
    <updated>2020-12-01T09:44:18.095Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数值计算学习中有学到插值，总结一下插值，和拟合的区别是拟合是找到总体上来说离给出的已知点最近的曲线，插值则是求得的曲线是满足都经过已知点的，就很牛逼。</p><h1 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h1><h3 id="一些定义以及性质"><a href="#一些定义以及性质" class="headerlink" title="一些定义以及性质"></a>一些定义以及性质</h3><ol><li><p>插值函数g(x):</p><script type="math/tex; mode=display">g(x_i)=f(x_i),i=0,1,....,n</script></li><li><p>插值节点：上面的{$x_i$}</p></li><li><p>定理：n+1个$x_i$不相同节点的n次插值多项式存在且唯一</p></li></ol><h3 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h3><h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><p>朗日朗日插值它的插值多项式在非它的插值节点$x_i$的$l(x_j)$都取0</p><p>缺点：节点变化的时候拉格朗日插值需要重新构造</p><h5 id="插值函数"><a href="#插值函数" class="headerlink" title="插值函数"></a>插值函数</h5><script type="math/tex; mode=display">g(x)=f(x_0)l_0(x)+f(x_1)l_1(x)+...+f(x_n)l_n(x)</script><p>​                                                               #$l_i(x)$是次数不超过n次的多项式</p><script type="math/tex; mode=display">对于g(x_i),l_i(x)=1，l_j(x)=0,j\neq i</script><p>Lagrange基函数：</p><script type="math/tex; mode=display">l_i(x)=\frac{(x-x_0)(x-x_{i-1})(x-x_{i+1})(x-x_n)}{(x_i-x_0)(x_i-x_{i-1})(x_i-x_{i+1})(x_i-x_n)}</script><p>Lagrange插值：</p><script type="math/tex; mode=display">L_n(x)=f(x_0)l_0(x)+f(x_1)l_1(x)+...+f(x_n)l)n(x)</script><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201129212906862.png" alt="image-20201129212906862"></p><h4 id="分段拉格朗日插值"><a href="#分段拉格朗日插值" class="headerlink" title="分段拉格朗日插值"></a>分段拉格朗日插值</h4><h5 id="分段线性拉格朗日插值"><a href="#分段线性拉格朗日插值" class="headerlink" title="分段线性拉格朗日插值"></a>分段线性拉格朗日插值</h5><p>差不多就是两两相邻的节点形成一个拉格朗日插值，x在哪个区间就使用哪个拉格朗日插值</p><script type="math/tex; mode=display">L^{(k)}(x)=y_kl_k(x)+y_{k+1}l_{k+1}(x),k=0,1,2...n-1</script><script type="math/tex; mode=display">=y_k\frac{x-x_{k+1}}{x_k-x_{k+1}}+y_{k+1}\frac{x-x_{k}}{x_{x+1}-x_{k}}</script><p>L(x)=$L^{(k)}(x)$                  ，        当$x_k\leqslant x&lt;x_{k+1}$</p><p>内插：插在里面 ………………</p><p>外插：$x^*\notin[x_0,x_n]$</p><h5 id="分段二次插值"><a href="#分段二次插值" class="headerlink" title="分段二次插值"></a>分段二次插值</h5><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201129230549180.png" alt="image-20201129230549180" style="zoom:80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;数值计算学习中有学到插值，总结一下插值，和拟合的区别是拟合是找到总体上来说离给出的已知点最近的曲线，插值则是求得的曲线是满足都经过已知点的，就很牛逼。&lt;/p&gt;
&lt;h1 id=&quot;插值&quot;&gt;&lt;a href=&quot;#插值&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="数值计算" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>python下函数与图像的显示</title>
    <link href="http://example.com/2020/11/28/python%E4%B8%8B%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%BE%E5%83%8F%E7%9A%84%E6%98%BE%E7%A4%BA/"/>
    <id>http://example.com/2020/11/28/python%E4%B8%8B%E5%87%BD%E6%95%B0%E4%B8%8E%E5%9B%BE%E5%83%8F%E7%9A%84%E6%98%BE%E7%A4%BA/</id>
    <published>2020-11-27T16:57:10.000Z</published>
    <updated>2020-12-01T09:46:46.404Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数值计算里为了显示函数的图像，总结一下python里相关的知识。</p><hr><h4 id="调库"><a href="#调库" class="headerlink" title="调库"></a>调库</h4><p>matplotlib.pyplot和MATLAB很相似，之中各种状态通过函数调用保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h5 id="np-arange"><a href="#np-arange" class="headerlink" title="np.arange()"></a>np.arange()</h5><p>np.arange(a,b,step) #step是步长</p><p>函数返回一个有终点和起点的固定步长的排列，如[1,2,3,4,5]，起点是1，终点是6，步长为1。</p><h5 id="plt-plot"><a href="#plt-plot" class="headerlink" title="plt.plot()"></a>plt.plot()</h5><p>plt.plot(x,y,format_string,**kwargs)</p><p>函数用来确定x,y，以及图像的一些颜色之类的特征</p><div class="table-container"><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center"><code>x</code></td><td style="text-align:center">X轴数据，列表或数组，可选</td></tr><tr><td style="text-align:center"><code>y</code></td><td style="text-align:center">Y轴数据，列表或数组</td></tr><tr><td style="text-align:center"><code>format_string</code></td><td style="text-align:center">控制曲线的格式字符串，可选</td></tr><tr><td style="text-align:center"><code>**kwargs</code></td><td style="text-align:center">第二组或更多(x,y,format_string)，可画多条曲线</td></tr></tbody></table></div><p>format_string 由颜色字符、风格字符、标记字符组成</p><ul><li><p>颜色字符</p><ol><li><p><code>&#39;b&#39;</code> 蓝色  <code>&#39;m&#39;</code> 洋红色 magenta</p></li><li><p><code>&#39;g&#39;</code> 绿色   <code>&#39;y&#39;</code>  黄色</p></li><li><p><code>&#39;r&#39;</code> 红色   <code>&#39;k&#39;</code> 黑色</p></li><li><p><code>&#39;w&#39;</code> 白色      <code>&#39;c&#39;</code> 青绿色 cyan</p></li><li><p><code>&#39;#008000&#39;</code> RGB某颜色 <code>&#39;0.8&#39;</code> 灰度值字符串</p></li><li><p>多条曲线不指定颜色时，会自动选择不同颜色</p></li></ol></li><li><p>风格字符</p><ol><li><p><code>&#39;‐&#39;</code> 实线</p></li><li><p><code>&#39;‐‐&#39;</code> 破折线</p></li><li><p><code>&#39;‐.&#39;</code> 点划线</p></li><li><p><code>&#39;:&#39;</code> 虚线</p></li><li><p><code>&#39;&#39; &#39; &#39;</code> 无线条</p></li></ol></li><li><p>标记字符</p><ol><li><p><code>&#39;.&#39;</code> 点标记</p></li><li><p><code>&#39;,&#39;</code> 像素标记(极小点)</p></li><li><p><code>&#39;o&#39;</code> 实心圈标记</p></li><li><p><code>&#39;v&#39;</code> 倒三角标记</p></li><li><p><code>&#39;^&#39;</code> 上三角标记</p></li><li><p><code>&#39;&gt;&#39;</code> 右三角标记</p></li><li><p><code>&#39;0&lt;&#39;</code> 左三角标记…等等</p></li></ol></li></ul><h5 id="plt-show"><a href="#plt-show" class="headerlink" title="plt.show()"></a>plt.show()</h5><p>显示图像</p><h5 id="plt-figure"><a href="#plt-figure" class="headerlink" title="plt.figure()"></a>plt.figure()</h5><p>要显示的图像的名字</p><p>e.g.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(<span class="string">&quot;my_pic&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="plt-subplot"><a href="#plt-subplot" class="headerlink" title="plt.subplot()"></a>plt.subplot()</h5><p>把多张图显示到一个显示界面上。</p><p>plt.subplot(row,col,code)#生成row行，col列，code是编号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">t=np.arange(<span class="number">0.0</span>,<span class="number">2.0</span>,<span class="number">0.1</span>)</span><br><span class="line">s=np.sin(t*np.pi)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>) <span class="comment">#要生成两行两列，这是第一个图plt.subplot(&#x27;行&#x27;,&#x27;列&#x27;,&#x27;编号&#x27;)</span></span><br><span class="line">plt.plot(t,s,<span class="string">&#x27;b--&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y1&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>) <span class="comment">#两行两列,这是第二个图</span></span><br><span class="line">plt.plot(<span class="number">2</span>*t,s,<span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y2&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">#两行两列,这是第三个图</span></span><br><span class="line">plt.plot(<span class="number">3</span>*t,s,<span class="string">&#x27;m--&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>)<span class="comment">#两行两列,这是第四个图</span></span><br><span class="line">plt.plot(<span class="number">4</span>*t,s,<span class="string">&#x27;k--&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201128014751120.png" alt="image-20201128014751120" style="zoom:50%;" /></p><h5 id="y-cos-x-图像"><a href="#y-cos-x-图像" class="headerlink" title="y=cos(x)图像"></a>y=cos(x)图像</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x=np.arange(<span class="number">-5.0</span>,<span class="number">5.0</span>,<span class="number">0.01</span>)</span><br><span class="line">y1=np.cos(x)</span><br><span class="line">print(y1.shape[<span class="number">0</span>])</span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(x,y1,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;数值计算里为了显示函数的图像，总结一下python里相关的知识。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;调库&quot;&gt;&lt;a href=&quot;#调库&quot; class=&quot;headerlink&quot; title=&quot;调库&quot;&gt;&lt;/a&gt;调库&lt;/h4&gt;&lt;p&gt;matplotlib.pyplot和MA</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>拟合</title>
    <link href="http://example.com/2020/11/26/%E6%8B%9F%E5%90%88/"/>
    <id>http://example.com/2020/11/26/%E6%8B%9F%E5%90%88/</id>
    <published>2020-11-26T09:09:47.000Z</published>
    <updated>2020-12-01T09:47:27.542Z</updated>
    
    <content type="html"><![CDATA[<hr><p>拟合，插值，逼近是数学分析的三大基础工具，在这里总结一下拟合</p><p>拟合：已知点列，整体靠近它们</p><p>插值：已知点列并且完全经过点列</p><p>逼近：已知曲线，或者点列，通过逼近使得构造的函数无限靠近它们</p><h2 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h2><h3 id="拟合定义"><a href="#拟合定义" class="headerlink" title="拟合定义"></a>拟合定义</h3><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201126171847274.png" alt="image-20201126171847274"></p><h3 id="最小二乘问题"><a href="#最小二乘问题" class="headerlink" title="最小二乘问题"></a>最小二乘问题</h3><p>最小二乘即f(X)-g(X)的范数是2-范数，这种问题就是最小二乘问题。</p><p>所以，即找g(x)使得</p><script type="math/tex; mode=display">||f(x)-g(x)||_2=\sqrt{\sum_{i=0}^n(f(x_i)-g(x_i))^2}</script><p>取到最小值，记为评价函数$L(a_1,a_2…..a_n)$</p><p>欲取得评价函数最小值，则要对每个变量$a_i$的偏导等于零，即：</p><script type="math/tex; mode=display">\frac{\partial L}{\partial a_i}=0 ,i\in(1,n)</script><ol><li>线性拟合</li></ol><script type="math/tex; mode=display">f(x)=ax+b</script><ol><li><p>低次多项式拟合</p><script type="math/tex; mode=display">f(x)=ax^3+bx^2+cx+d</script></li><li><p>指数拟合</p></li></ol><script type="math/tex; mode=display">f(x)=e^{ax+b}</script><script type="math/tex; mode=display">\downarrow</script><script type="math/tex; mode=display">\ln{f(x)}=ax+b</script><p>将$\ln{f(x)}$记为y,则变成了线性拟合y=ax+b</p><h4 id="线性角度的最小二乘"><a href="#线性角度的最小二乘" class="headerlink" title="线性角度的最小二乘"></a>线性角度的最小二乘</h4><p>从微积分的视角来看，最小二乘法相当于求解约等方程组，那么最小二乘法的线性代数视角又是什么呢？</p><p>　　先来看向量的投影：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPnlp40wlWiaF6MX6SxTLDDALmlC9QeZtRGibMgoiaiaGamtibGmd9QiaHVV6A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　b,p,e 是3个向量，其中p是b 在平面上的投影， e是b和p 的误差向量，e=b-p 。平面可以看作二维向量张成的向量空间，p 在该空间上。将向量投影到向量空间有什么意义呢？这要从方程 Ax=b 说起。</p><p>　　小明根据测量结果得到了一个方程组，并将它进一步化简为矩阵的形式：</p><p><strong><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPdyBcocsPVXL7cicHAnr7UJdNSUM4djqdsU83ibSqEhTp37xJTBThGQicw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></strong></p><p>　　对于小明的数据来说， Ax=b无解，实际上大多数这种类型的方程都无解。A的列空间的含义是方程组有解时b 的取值空间，当b 不在 A的列空间时，方程无解。具体来说，当A 是行数大于列数的长方矩阵时，意味着方程组中的方程数大于未知数的个数，此时肯定无解。</p><p>　　虽然方程无解，但我们还是希望能够运算下去，这就需要换个思路——不追求可解，转而寻找最能接近问题的解。对于无解方程Ax=b 来说，Ax 总是在列空间上（因为列空间本来就是由 Ax确定的，和b 无关），而 b就不一定了，所以需要微调 ，将p 调整至列空间中最接近它的一个，此时Ax=b 变成了：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPuCiazYlBdVFVViaChicAibEFyiaCgXHPy0rNRDDC5XtFA8Sv3zYjSkT3noQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　p就是 b在 A的列空间上的投影， x上加一个小帽子表示x 的估计值。当然，因为方程无解，所以本来也不可能有 Ax=b。此时问题转换为寻找最好的估计值 ，使它尽可能满足原方程：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPz4vxUcGPRefVxjyrhttFQujAZrh3griatq4iaTgBgvV5Ie3SmveOz0Pw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　在上图中，A的秩是2，平面表示A的列空间，平面上的向量有无数个，其中最接近b 的当然是b 在平面上的投影，因为只有在这时 b-p 才能产生模最小的误差向量。</p><p>　　如何求得估计值呢？</p><p>　　在小明的测量数据中，A的列空间是一个超平面，A的两个列向量都在这个超平面上，b和p 的误差向量e垂直于超平面，因此e也垂直于超平面上的所有向量，这意味着e 和 A的两个列向量的点积为0。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPia1KCT5K8lr8RjPxtDhqMic956cLdwVb4HKibnVObWJdAsKCl0pwAicFGA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　将二者归纳为一个矩阵方程：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPrDKeQWNCuWDgdvT2kAoTqYuv5zbQPyHvYKPc2ELgBsvCZ8ODgG5Z5g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　矩阵方程已经去掉了关于 的信息，通过该方程可进一步求得估计值：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAP7bYbzPdedicTubQN92WosnDicchkzV5KTG8PYtjGNmIIBibXedZ6RTDIw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>　　这就是最终结果了，它是由矩阵方程推导而来的，所以这个结果叫做“正规方程”。</p><p>　　还有一种更简单的方式可以得到正规方程。Ax=b无解的原因是因为 A 是一个长方矩阵，只要在等式两侧同时乘以 AT，就可以把长方矩阵转换成方阵，进而求解。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/fa2XFHj9frnUibQFibibHZad5IGvC0skcAPzictPfPWnG6TfoqBOW8b9oYQV0V3riccBfcIn7qFFuLwDMzoJF94kpTQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h5 id="多项式的非线性拟合y-cosx"><a href="#多项式的非线性拟合y-cosx" class="headerlink" title="多项式的非线性拟合y=cosx"></a>多项式的非线性拟合y=cosx</h5><p>求出A，b,然后套公式就行了：</p><script type="math/tex; mode=display">x=(A^TA)^{-1}A^Tb</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">least_squres</span>(<span class="params">n</span>):</span></span><br><span class="line">    b=np.zeros(<span class="number">9</span>)<span class="comment">#测试数据为8</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        b[i]=cos(-pi+(<span class="number">6</span>/<span class="number">8</span>)*i)</span><br><span class="line">    A=np.zeros([<span class="number">9</span>,n+<span class="number">1</span>])</span><br><span class="line">    <span class="comment">#n次方,则有n+1个c_i</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">            A[i][j]=(-pi+(<span class="number">6</span>/<span class="number">8</span>)*i)**j</span><br><span class="line">    <span class="comment">#x=np.zeros(n+1)</span></span><br><span class="line">    x=np.dot(np.linalg.inv((np.dot(A.T,A))),np.dot(A.T,b))</span><br><span class="line">    print(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p><img src="C:\Users\WIN10\AppData\Roaming\Typora\typora-user-images\image-20201129011908811.png" alt="image-20201129011908811" style="zoom:50%;" /></p><h1 id="一共有5个曲线，蓝色和绿色分别是n-2和n-3的时候，红色，黑色，白色分别是n-4-n-6-y-cosx的时候，可以看到n-2-3时候与y-cosx有一定差别-而用n-4-6的多项式拟合y-cosx与原图基本是重合的。"><a href="#一共有5个曲线，蓝色和绿色分别是n-2和n-3的时候，红色，黑色，白色分别是n-4-n-6-y-cosx的时候，可以看到n-2-3时候与y-cosx有一定差别-而用n-4-6的多项式拟合y-cosx与原图基本是重合的。" class="headerlink" title="一共有5个曲线，蓝色和绿色分别是n=2和n=3的时候，红色，黑色，白色分别是n=4,n=6,y=cosx的时候，可以看到n=2,3时候与y=cosx有一定差别,而用n=4,6的多项式拟合y=cosx与原图基本是重合的。"></a>一共有5个曲线，蓝色和绿色分别是n=2和n=3的时候，红色，黑色，白色分别是n=4,n=6,y=cosx的时候，可以看到n=2,3时候与y=cosx有一定差别,而用n=4,6的多项式拟合y=cosx与原图基本是重合的。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;拟合，插值，逼近是数学分析的三大基础工具，在这里总结一下拟合&lt;/p&gt;
&lt;p&gt;拟合：已知点列，整体靠近它们&lt;/p&gt;
&lt;p&gt;插值：已知点列并且完全经过点列&lt;/p&gt;
&lt;p&gt;逼近：已知曲线，或者点列，通过逼近使得构造的函数无限靠近它们&lt;/p&gt;
&lt;h2 id=&quot;拟合&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="数值计算" scheme="http://example.com/categories/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="数值计算" scheme="http://example.com/tags/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://example.com/2020/11/24/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2020/11/24/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-11-24T12:53:16.000Z</published>
    <updated>2020-12-01T09:47:23.053Z</updated>
    
    <content type="html"><![CDATA[<hr><p>复习数据结构，然后总结一下数据结构的排序算法，并再用python全都实现一次。</p><hr><p><img src="https://pic2.zhimg.com/80/v2-2586b672d2b78f583c29f6a6cfa10545_1440w.jpg" alt="img"  /></p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h3 id="比较排序"><a href="#比较排序" class="headerlink" title="比较排序"></a>比较排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序是最基本的排序算法，比较相邻的元素，将大（小）的放到后面。每一躺循环，将最大（最小）的交换到最后面。</p><h5 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>第一躺循环，从arr[0]到arr[N-1]，两两比较，若arr[x]&gt;arr[x+1]，则进行交换，从而使得最后在arr[N-1]的是最大的数</li><li>下一趟循环，则变成从arr[0]到arr[N-2]</li><li>重复直到完成最后一趟循环即arr[0]到arr[1]的比较</li></ol><h5 id="算法评价"><a href="#算法评价" class="headerlink" title="算法评价"></a>算法评价</h5><p>一共进行了N-1次循环，确定了N-1次要确定的最大数</p><p>稳定，平均时间复杂度为$o(n^2)$</p><h5 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bubble_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    length=<span class="built_in">len</span>(arr)</span><br><span class="line">    j=length<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(j):</span><br><span class="line">            <span class="keyword">if</span> arr[x]&gt;arr[x+<span class="number">1</span>]:</span><br><span class="line">                temp=arr[x]</span><br><span class="line">                arr[x]=arr[x+<span class="number">1</span>]</span><br><span class="line">                arr[x+<span class="number">1</span>]=temp</span><br><span class="line">        j-=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>顾名思义，插入排序(Insertion Sort)就是将一个元素插入到已经排序好的序列中，这里是arr[x]插入到已经排序好的(arr[0]~arr[x-1])中</p><h5 id="算法流程-1"><a href="#算法流程-1" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>index左边是有序的，右边是待插入的，index是从1开始，N-1结束</li><li>两种选择：</li></ol><ul><li>从右往左一个个两两交换，直到遇到比arr[index]小的数停止</li><li>把arr[index]用temp保存，找到要插入的位置insert_index，即是最后一个比temp大的数的位置，将arr[insert_index]到arr[index-1]全都往后移一位，然后再插入</li></ul><h5 id="算法代码-1"><a href="#算法代码-1" class="headerlink" title="算法代码"></a>算法代码</h5><ol><li>第一种</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Insertion_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="number">0</span>,<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[j<span class="number">-1</span>]:</span><br><span class="line">                temp=arr[j]</span><br><span class="line">                arr[j]=arr[j<span class="number">-1</span>]</span><br><span class="line">                arr[j<span class="number">-1</span>]=temp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><ol><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Insertion_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">        temp=arr[i]</span><br><span class="line">        j=i<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span> <span class="keyword">and</span> arr[j]&gt;temp:</span><br><span class="line">            arr[j+<span class="number">1</span>]=arr[j]</span><br><span class="line">            j=j<span class="number">-1</span></span><br><span class="line">        arr[j+<span class="number">1</span>]=temp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure></li></ol><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序就是每次在待选择的序列里选择一个最小的到最前面，感觉比前面两种垃圾一点。</p><h5 id="算法流程-2"><a href="#算法流程-2" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>找到列表中最小的元素将其与列表第一个元素交换</li><li>其次，将剩下的待排序的元素中找到最小的元素将其与第二个元素交换</li><li>重复，完成N-1躺排序</li></ol><p>时间复杂度：$o(n^2)$</p><h5 id="算法代码-2"><a href="#算法代码-2" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Selection_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        min_index=i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;arr[min_index]:</span><br><span class="line">                min_index=j</span><br><span class="line">        <span class="keyword">if</span> min_index!=i:</span><br><span class="line">            temp=arr[i]</span><br><span class="line">            arr[i]=arr[min_index]</span><br><span class="line">            arr[min_index]=temp</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序有动态规划，递归的思想，将大的慢慢地分成小的，即分治法，然后还有挖坑填数。</p><p>时间复杂度</p><ol><li>最好：o(nlogn)</li><li>最坏：$o(n^2)$</li></ol><h5 id="算法流程-3"><a href="#算法流程-3" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>把数组的第一个数当作基准线</li><li>通过一躺排序将数据分成两部分，左边是比基准线pivot小的，有部分是比基准线大的。（这里用的是挖坑法）下面介绍</li><li>递归，左边在分成两部分，右边也分成两部分一直递归成一个数就是完成了排序</li></ol><h5 id="挖坑法（如下例子）"><a href="#挖坑法（如下例子）" class="headerlink" title="挖坑法（如下例子）"></a>挖坑法（如下例子）</h5><p>表格中<strong>红色</strong>的字体为需要填的坑，<strong>绿色</strong>的字体为已经移动过的数据。</p><p><img src="https://pic3.zhimg.com/80/v2-956317f6dd542f4af77e97a7df554c9e_1440w.jpg" alt="img"></p><p>1.刚开始，i 和 j 分别指向数组头和数组尾，即 i = 0，j = 9，基准数取第一个数，即index = array[i] = array[0] = 23。</p><p>此时，array[0]的值已经存在了index，因此array[0]的位置就好像被挖了个坑，可以填充一个数。</p><p>因此，我们从位置 j 开始向左寻找比index小的数，当 j = 8 时，符合条件，于是我们将array[8]的值填到array[0] ，即将9填入array[0]，并将 i 向右移动一个位置，即 i++。从位置 j 向左寻找比index小的数，并在寻找到后填入坑中，用代码表示如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; array[j] &gt;= index) &#123; <span class="comment">// 向左寻找第一个小于index的数</span></span><br><span class="line">    j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">    array[i++] = array[j]; <span class="comment">// 将array[j]填入array[i]，并将i向右移动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，array数组如下图。</p><p><img src="https://pic3.zhimg.com/80/v2-e9cc5a1482c5c92fef056109ae4c77ba_1440w.jpg" alt="img"></p><p>2.因为array[0]的坑被array[8]填了，于是array[8]的位置又成了一个新的坑。此时我们从位置 i 开始向右寻找比index大的数，当 i = 2 时符合条件，于是我们将array[2]的值填到array[8] ，即将37填入array[8]，并将 j 向左移动一个位置，即 j—。从位置 i 向右寻找比index大的数，并在寻找到后填入坑中，用代码表示如下（跟上面相似）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] &lt; index) &#123;<span class="comment">// 向右寻找第一个大于index的数</span></span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">    array[j--] = array[i]; <span class="comment">// 将array[i]填入array[j]，并将j向左移动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，array数组如下图。</p><p><img src="https://pic2.zhimg.com/80/v2-a1e2a86ba05d0386d64fe80269bb8e0d_1440w.jpg" alt="img"></p><p>3.同样的，array[8]的坑被array[2]填了，于是array[2]的位置又成了一个新的坑。此时我们从位置 j 开始向左寻找比index小的数，当 j = 5 时符合条件，于是我们将array[5]的值填到array[2] ，即将21填入array[2]，并将 i 向右移动一个位置，即 i++，此时array数组如下图。</p><p><img src="https://pic4.zhimg.com/80/v2-cd105e804f80f8627724d9391a1d95bf_1440w.jpg" alt="img"></p><p>4.同样的，array[2]的坑被array[5]填了，于是array[5]的位置又成了一个新的坑。此时我们从位置 i 开始向右寻找比index大的数，当 i = 3 时符合条件，于是我们将array[3]的值填到array[5] ，即将89填入array[5]，并将 j 向左移动一个位置，即 j—，此时array数组如下图。</p><p><img src="https://pic4.zhimg.com/80/v2-102a01c56f6ee964a82946812b814d57_1440w.jpg" alt="img"></p><p>5.同样的，array[5]的坑被array[3]填了，于是array[3]的位置又成了一个新的坑。此时我们从位置 j 开始向左寻找比index小的数，当 j = 4 时符合条件，于是我们将array[4]的值填到array[3] ，即将2填入array[3]，并将 i 向右移动一个位置，即 i++，此时array数组如下图。</p><p><img src="https://pic3.zhimg.com/80/v2-1891cb980464e954422d28b4a4732e16_1440w.jpg" alt="img"></p><p>6.此时，我们发现 i = j，结束遍历，并将index填入array[4]，即将23填入array[4]，此时array数组如下图。此时，array[4]左边的数据全比array[4]小，而array[4]右边的数据全比array[4]大。</p><p><img src="https://pic2.zhimg.com/80/v2-e145dc8be04dcb3f7963057927322839_1440w.jpg" alt="img"></p><p>7.接下去，我们只需要对array[4]两边的数据分别在进行上面的操作即可（分治法），如下图。</p><p><img src="https://pic2.zhimg.com/80/v2-c6dfc70cfd7bfa13fe7bfbe07f41a81d_1440w.jpg" alt="img"></p><p>分治的代码可以写成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quickSort(array, low, i - <span class="number">1</span>); <span class="comment">// 递归调用，分治</span></span><br><span class="line">quickSort(array, i + <span class="number">1</span>, high);     <span class="comment">// 递归调用，分治</span></span><br></pre></td></tr></table></figure><h5 id="算法代码-3"><a href="#算法代码-3" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Quick_Sort</span>(<span class="params">arr,first,last</span>):</span></span><br><span class="line">    <span class="keyword">if</span> first&gt;=last:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    pivot=arr[first]</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="comment">#count为0的时候就是从右往左选比temp小的数</span></span><br><span class="line">    <span class="comment">#count为1的时候就是从左往右选比temp大的数</span></span><br><span class="line">    i=first</span><br><span class="line">    j=last<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span> i!=j:</span><br><span class="line">        <span class="keyword">if</span> count==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> arr[j]&lt;pivot:</span><br><span class="line">                arr[i]=arr[j]</span><br><span class="line">                count=<span class="number">1</span></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> arr[i]&gt;=pivot:</span><br><span class="line">                arr[j]=arr[i]</span><br><span class="line">                count=<span class="number">0</span></span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">    arr[i]=pivot</span><br><span class="line">    Quick_Sort(arr,first,i)</span><br><span class="line">    Quick_Sort(arr,i+<span class="number">1</span>,last)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>归并排序的思想是分治法，将一个待排序的数组分成两半，不断地分直到数组中只有一个数，然后再返回去，从底向上的去排序</p><h5 id="算法流程-4"><a href="#算法流程-4" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>将一个数组一切为二分成两半</li><li>递归地切，结束条件是数组长度为1</li><li>底层的向上开始排序，方法为新建一个空数组temp，因为对于每一个数组切的一个组来说，它的两个子组其实都是已经排好序的了，所以只要比较两个子组的第一个数，一直将小的那个压进temp里即可</li></ol><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p><img src="https://img-blog.csdn.net/20180530172505241?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>当我们要排序这样一个数组的时候，归并排序法首先将这个数组分成一半。如图：</p><p><img src="https://img-blog.csdn.net/20180530172514606?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>然后想办法把左边的数组给排序，右边的数组给排序，之后呢再将它们归并起来。当然了当我们对左边的数组和右边的素组进行排序的时候，再分别将左边的数组和右边的数组分成一半，然后对每一个部分先排序，再归并。如图：</p><p><img src="https://img-blog.csdn.net/20180530172527805?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><strong>对于上面的每一个部分呢，我们依然是先将他们分半，再归并，如图：</strong></p><p><img src="https://img-blog.csdn.net/20180530172534847?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>分到一定细度的时候，每一个部分就只有一个元素了，那么我们此时不用排序，对他们进行一次简单的归并就好了。如图：</p><p><img src="https://img-blog.csdn.net/20180530172545305?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>归并到上一个层级之后继续归并，归并到更高的层级，如图：</p><p><img src="https://img-blog.csdn.net/20180530172551477?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>直至最后归并完成。</p><p><img src="https://img-blog.csdn.net/2018053017255916?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>只不过现在计算机中时间的效率要比空间的效率重要的多。无论是内存也好还是硬盘也好可以存储的数据越来越多，所以设计一个算法，时间复杂度是要优先考虑的。整体来讲我们要使用三个索引来在数组内进行追踪。</p><p><strong><em>\</em><img src="https://img-blog.csdn.net/20180530173456808?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">**</strong></p><p>蓝色的箭头表示最终选择的位置，而红色的箭头表示两个数组当前要比较的元素，比如当前是2与1比较，1比2小，所以1放到蓝色的箭头中，**蓝色的箭头后移，1的箭头后移。</p><p><img src="https://img-blog.csdn.net/20180530173627602?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>然后2与4比较，2比4小那么2到蓝色的箭头中，蓝色箭头后移，2后移，继续比较…….</p><p><strong><em>\</em><img src="https://img-blog.csdn.net/20180530173953848?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tfa29yaXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">**</strong></p><h5 id="算法代码-4"><a href="#算法代码-4" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ef Merge_Sort(arr):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a=Merge_Sort(arr[:<span class="built_in">int</span>(<span class="built_in">len</span>(arr)/<span class="number">2</span>)])</span><br><span class="line">        b=Merge_Sort(arr[<span class="built_in">int</span>(<span class="built_in">len</span>(arr)/<span class="number">2</span>):])</span><br><span class="line">    temp=[]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(a)!=<span class="number">0</span> <span class="keyword">or</span> <span class="built_in">len</span>(b)!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a)==<span class="number">0</span>:</span><br><span class="line">            temp.append(b.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(b)==<span class="number">0</span>:</span><br><span class="line">            temp.append(a.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>]:</span><br><span class="line">                temp.append(a.pop(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp.append(b.pop(<span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>希尔排序可以说是高级版的插入排序，还挺牛逼的，原理大概就是先将待排序的数组大致做一个排序，然后这个数组宏观上看起来就是顺序的，所以最后到最细致的插入排序的时候其实基本就不用怎么交换。</p><h5 id="算法流程-5"><a href="#算法流程-5" class="headerlink" title="算法流程"></a>算法流程</h5><ol><li>确定分组，取length为数组长度的一半，然后以arr[x],arr[x+length]为一组，并每一组进行插入排序</li><li>length减半，同样以arr[x],arr[x+length]……,arr[x+klength]为一组，每一组进行插入排序</li><li>循环，直到length=0循环停止</li></ol><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><p><img src="https://images2015.cnblogs.com/blog/1024555/201611/1024555-20161128110416068-1421707828.png" alt="img"></p><h5 id="算法代码-5"><a href="#算法代码-5" class="headerlink" title="算法代码"></a>算法代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Shell_Sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    length=<span class="built_in">int</span>((<span class="built_in">len</span>(arr))/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">while</span> length!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+length,<span class="built_in">len</span>(arr),length):</span><br><span class="line">                temp=arr[j]</span><br><span class="line">                x=j-length</span><br><span class="line">                <span class="keyword">while</span> x&gt;=<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> arr[x]&gt;temp:</span><br><span class="line">                        arr[x+length]=arr[x]</span><br><span class="line">                        x=x-length</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                arr[x+length]=temp</span><br><span class="line">        print(arr)</span><br><span class="line">        print(length)</span><br><span class="line">        length=<span class="built_in">int</span>(length/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;复习数据结构，然后总结一下数据结构的排序算法，并再用python全都实现一次。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/80/v2-2586b672d2b78f583c29f6a6cfa10545_1440w.jp</summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关于考研2</title>
    <link href="http://example.com/2020/11/24/%E5%85%B3%E4%BA%8E%E8%80%83%E7%A0%942/"/>
    <id>http://example.com/2020/11/24/%E5%85%B3%E4%BA%8E%E8%80%83%E7%A0%942/</id>
    <published>2020-11-24T05:16:33.000Z</published>
    <updated>2020-11-24T05:30:43.101Z</updated>
    
    <content type="html"><![CDATA[<hr><p>几天前的话，回了家一趟，和我姐姐聊了一下，我姐姐现在大四，还有一个月就要考研初试了，她和我讲了很多关于考研的事情，我基本也是确定了之后就是要考研了。</p><hr><p>剑指2021 12月份~</p><hr><h3 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h3><h5 id="寒假前"><a href="#寒假前" class="headerlink" title="寒假前"></a>寒假前</h5><ol><li>先确定好自己要考研的院校</li><li>那些要考的专业科目开始看，但不是刷题很深地看，就是过一下，总结到blog，然后再自己敲代码去实现</li><li>开始背单词？好久没有学习英语了</li><li>还有这学期地课也不要落下了，开始准备复习</li></ol><h5 id="寒假后"><a href="#寒假后" class="headerlink" title="寒假后"></a>寒假后</h5><p>按照那个时间表跟着规划去做题，刷题，听课！</p><p>感觉就是和高考差不都，一轮复习，又一轮复习的</p><hr><h4 id="考研科目"><a href="#考研科目" class="headerlink" title="考研科目"></a>考研科目</h4><h5 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h5><p>100分</p><h5 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h5><p>150分</p><h6 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h6><p>100分 </p><h6 id="专业课："><a href="#专业课：" class="headerlink" title="专业课："></a>专业课：</h6><p>150分</p><p>数据结构45分，计算机组成原理45分，操作系统35分，计算机网络25分；</p><p>试卷题型结构：单项选择题，80分（40小题，每小题2分）；综合题，70分；</p><hr><p>加油~愿韶华不负</p><p>​                                                                      JAYSON</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;几天前的话，回了家一趟，和我姐姐聊了一下，我姐姐现在大四，还有一个月就要考研初试了，她和我讲了很多关于考研的事情，我基本也是确定了之后就是要考研了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;剑指2021 12月份~&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;时间安排&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="未来方向" scheme="http://example.com/categories/%E6%9C%AA%E6%9D%A5%E6%96%B9%E5%90%91/"/>
    
    
    <category term="未来方向" scheme="http://example.com/tags/%E6%9C%AA%E6%9D%A5%E6%96%B9%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://example.com/2020/11/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://example.com/2020/11/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-11-23T16:45:26.000Z</published>
    <updated>2020-12-01T09:47:01.139Z</updated>
    
    <content type="html"><![CDATA[<hr><p>动态规划算法，一个感觉和递归很像的东西。</p><p>递归：自上到下，慢慢到底部，不会记录每个问题的结果，内存消耗相对小，但会冲股份计算相同的问题，耗时多。</p><p>动态规划：自下到上，会记录每一个问题的结果，内存消耗相对比较大，但不会计算相同的问题，时间消耗较小。</p><h4 id="动态规划解决问题的特点"><a href="#动态规划解决问题的特点" class="headerlink" title="动态规划解决问题的特点"></a>动态规划解决问题的特点</h4><ol><li>最优化：即一个问题的子问题的解也是最优的</li><li>无后效性：即一个状态与之后的决策无关，如找零钱问题amount[5]与amount[5+x]无关</li><li>有重叠子问题：子问题之间不是独立的，可能子问题之间存在子问题调用关系</li></ol><p>tips：有重叠子问题不是必要条件，但这是动态规划算法相比其他算法的优势</p><h4 id="动态规划算法步骤"><a href="#动态规划算法步骤" class="headerlink" title="动态规划算法步骤"></a>动态规划算法步骤</h4><ol><li>创建一个存放保存子问题状态的空间</li><li>找到每个状态之间的之间的关系</li><li>返回需要求的值</li></ol><h4 id="找零钱问题"><a href="#找零钱问题" class="headerlink" title="找零钱问题"></a>找零钱问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span>(<span class="params">self, coins, amount: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        coins.sort()</span><br><span class="line">        dp=&#123;&#125;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,amount+<span class="number">1</span>):</span><br><span class="line">            dp[i]=amount+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,amount+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> coins:</span><br><span class="line">                <span class="keyword">if</span> i&gt;=j:</span><br><span class="line">                    dp[i]=<span class="built_in">min</span>(dp[i],(dp[i-j]+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> dp[amount]&lt;amount:</span><br><span class="line">            <span class="keyword">return</span> dp[amount]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;动态规划算法，一个感觉和递归很像的东西。&lt;/p&gt;
&lt;p&gt;递归：自上到下，慢慢到底部，不会记录每个问题的结果，内存消耗相对小，但会冲股份计算相同的问题，耗时多。&lt;/p&gt;
&lt;p&gt;动态规划：自下到上，会记录每一个问题的结果，内存消耗相对比较大，但不会计算相同的问题，时间</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PCA降维以及图片重构</title>
    <link href="http://example.com/2020/11/22/PCA%E9%99%8D%E7%BB%B4%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E9%87%8D%E6%9E%84/"/>
    <id>http://example.com/2020/11/22/PCA%E9%99%8D%E7%BB%B4%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E9%87%8D%E6%9E%84/</id>
    <published>2020-11-22T08:50:34.000Z</published>
    <updated>2020-12-01T09:46:14.263Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数值计算中有一个大作业是关于PCA的降维以及重构的，这里就总结一下，感觉还是蛮实用的。</p><h4 id="PCA概念"><a href="#PCA概念" class="headerlink" title="PCA概念"></a>PCA概念</h4><p>PCA即主成分分析方法，是一种使用最广泛的数据降维算法。PCA的主要思想是将n维特征映射到k维上，这k维是全新的正交特征也被称为主成分，是在原有n维特征的基础上重新构造出来的k维特征。</p><h4 id="PCA思想"><a href="#PCA思想" class="headerlink" title="PCA思想"></a>PCA思想</h4><ol><li>数据中的信息是分布不均匀的，有些地方数据多，有些地方数据少</li><li>所以将一些少的信息去掉，对于原始数据是没有很大影响的，即抓住主要矛盾，忽略次要矛盾</li><li>经过推导可以知道协方差矩阵的特征值代表了数据包含的信息量，所以可以取大的特征值，舍弃掉小的从而完成降维</li></ol><h4 id="PCA降维步骤"><a href="#PCA降维步骤" class="headerlink" title="PCA降维步骤"></a>PCA降维步骤</h4><ol><li>去平均值(即去中心化)，即每一位特征减去各自的平均值。</li><li>计算协方差矩阵$\frac{1}{n}XX^T$</li><li>求协方差矩阵$\frac{1}{n}XX^T$的特征值和特征向量</li><li>对特征值从大到小排序，选择其中最大的k个。然后将其对应的k个特征向量分别作为行向量组成特征向量矩阵P。</li><li>将数据转换到k个特征向量构建的新空间中，即Y=PX。</li></ol><h4 id="图像重构"><a href="#图像重构" class="headerlink" title="图像重构"></a>图像重构</h4><p>将上面的Y乘上P.T加上去中心化减去的值得到重构的图像</p><p>即：</p><script type="math/tex; mode=display">reconstruction=Y*P'+meanvalue</script><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><ol><li>读取训练集图像，每一个人脸图像以一个列向量的形式存在，所以需要将每个图像重构成列向量</li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:img_num <span class="comment">%逐一读取图像</span></span><br><span class="line">    image_name = img_path_list(<span class="built_in">j</span>).name;<span class="comment">%图像名</span></span><br><span class="line">    img = imread(strcat(file_path,image_name));              </span><br><span class="line">    img = imresize(img, <span class="number">0.2</span>, <span class="string">&#x27;nearest&#x27;</span>);</span><br><span class="line">     [irow,icol] = <span class="built_in">size</span>(img);<span class="comment">%得到图片大小</span></span><br><span class="line">    temp = <span class="built_in">reshape</span>(img,irow*icol,<span class="number">1</span>);<span class="comment">%将二维图片转为一维向量</span></span><br><span class="line">    <span class="comment">% 每张图片的信息做为V的一列  </span></span><br><span class="line">    Q(:,<span class="built_in">j</span>)=temp;</span><br><span class="line">    imgTrain=[imgTrain,temp];</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol><li>读取完人脸数据后，将数据零均值化，即人脸向量减去平均值脸向量。然后求出这组数据的协方差矩阵的特征值向量和特征值向量,这些单位特征向量可以形成一个特征空间，然后把原图像向量向这个特征空间中投影，就可以得到特征脸</li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">mean</span>(imgTrain,<span class="number">2</span>); <span class="comment">% 平均图像/行平均</span></span><br><span class="line">Train_Number = <span class="built_in">size</span>(imgTrain,<span class="number">2</span>);<span class="comment">%列数</span></span><br><span class="line"><span class="comment">%计算机每一张图片到均值图像的方差</span></span><br><span class="line">A = [];  </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : Train_Number<span class="comment">%对每一列</span></span><br><span class="line">    temp = double(imgTrain(:,<span class="built_in">i</span>))-m; <span class="comment">%每一张图与均值的差异</span></span><br><span class="line">    A = [A temp]; <span class="comment">%差矩阵</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%得到A的协方差矩阵并转置得到L</span></span><br><span class="line">L = A&#x27;*A; <span class="comment">% L是协方差矩阵C=A*A&#x27;的转置</span></span><br><span class="line"><span class="comment">%得到特征值与特征向量</span></span><br><span class="line">[V,D] = eig(L); <span class="comment">%对角线上的元素是L|C的特征值.V:以特征向量为列的满秩矩阵，D：特征值对角矩阵。即L*V = V*D.</span></span><br><span class="line">L_eig_vec = [];<span class="comment">%特征值向量</span></span><br><span class="line"><span class="built_in">max</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">size</span>(V,<span class="number">2</span>)<span class="comment">%对每个特征向量   </span></span><br><span class="line">   <span class="built_in">max</span>=<span class="built_in">max</span>+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">size</span>(V,<span class="number">2</span>):<span class="number">-1</span>:<span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-2</span><span class="comment">%对每个特征向量      </span></span><br><span class="line">    L_eig_vec = [L_eig_vec V(:,<span class="built_in">i</span>)]*<span class="number">0</span>;<span class="comment">%集中对应的特征向量</span></span><br><span class="line">    sum=sum+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-3</span>:<span class="number">-1</span>:<span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-9</span><span class="comment">%对每个特征向量      </span></span><br><span class="line">    L_eig_vec = [L_eig_vec V(:,<span class="built_in">i</span>)]*<span class="number">0.05</span>;<span class="comment">%集中对应的特征向量</span></span><br><span class="line">    sum=sum+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-10</span>:<span class="number">-1</span>:<span class="number">1</span><span class="comment">%对每个特征向量      </span></span><br><span class="line">    L_eig_vec = [L_eig_vec V(:,<span class="built_in">i</span>)];<span class="comment">%集中对应的特征向量</span></span><br><span class="line">    sum=sum+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">if</span>(sum/<span class="built_in">max</span>&gt;<span class="number">0.99</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Eigenfaces = A * L_eig_vec; <span class="comment">% 计算机协方差矩阵C的特征向量，</span></span><br><span class="line">                            <span class="comment">%得到降维了的特征,A为每一张图像与均值图像的差构成的矩阵，</span></span><br><span class="line">TrainProjectedImages = [];<span class="comment">%映射图像</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : img_num<span class="comment">%对于每一个训练特征</span></span><br><span class="line">    temp = Eigenfaces&#x27;*double(Q(:,<span class="built_in">i</span>));</span><br><span class="line">    TrainProjectedImages = [TrainProjectedImages temp];  <span class="comment">%得到 L_eig_vec;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol><li>人脸重建</li></ol><p>人脸重建实验的目的是为了测试特征脸所携带的人脸信息。由于特征值的大小代表了其所对应的特征向量所携带的信息量，通过将最大的一些特征值对应的特征向量叠加就可以获得原图像中的大部分信息量，也就是所谓的主成分。这里先将所有特征值按从大到小的顺序排列。通过叠加特征向量的方式，就可以得到一组对原人脸的逼近特征脸。而将特征值加起来，正是总的信息量，也可以求出重构误差。</p><ol><li>人脸识别</li></ol><p>人脸识别即给出一个待识别的在测试集中的图像，计算该图像与已经有的人脸即训练集中的人脸的距离，距离最小的则认为该图片的人脸。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:Testcols</span><br><span class="line">    mImgTestCur = TestProjectedImages(:,<span class="built_in">i</span>);</span><br><span class="line">    vDisMin = <span class="number">9999999999999</span>;</span><br><span class="line">    vClassMin = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:Traincols</span><br><span class="line">        mImgTrainCur = TrainProjectedImages(:,<span class="built_in">j</span>);</span><br><span class="line">        mDis = mImgTestCur-mImgTrainCur;</span><br><span class="line">        mDis = mDis.^<span class="number">2</span>;</span><br><span class="line">        vDis = <span class="built_in">sqrt</span>(sum(mDis));</span><br><span class="line">        <span class="keyword">if</span> vDis&lt;vDisMin</span><br><span class="line">            vDisMin = vDis;</span><br><span class="line">    m=<span class="built_in">j</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    name1=img_path_list_train(m).name;</span><br><span class="line">   name1 =name1(<span class="number">6</span>:<span class="number">7</span>);<span class="comment">%取名字的6-7位置的字符</span></span><br><span class="line">    name2=img_path_list_test(<span class="built_in">i</span>).name;</span><br><span class="line">     name2 =name2(<span class="number">6</span>:<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> name2==name1</span><br><span class="line">count=count+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><p>未完待续…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;数值计算中有一个大作业是关于PCA的降维以及重构的，这里就总结一下，感觉还是蛮实用的。&lt;/p&gt;
&lt;h4 id=&quot;PCA概念&quot;&gt;&lt;a href=&quot;#PCA概念&quot; class=&quot;headerlink&quot; title=&quot;PCA概念&quot;&gt;&lt;/a&gt;PCA概念&lt;/h4&gt;&lt;p&gt;PC</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="matlab" scheme="http://example.com/tags/matlab/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
