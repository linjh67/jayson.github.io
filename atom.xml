<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jayson</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-23T17:00:17.435Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>jayson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划</title>
    <link href="http://example.com/2020/11/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://example.com/2020/11/24/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-11-23T16:45:26.000Z</published>
    <updated>2020-11-23T17:00:17.435Z</updated>
    
    <content type="html"><![CDATA[<hr><p>动态规划算法，一个感觉和递归很像的东西。</p><p>递归：自上到下，慢慢到底部，不会记录每个问题的结果，内存消耗相对小，但会冲股份计算相同的问题，耗时多。</p><p>动态规划：自下到上，会记录每一个问题的结果，内存消耗相对比较大，但不会计算相同的问题，时间消耗较小。</p><h4 id="动态规划解决问题的特点"><a href="#动态规划解决问题的特点" class="headerlink" title="动态规划解决问题的特点"></a>动态规划解决问题的特点</h4><ol><li>最优化：即一个问题的子问题的解也是最优的</li><li>无后效性：即一个状态与之后的决策无关，如找零钱问题amount[5]与amount[5+x]无关</li><li>有重叠子问题：子问题之间不是独立的，可能子问题之间存在子问题调用关系</li></ol><p>tips：有重叠子问题不是必要条件，但这是动态规划算法相比其他算法的优势</p><h4 id="动态规划算法步骤"><a href="#动态规划算法步骤" class="headerlink" title="动态规划算法步骤"></a>动态规划算法步骤</h4><ol><li>创建一个存放保存子问题状态的空间</li><li>找到每个状态之间的之间的关系</li><li>返回需要求的值</li></ol><h4 id="找零钱问题"><a href="#找零钱问题" class="headerlink" title="找零钱问题"></a>找零钱问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span>(<span class="params">self, coins, amount: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        coins.sort()</span><br><span class="line">        dp=&#123;&#125;</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,amount+<span class="number">1</span>):</span><br><span class="line">            dp[i]=amount+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,amount+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> coins:</span><br><span class="line">                <span class="keyword">if</span> i&gt;=j:</span><br><span class="line">                    dp[i]=<span class="built_in">min</span>(dp[i],(dp[i-j]+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> dp[amount]&lt;amount:</span><br><span class="line">            <span class="keyword">return</span> dp[amount]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;动态规划算法，一个感觉和递归很像的东西。&lt;/p&gt;
&lt;p&gt;递归：自上到下，慢慢到底部，不会记录每个问题的结果，内存消耗相对小，但会冲股份计算相同的问题，耗时多。&lt;/p&gt;
&lt;p&gt;动态规划：自下到上，会记录每一个问题的结果，内存消耗相对比较大，但不会计算相同的问题，时间</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PCA降维以及图片重构</title>
    <link href="http://example.com/2020/11/22/PCA%E9%99%8D%E7%BB%B4%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E9%87%8D%E6%9E%84/"/>
    <id>http://example.com/2020/11/22/PCA%E9%99%8D%E7%BB%B4%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E9%87%8D%E6%9E%84/</id>
    <published>2020-11-22T08:50:34.000Z</published>
    <updated>2020-11-22T12:57:18.856Z</updated>
    
    <content type="html"><![CDATA[<hr><p>数值计算中有一个大作业是关于PCA的降维以及重构的，这里就总结一下，感觉还是蛮实用的。</p><h4 id="PCA概念"><a href="#PCA概念" class="headerlink" title="PCA概念"></a>PCA概念</h4><p>PCA即主成分分析方法，是一种使用最广泛的数据降维算法。PCA的主要思想是将n维特征映射到k维上，这k维是全新的正交特征也被称为主成分，是在原有n维特征的基础上重新构造出来的k维特征。</p><h4 id="PCA思想"><a href="#PCA思想" class="headerlink" title="PCA思想"></a>PCA思想</h4><ol><li>数据中的信息是分布不均匀的，有些地方数据多，有些地方数据少</li><li>所以将一些少的信息去掉，对于原始数据是没有很大影响的，即抓住主要矛盾，忽略次要矛盾</li><li>经过推导可以知道协方差矩阵的特征值代表了数据包含的信息量，所以可以取大的特征值，舍弃掉小的从而完成降维</li></ol><h4 id="PCA降维步骤"><a href="#PCA降维步骤" class="headerlink" title="PCA降维步骤"></a>PCA降维步骤</h4><ol><li>去平均值(即去中心化)，即每一位特征减去各自的平均值。</li><li>计算协方差矩阵$\frac{1}{n}XX^T$</li><li>求协方差矩阵$\frac{1}{n}XX^T$的特征值和特征向量</li><li>对特征值从大到小排序，选择其中最大的k个。然后将其对应的k个特征向量分别作为行向量组成特征向量矩阵P。</li><li>将数据转换到k个特征向量构建的新空间中，即Y=PX。</li></ol><h4 id="图像重构"><a href="#图像重构" class="headerlink" title="图像重构"></a>图像重构</h4><p>将上面的Y乘上P.T加上去中心化减去的值得到重构的图像</p><p>即：<br>$$<br>reconstruction=Y*P’+meanvalue<br>$$</p><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><ol><li>读取训练集图像，每一个人脸图像以一个列向量的形式存在，所以需要将每个图像重构成列向量</li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:img_num <span class="comment">%逐一读取图像</span></span><br><span class="line">    image_name = img_path_list(<span class="built_in">j</span>).name;<span class="comment">%图像名</span></span><br><span class="line">    img = imread(strcat(file_path,image_name));              </span><br><span class="line">    img = imresize(img, <span class="number">0.2</span>, <span class="string">&#x27;nearest&#x27;</span>);</span><br><span class="line">     [irow,icol] = <span class="built_in">size</span>(img);<span class="comment">%得到图片大小</span></span><br><span class="line">    temp = <span class="built_in">reshape</span>(img,irow*icol,<span class="number">1</span>);<span class="comment">%将二维图片转为一维向量</span></span><br><span class="line">    <span class="comment">% 每张图片的信息做为V的一列  </span></span><br><span class="line">    Q(:,<span class="built_in">j</span>)=temp;</span><br><span class="line">    imgTrain=[imgTrain,temp];</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="2"><li>读取完人脸数据后，将数据零均值化，即人脸向量减去平均值脸向量。然后求出这组数据的协方差矩阵的特征值向量和特征值向量,这些单位特征向量可以形成一个特征空间，然后把原图像向量向这个特征空间中投影，就可以得到特征脸</li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">mean</span>(imgTrain,<span class="number">2</span>); <span class="comment">% 平均图像/行平均</span></span><br><span class="line">Train_Number = <span class="built_in">size</span>(imgTrain,<span class="number">2</span>);<span class="comment">%列数</span></span><br><span class="line"><span class="comment">%计算机每一张图片到均值图像的方差</span></span><br><span class="line">A = [];  </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : Train_Number<span class="comment">%对每一列</span></span><br><span class="line">    temp = double(imgTrain(:,<span class="built_in">i</span>))-m; <span class="comment">%每一张图与均值的差异</span></span><br><span class="line">    A = [A temp]; <span class="comment">%差矩阵</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%得到A的协方差矩阵并转置得到L</span></span><br><span class="line">L = A&#x27;*A; <span class="comment">% L是协方差矩阵C=A*A&#x27;的转置</span></span><br><span class="line"><span class="comment">%得到特征值与特征向量</span></span><br><span class="line">[V,D] = eig(L); <span class="comment">%对角线上的元素是L|C的特征值.V:以特征向量为列的满秩矩阵，D：特征值对角矩阵。即L*V = V*D.</span></span><br><span class="line">L_eig_vec = [];<span class="comment">%特征值向量</span></span><br><span class="line"><span class="built_in">max</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : <span class="built_in">size</span>(V,<span class="number">2</span>)<span class="comment">%对每个特征向量   </span></span><br><span class="line">   <span class="built_in">max</span>=<span class="built_in">max</span>+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">size</span>(V,<span class="number">2</span>):<span class="number">-1</span>:<span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-2</span><span class="comment">%对每个特征向量      </span></span><br><span class="line">    L_eig_vec = [L_eig_vec V(:,<span class="built_in">i</span>)]*<span class="number">0</span>;<span class="comment">%集中对应的特征向量</span></span><br><span class="line">    sum=sum+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-3</span>:<span class="number">-1</span>:<span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-9</span><span class="comment">%对每个特征向量      </span></span><br><span class="line">    L_eig_vec = [L_eig_vec V(:,<span class="built_in">i</span>)]*<span class="number">0.05</span>;<span class="comment">%集中对应的特征向量</span></span><br><span class="line">    sum=sum+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">size</span>(V,<span class="number">2</span>)<span class="number">-10</span>:<span class="number">-1</span>:<span class="number">1</span><span class="comment">%对每个特征向量      </span></span><br><span class="line">    L_eig_vec = [L_eig_vec V(:,<span class="built_in">i</span>)];<span class="comment">%集中对应的特征向量</span></span><br><span class="line">    sum=sum+D(<span class="built_in">i</span>,<span class="built_in">i</span>);</span><br><span class="line">    <span class="keyword">if</span>(sum/<span class="built_in">max</span>&gt;<span class="number">0.99</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">Eigenfaces = A * L_eig_vec; <span class="comment">% 计算机协方差矩阵C的特征向量，</span></span><br><span class="line">                            <span class="comment">%得到降维了的特征,A为每一张图像与均值图像的差构成的矩阵，</span></span><br><span class="line">TrainProjectedImages = [];<span class="comment">%映射图像</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span> : img_num<span class="comment">%对于每一个训练特征</span></span><br><span class="line">    temp = Eigenfaces&#x27;*double(Q(:,<span class="built_in">i</span>));</span><br><span class="line">    TrainProjectedImages = [TrainProjectedImages temp];  <span class="comment">%得到 L_eig_vec;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ol start="3"><li>人脸重建</li></ol><p>人脸重建实验的目的是为了测试特征脸所携带的人脸信息。由于特征值的大小代表了其所对应的特征向量所携带的信息量，通过将最大的一些特征值对应的特征向量叠加就可以获得原图像中的大部分信息量，也就是所谓的主成分。这里先将所有特征值按从大到小的顺序排列。通过叠加特征向量的方式，就可以得到一组对原人脸的逼近特征脸。而将特征值加起来，正是总的信息量，也可以求出重构误差。</p><ol start="4"><li>人脸识别</li></ol><p>人脸识别即给出一个待识别的在测试集中的图像，计算该图像与已经有的人脸即训练集中的人脸的距离，距离最小的则认为该图片的人脸。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:Testcols</span><br><span class="line">    mImgTestCur = TestProjectedImages(:,<span class="built_in">i</span>);</span><br><span class="line">    vDisMin = <span class="number">9999999999999</span>;</span><br><span class="line">    vClassMin = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:Traincols</span><br><span class="line">        mImgTrainCur = TrainProjectedImages(:,<span class="built_in">j</span>);</span><br><span class="line">        mDis = mImgTestCur-mImgTrainCur;</span><br><span class="line">        mDis = mDis.^<span class="number">2</span>;</span><br><span class="line">        vDis = <span class="built_in">sqrt</span>(sum(mDis));</span><br><span class="line">        <span class="keyword">if</span> vDis&lt;vDisMin</span><br><span class="line">            vDisMin = vDis;</span><br><span class="line">    m=<span class="built_in">j</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    name1=img_path_list_train(m).name;</span><br><span class="line">   name1 =name1(<span class="number">6</span>:<span class="number">7</span>);<span class="comment">%取名字的6-7位置的字符</span></span><br><span class="line">    name2=img_path_list_test(<span class="built_in">i</span>).name;</span><br><span class="line">     name2 =name2(<span class="number">6</span>:<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> name2==name1</span><br><span class="line">count=count+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><p>未完待续…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;数值计算中有一个大作业是关于PCA的降维以及重构的，这里就总结一下，感觉还是蛮实用的。&lt;/p&gt;
&lt;h4 id=&quot;PCA概念&quot;&gt;&lt;a href=&quot;#PCA概念&quot; class=&quot;headerlink&quot; title=&quot;PCA概念&quot;&gt;&lt;/a&gt;PCA概念&lt;/h4&gt;&lt;p&gt;PC</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="matlab" scheme="http://example.com/tags/matlab/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深度优先dfs</title>
    <link href="http://example.com/2020/11/22/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88dfs/"/>
    <id>http://example.com/2020/11/22/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88dfs/</id>
    <published>2020-11-21T16:57:02.000Z</published>
    <updated>2020-11-22T06:47:25.444Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><p>之所以总结一下dfs，是因为刷python题目时候遇到一个题，单词搜索问题，类似于dfs思想的题目，不太会做，然后就总结一下</p><h2 id="什么是DFS"><a href="#什么是DFS" class="headerlink" title="什么是DFS"></a>什么是DFS</h2><p>Depth First Search英文的缩写，翻译过来就是“深度优先搜索”。</p><p>深度优先遍历的主要思想就是：首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点；当没有未访问过的顶点时，则回到上一个顶点，继续试探访问别的顶点，直到所有的顶点都被访问。</p><p>沿着某条路径遍历直到末端，然后回溯，再沿着另一条进行同样的遍历，直到所有的顶点都被访问过为止。</p><p>即：不撞南墙不回头</p><h3 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a>算法过程</h3><ol><li>任意选择一个起点v，访问该顶点</li><li>沿深度方向，依次遍历未访问邻节点</li></ol><p>tips：每次访问后都要将访问的vist[]变成1</p><h5 id="递归伪代码"><a href="#递归伪代码" class="headerlink" title="递归伪代码"></a>递归伪代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DFS(dep,、、、）        &#x2F;&#x2F;dep代表目前DFS的深度</span><br><span class="line">&#123;</span><br><span class="line">    if(找到解 || 走不下去)&#123;</span><br><span class="line">        、、、     &#x2F;&#x2F;在此处进行相应的操作</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    枚举下一种情况，DFS（dep+1,、、、）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="非递归伪代码"><a href="#非递归伪代码" class="headerlink" title="非递归伪代码"></a>非递归伪代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bool visited[MAXNODE];      &#x2F;&#x2F;顶点的访问标识数组</span><br><span class="line">void DFSInit(Graph G)&#123;</span><br><span class="line">    for(i&#x3D;0; i&lt;G.VertexNum; i++)&#123;</span><br><span class="line">        visited[i] &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void DFS(Graph G,int v)&#123;  &#x2F;&#x2F;v:顶点数组中的序号</span><br><span class="line">    Visit[v];  visited[v]&#x3D;true;</span><br><span class="line">    w &#x3D; FirstAdj(G,v);    &#x2F;&#x2F;返回：v的第一个邻接点，0表示无邻接点</span><br><span class="line">    while(w!&#x3D;0)&#123;   </span><br><span class="line">        if(!visited[w]&#123;</span><br><span class="line">            DFS(G,w);   &#x2F;&#x2F;参数传递w-&gt;v</span><br><span class="line">        &#125;</span><br><span class="line">        w &#x3D; NextAdj(G,v,w);   &#x2F;&#x2F;返回：v的在邻接点w后的邻接点，0表示不存在</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20180327185247135?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW5zYW53YQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><ul><li>其中一种DFS序列：DFS(G,v1) = (v1,v2,v3,v6,v5,v7,v4,v8,v9)</li></ul><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>dfs即找准了一条路，如果满足判定成功条件或者失败条件（撞南墙）就返回上一个节点，再从这个节点继续找下一个，再撞再回溯。</p><h5 id="单词搜索问题"><a href="#单词搜索问题" class="headerlink" title="单词搜索问题"></a>单词搜索问题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">self,i,j,cmap,word</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(word)==<span class="number">0</span>:</span><br><span class="line">            <span class="comment">#撞南墙</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment">#撞南墙</span></span><br><span class="line">        <span class="keyword">elif</span> i&gt;=<span class="built_in">len</span>(cmap) <span class="keyword">or</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> j&lt;<span class="number">0</span> <span class="keyword">or</span> j&gt;=<span class="built_in">len</span>(cmap[<span class="number">0</span>]) <span class="keyword">or</span> word[<span class="number">0</span>]!=cmap[i][j]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        temp=cmap[i][j]</span><br><span class="line">        cmap[i][j]=<span class="string">&#x27;#&#x27;</span></span><br><span class="line">        res =self.dfs(i+<span class="number">1</span>,j,cmap,word[<span class="number">1</span>:]) <span class="keyword">or</span> self.dfs(i<span class="number">-1</span>, j, cmap, word[<span class="number">1</span>:]) <span class="keyword">or</span> self.dfs(i, j+<span class="number">1</span>, cmap, word[<span class="number">1</span>:]) <span class="keyword">or</span> self.dfs(i, j<span class="number">-1</span>, cmap, word[<span class="number">1</span>:])</span><br><span class="line">        <span class="comment">#四种方向，其中有一种return True那这个节点即return True</span></span><br><span class="line">        cmap[i][j]=temp</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><hr><hr><p>未完待续……………………………….</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;之所以总结一下dfs，是因为刷python题目时候遇到一个题，单词搜索问题，类似于dfs思想的题目，不太会做，然后就总结一下&lt;/p&gt;
&lt;h2 id=&quot;什么是DFS&quot;&gt;&lt;a href=&quot;#什么是DFS&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于考研</title>
    <link href="http://example.com/2020/11/19/postdsa/"/>
    <id>http://example.com/2020/11/19/postdsa/</id>
    <published>2020-11-19T07:24:48.000Z</published>
    <updated>2020-11-19T07:43:46.425Z</updated>
    
    <content type="html"><![CDATA[<hr><p>d</p><p>现在是2020.11.19，距离大四毕业还有一年半的时间，还有半年我就要面临考研以及还是就业的选择，说实话，我现在是十分犹豫的。</p><hr><p>我之所以想考研其实很大部分原因是因为感觉自己其实并没有准备好直接就进入职场经历那雨打风吹，而且读完研究生的薪资待遇确实是和本科生不同，可能是为了“钱途”吧，本来打算保不了研就直接从业的我产生了读研的想法。</p><hr><h4 id="关于之后这大半年"><a href="#关于之后这大半年" class="headerlink" title="关于之后这大半年"></a>关于之后这大半年</h4><p>其实计算机这门学科，只要你肯花时间去专研，琢磨，总结，深入，不停写码肯定可以收获不小的成功，哪怕不能做到最最最顶尖，但肯定是高于水准线之上很多的。我的想法是：</p><ol><li>不断地刷题，刷leetcode，现在我把matrix上字节跳动的题目刷完就去刷leetcode了</li><li>总结，将知识点分类，或者觉得有用的东西弄到我的blog上，并且不断地美化自己的blog。</li><li>总结计网，计组，操作系统，计网的知识点到blog上，并且深入地做一些相关地研究或者实验去加深巩固，而且因为这学期是有计网2这个科目的，所以计网是放在第一优先级的</li><li>做一些实际的项目练手</li></ol><h4 id="考研科目"><a href="#考研科目" class="headerlink" title="考研科目"></a>考研科目</h4><h5 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h5><p>100分</p><h5 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h5><p>150分</p><h6 id="政治"><a href="#政治" class="headerlink" title="政治"></a>政治</h6><p>100分 </p><h6 id="专业课："><a href="#专业课：" class="headerlink" title="专业课："></a>专业课：</h6><p>150分</p><p>数据结构45分，计算机组成原理45分，操作系统35分，计算机网络25分；</p><p>试卷题型结构：单项选择题，80分（40小题，每小题2分）；综合题，70分；</p><hr><p>加油~愿韶华不负</p><p>​                                                                   JAYSON</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;d&lt;/p&gt;
&lt;p&gt;现在是2020.11.19，距离大四毕业还有一年半的时间，还有半年我就要面临考研以及还是就业的选择，说实话，我现在是十分犹豫的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我之所以想考研其实很大部分原因是因为感觉自己其实并没有准备好直接就进入职场经历那雨打风吹，而</summary>
      
    
    
    
    <category term="未来方向" scheme="http://example.com/categories/%E6%9C%AA%E6%9D%A5%E6%96%B9%E5%90%91/"/>
    
    
  </entry>
  
  <entry>
    <title>链表in python</title>
    <link href="http://example.com/2020/11/19/%E9%93%BE%E8%A1%A8in-python/"/>
    <id>http://example.com/2020/11/19/%E9%93%BE%E8%A1%A8in-python/</id>
    <published>2020-11-18T18:09:45.000Z</published>
    <updated>2020-11-18T18:31:49.555Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>链表是python中特别重要且实用的数据结构，c++中的链表实现是分为指针和静态的，但因为python中没有指针结构，所以是只有静态的实现</p><h3 id="链表节点的定义"><a href="#链表节点的定义" class="headerlink" title="链表节点的定义"></a>链表节点的定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>节点有两个内置变量，一个是val即储存的值。另一个是next，即指向的下一个节点。</p><h3 id="链表的构建"><a href="#链表的构建" class="headerlink" title="链表的构建"></a>链表的构建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">head= ListNode(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">3</span>):</span><br><span class="line">    node = ListNode(i)</span><br><span class="line">    cur = head.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">if</span> cur== <span class="literal">None</span>:</span><br><span class="line">        head.<span class="built_in">next</span> = node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">while</span> cur.<span class="built_in">next</span> != <span class="literal">None</span>:</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        cur.<span class="built_in">next</span> = node</span><br></pre></td></tr></table></figure><p>理解：头head是指向一个一般不动的，所以你要在头后面加数的话，得先建一个temp=head，然后改变temp在链表的位置使其指向最后一个数，再temp.next=node</p><h3 id="链表求和"><a href="#链表求和" class="headerlink" title="链表求和"></a>链表求和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span>(<span class="params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">elif</span> l2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line">        head1=reverse(l1)</span><br><span class="line">        head2=reverse(l2)</span><br><span class="line">        head=<span class="literal">None</span></span><br><span class="line">        flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> head1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> head2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head1 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                node=ListNode(<span class="number">0</span>)</span><br><span class="line">                head1=node</span><br><span class="line">            <span class="keyword">elif</span> head2 <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                node = ListNode(<span class="number">0</span>)</span><br><span class="line">                head2 = node</span><br><span class="line">            sum_num=head1.val+head2.val+flag</span><br><span class="line">            <span class="keyword">if</span> sum_num&gt;=<span class="number">10</span>:</span><br><span class="line">                flag=<span class="number">1</span></span><br><span class="line">                sum_num=sum_num%<span class="number">10</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                flag=<span class="number">0</span></span><br><span class="line">            temp=ListNode(sum_num)</span><br><span class="line">            <span class="keyword">if</span> head==<span class="literal">None</span>:</span><br><span class="line">                head=temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur=head</span><br><span class="line">                <span class="keyword">while</span> cur.<span class="built_in">next</span>!=<span class="literal">None</span>:</span><br><span class="line">                    cur=cur.<span class="built_in">next</span></span><br><span class="line">                cur.<span class="built_in">next</span>=temp</span><br><span class="line">            head1=head1.<span class="built_in">next</span></span><br><span class="line">            head2=head2.<span class="built_in">next</span></span><br><span class="line">        temp=head</span><br><span class="line">        <span class="keyword">if</span> flag==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">while</span> temp.<span class="built_in">next</span>!=<span class="literal">None</span>:</span><br><span class="line">                temp=temp.<span class="built_in">next</span></span><br><span class="line">            temp.<span class="built_in">next</span>=ListNode(<span class="number">1</span>)</span><br><span class="line">        head=reverse(head)</span><br><span class="line">        <span class="keyword">if</span> head.val==<span class="number">0</span>:</span><br><span class="line">            head=head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h3 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span>(<span class="params">self, head: ListNode</span>) -&gt; bool:</span></span><br><span class="line">        slow_list = head</span><br><span class="line">        fast_list = head</span><br><span class="line">        <span class="keyword">while</span> slow_list.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> fast_list.<span class="built_in">next</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> fast_list.<span class="built_in">next</span>.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            slow_list=slow_list.<span class="built_in">next</span></span><br><span class="line">            fast_list=fast_list.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> slow_list.val==fast_list.val:</span><br><span class="line">                print(<span class="string">&quot;True&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        print(<span class="string">&quot;False&quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h1 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h1&gt;&lt;p&gt;链表是python中特别重要且实用的数据结构，c++中的链表实现是分为指针和静态的，但因为python中没有指针结构，所以是只有静</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>基础数据结构list</title>
    <link href="http://example.com/2020/11/16/lilst/"/>
    <id>http://example.com/2020/11/16/lilst/</id>
    <published>2020-11-16T09:32:51.000Z</published>
    <updated>2020-11-19T16:29:14.384Z</updated>
    
    <content type="html"><![CDATA[<hr><p>List数据类型是python中最为常用的数据类型，在这里总结一下对list的理解</p><p>列表数据类型是python中最为常用的数据类型，在这里总结一下对list的理解，以及常用的操作</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h4 id="数据类型的理解"><a href="#数据类型的理解" class="headerlink" title="数据类型的理解"></a>数据类型的理解</h4><p>列表类型与c++的数组和STL的vector十分像，且列表中的元素类型不是固定的，十分有意思。与字符串的索引一样，列表索引从0开始。列表可以进行截取、组合等。</p><h3 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h3><p>list=[]//创建空列表</p><p>list = [‘physics’, ‘chemistry’, 1997, 2000]</p><p>list=list(range())</p><h3 id="列表的基本操作"><a href="#列表的基本操作" class="headerlink" title="列表的基本操作"></a>列表的基本操作</h3><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>在列表的最后一位添加元素</p><p>list.append(obj)</p><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p>list.insert(index,obj)</p><h4 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h4><p>移除列表中一个元素，并返回列表的值，默认是最后一位</p><p>list.pop([index=-1])</p><h4 id="列表取反"><a href="#列表取反" class="headerlink" title="列表取反"></a>列表取反</h4><p>list.reverse()</p><h4 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h4><p>该方法没有返回值，但是会对列表的对象进行排序。</p><p>list.sort(cmp=None, key=None, reverse=False)</p><h5 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h5><p>vowels.sort(reverse=True)</p><h5 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h5><p>升序是默认的即：list.sort()</p><p>vowels.sort(reverse=False)</p><h4 id="链表切片"><a href="#链表切片" class="headerlink" title="链表切片"></a>链表切片</h4><p>切片操作确实还是蛮方便的，python中可以很轻易地实现对列表的切割</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list2=list1[a:b]</span><br></pre></td></tr></table></figure><ol><li>左闭右开即取a不取b</li><li>[a:],[:b] #只取一边</li></ol><h3 id="其他列表操作"><a href="#其他列表操作" class="headerlink" title="其他列表操作"></a>其他列表操作</h3><ol><li>cmp(list1,list2)</li><li>len(list)</li><li>max(list)</li><li>min(list)</li><li>list(seq)//将元组转换为列表</li><li>list.count(obj)//统计某个元素在列表中出现的次数</li><li>list.index(obj)//从列表中找出某个值第一个匹配项的索引位置</li><li>list.remove(obj)//移除列表中某个值的第一个匹配项</li></ol><h3 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h3><ol><li>for i,j in list:</li><li>for i in range(n):</li></ol><hr><p>以上是一些列表的基本操作，一般其实用不到特别复杂的操作，未完待续………</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;List数据类型是python中最为常用的数据类型，在这里总结一下对list的理解&lt;/p&gt;
&lt;p&gt;列表数据类型是python中最为常用的数据类型，在这里总结一下对list的理解，以及常用的操作&lt;/p&gt;
&lt;h2 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; c</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://example.com/2020/11/15/numpy/"/>
    <id>http://example.com/2020/11/15/numpy/</id>
    <published>2020-11-15T14:32:51.000Z</published>
    <updated>2020-11-15T15:00:58.945Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>在数值计算中numpy特别使用，所以做一下关于numpy用法的记录</p><h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><p>import numpy as np</p><h4 id="ARRAY的创建"><a href="#ARRAY的创建" class="headerlink" title="ARRAY的创建"></a>ARRAY的创建</h4><h5 id="np-array"><a href="#np-array" class="headerlink" title="np.array()"></a>np.array()</h5><p>e.g. np.array([[1,1,1],</p><p>​                        [[1,1,1])</p><h5 id="np-zeros"><a href="#np-zeros" class="headerlink" title="np.zeros()"></a>np.zeros()</h5><p>#全零的矩阵</p><p>e.g. np.zeros([3,3])</p><h5 id="np-ones"><a href="#np-ones" class="headerlink" title="np.ones()"></a>np.ones()</h5><p>#全1的矩阵</p><p>e.g. np.ones([3,3])</p><h5 id="np-empty"><a href="#np-empty" class="headerlink" title="np.empty()"></a>np.empty()</h5><p>#空</p><p>e.g. np.empty([3,3])</p><h5 id="np-full"><a href="#np-full" class="headerlink" title="np.full()"></a>np.full()</h5><p>e.g. array=np.full([3,3],6) #全是6的3*3矩阵</p><h3 id="ARRAY的属性"><a href="#ARRAY的属性" class="headerlink" title="ARRAY的属性"></a>ARRAY的属性</h3><h5 id="array-shape"><a href="#array-shape" class="headerlink" title="array.shape"></a>array.shape</h5><p>#几行几列</p><p>对于图像来说：</p><p>​    img.shape[0]：图像的垂直尺寸（高度）</p><p>​    img.shape[1]：图像的水平尺寸（宽度）</p><p>​    img.shape[2]：图像的通道数</p><p>而对于矩阵来说：</p><p>​    shape[0]：表示矩阵的行数</p><p>​    shape[1]：表示矩阵的列数</p><h5 id="array-size"><a href="#array-size" class="headerlink" title="array.size"></a>array.size</h5><p>#大小</p><h5 id="array-T"><a href="#array-T" class="headerlink" title="array.T"></a>array.T</h5><p>#转置</p><h5 id="array-real"><a href="#array-real" class="headerlink" title="array.real"></a>array.real</h5><p>#虚数的实部</p><h5 id="array-imag"><a href="#array-imag" class="headerlink" title="array.imag"></a>array.imag</h5><p>#实数的虚部</p><h3 id="ARRAY的操作"><a href="#ARRAY的操作" class="headerlink" title="ARRAY的操作"></a>ARRAY的操作</h3><h5 id="np-mean"><a href="#np-mean" class="headerlink" title="np.mean()"></a>np.mean()</h5><p>np.mean(arr) #求所有值的均值</p><p>np.mean(arr,axis=0)#按列求均值</p><p>np.mean(arr,axis=1)#按行求均值</p><h5 id="array-copy"><a href="#array-copy" class="headerlink" title="array.copy ()"></a>array.copy ()</h5><p>#复制拷贝</p><p>e.g. cc=array.copy()</p><p>！！！cc=array 这个是浅拷贝，cc改变array也会改变</p><h5 id="array-reshape"><a href="#array-reshape" class="headerlink" title="array.reshape()"></a>array.reshape()</h5><p>array.reshape(2,8)</p><p>#重塑形状，改变数组的行和列</p><h5 id="array-resize"><a href="#array-resize" class="headerlink" title="array.resize()"></a>array.resize()</h5><p>#resize()和reshape()的区别是前者数组自身会改变，后者不会</p><h5 id="array-flatten"><a href="#array-flatten" class="headerlink" title="array.flatten"></a>array.flatten</h5><p>#直接将数组拉平编程一维的</p><h5 id="array-max"><a href="#array-max" class="headerlink" title="array.max()"></a>array.max()</h5><p>#最大值</p><h5 id="np-matmul-a-b"><a href="#np-matmul-a-b" class="headerlink" title="np.matmul(a,b)"></a>np.matmul(a,b)</h5><p>矩阵乘法</p><h5 id="np-tile"><a href="#np-tile" class="headerlink" title="np.tile()"></a>np.tile()</h5><p>#将数组沿y或x扩大倍数</p><p>np.(a,(2,1))//第一个是y，第二个是x轴</p><h3 id="ARRAY的索引"><a href="#ARRAY的索引" class="headerlink" title="ARRAY的索引"></a>ARRAY的索引</h3><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>array[1:3,1:3]#变成1，2行列的数组</p><p>#python索引是前面闭括号，后面开括号</p><h5 id="键对索引"><a href="#键对索引" class="headerlink" title="键对索引"></a>键对索引</h5><p>array[[row1,row2],[col1,col2]]</p><p>#一一对应</p><p>e.g. array[[0,2],[1,3]]</p><h5 id="np-nditer-迭代器"><a href="#np-nditer-迭代器" class="headerlink" title="np.nditer 迭代器"></a>np.nditer 迭代器</h5><p>e.g. for i in np.nditer(array):</p><p>​         print(i)</p><h3 id="ARRAY的拼接拆分"><a href="#ARRAY的拼接拆分" class="headerlink" title="ARRAY的拼接拆分"></a>ARRAY的拼接拆分</h3><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><h5 id="vstack"><a href="#vstack" class="headerlink" title="vstack"></a>vstack</h5><p>#上下</p><p>np.vstack([array1,array2])</p><h5 id="hstack"><a href="#hstack" class="headerlink" title="hstack"></a>hstack</h5><p>#左右</p><p>np.hstack([array1,array2])</p><h5 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h5><p>#维度</p><p>np.stack([array1,array2])</p><h4 id="拆分"><a href="#拆分" class="headerlink" title="拆分"></a>拆分</h4><h5 id="vsplit"><a href="#vsplit" class="headerlink" title="vsplit"></a>vsplit</h5><h5 id="hsplit"><a href="#hsplit" class="headerlink" title="hsplit"></a>hsplit</h5><h5 id="split"><a href="#split" class="headerlink" title="split"></a>split</h5><h2 id="图像的读取"><a href="#图像的读取" class="headerlink" title="图像的读取"></a>图像的读取</h2><h4 id="库"><a href="#库" class="headerlink" title="库"></a>库</h4><p>import matplotlib.pyplot as plt </p><p>import matplotlib.image as mpimg</p><p>import numpy as np</p><h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><p>img=mpimg.imread(‘cat.jpg’)</p><p>#此时 img 就已经是一个 np.array 了，可以对它进行任意处理</p><h4 id="show"><a href="#show" class="headerlink" title="show"></a>show</h4><p>plt.imshow(img) <em># 显示图片</em></p><p>plt.axis(‘off’) <em># 不显示坐标轴</em></p><p>plt.show()</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;p&gt;在数值计算中numpy特别使用，所以做一下关于numpy用法的记录&lt;/p&gt;
&lt;h3 id=&quot;numpy&quot;&gt;&lt;a href=&quot;#numpy&quot; class=&quot;headerlink&quot; title=&quot;numpy&quot;&gt;&lt;/a&gt;numpy&lt;/h3&gt;&lt;p&gt;impo</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>first_article</title>
    <link href="http://example.com/2020/10/26/first-article/"/>
    <id>http://example.com/2020/10/26/first-article/</id>
    <published>2020-10-25T16:15:37.000Z</published>
    <updated>2020-10-26T04:38:59.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="first"><a href="#first" class="headerlink" title="first"></a>first</h1><p>第一个blog_text</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;first&quot;&gt;&lt;a href=&quot;#first&quot; class=&quot;headerlink&quot; title=&quot;first&quot;&gt;&lt;/a&gt;first&lt;/h1&gt;&lt;p&gt;第一个blog_text&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/10/25/hello-world/"/>
    <id>http://example.com/2020/10/25/hello-world/</id>
    <published>2020-10-25T15:43:49.321Z</published>
    <updated>2020-10-25T15:43:49.321Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
